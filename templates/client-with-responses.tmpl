// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

{{range .}}{{$opid := .OperationId}}{{$op := .}}
type {{$opid | ucFirst}}Response struct {
    Body         []byte
	HTTPResponse *http.Response
    {{- range getResponseTypeDefinitions .}}
    {{.TypeName}} *{{.Schema.TypeDecl}}
    {{- end}}
}

// Status returns HTTPResponse.Status
func (r {{$opid | ucFirst}}Response) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r {{$opid | ucFirst}}Response) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}
{{end}}


{{range .}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$bodyRequired := .BodyRequired -}}
{{$opid := .OperationId -}}
{{/* Generate client methods (with responses)*/}}

// {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse request{{if .HasBody}} with arbitrary body{{end}} returning *{{$opid}}Response
func (c *Client) {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse(ctx context.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}, reqEditors... RequestEditorFn) (*{{genResponseTypeName $opid}}, error){
    req, err := new{{$opid}}Request{{if .HasBody}}WithBody{{end}}(c.Server{{genParamNames .PathParams}}{{if $hasParams}}, params{{end}}{{if .HasBody}}, contentType, body{{end}})
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    rsp, err := c.Client.Do(req)
    if err != nil {
        return nil, err
    }
    return parse{{genResponseTypeName $opid | ucFirst}}(rsp)
}

{{range .Bodies}}
func (c *Client) {{$opid}}{{.Suffix}}WithResponse(ctx context.Context{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody, reqEditors... RequestEditorFn) (*{{genResponseTypeName $opid}}, error) {
    req, err := new{{$opid}}{{.Suffix}}Request(c.Server{{genParamNames $pathParams}}{{if $hasParams}}, params{{end}}, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    rsp, err := c.Client.Do(req)
    if err != nil {
        return nil, err
    }
    return parse{{genResponseTypeName $opid | ucFirst}}(rsp)
}
{{end}}

{{end}}{{/* operations */}}

{{/* Generate parse functions for responses*/}}
{{range .}}{{$opid := .OperationId}}

// parse{{genResponseTypeName $opid | ucFirst}} parses an HTTP response from a {{$opid}}WithResponse call
func parse{{genResponseTypeName $opid | ucFirst}}(rsp *http.Response) (*{{genResponseTypeName $opid}}, error) {
    bodyBytes, err := ioutil.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := {{genResponsePayload $opid}}

    {{genResponseUnmarshal .}}

    return response, nil
}
{{end}}{{/* range . $opid := .OperationId */}}

{{range .}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$bodyRequired := .BodyRequired -}}
{{$opid := .OperationId -}}
{{$rspDefs := getResponseTypeDefinitions . -}}
{{$rspType := (index $rspDefs 0) -}}
{{/* Generate client methods (with responses)*/}}

// {{$opid}}{{if .HasBody}}WithBody{{end}} request{{if .HasBody}} with arbitrary body{{end}} returning *{{$opid}}Response
func (c *Client) {{$opid}}{{if .HasBody}}WithBody{{end}}(ctx context.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}) (*{{$rspType.Schema.TypeDecl}}, error){
    req, err := new{{$opid}}Request{{if .HasBody}}WithBody{{end}}(c.Server{{genParamNames .PathParams}}{{if $hasParams}}, params{{end}}{{if .HasBody}}, contentType, body{{end}})
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    ogrsp, err := c.Client.Do(req)
    if err != nil {
        return nil, err
    }
    rsp, err := parse{{genResponseTypeName $opid | ucFirst}}(ogrsp)
    if err != nil {
        return nil, err
    }
    // Check if the type we want to return is null.
    if rsp.{{$rspType.TypeName}} == nil {
        {{- range $i, $r := getResponseTypeDefinitions .}}
            {{if gt $i 0}}
            {{if ne $r.TypeName "JSON202" }}
            if rsp.{{$r.TypeName}} != nil {
                return nil, HTTPError{
                    StatusCode: ogrsp.StatusCode,
                    RequestURL: ogrsp.Request.URL,
                    Message: *rsp.{{$r.TypeName}}.Message,
                }
            }
            {{end}}
            {{end}}
        {{end}}
        return nil, HTTPError{
            StatusCode: ogrsp.StatusCode,
            RequestURL: ogrsp.Request.URL,
            Message: fmt.Sprintf("%#v", rsp),
        }
    }
    return rsp.{{$rspType.TypeName}}, nil
}

{{range .Bodies}}
func (c *Client) {{$opid}}{{.Suffix}}(ctx context.Context{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody) (*{{$rspType.Schema.TypeDecl}}, error) {
    req, err := new{{$opid}}{{.Suffix}}Request(c.Server{{genParamNames $pathParams}}{{if $hasParams}}, params{{end}}, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    ogrsp, err := c.Client.Do(req)
    if err != nil {
        return nil, err
    }
    rsp, err := parse{{genResponseTypeName $opid | ucFirst}}(ogrsp)
    if err != nil {
        return nil, err
    }
    // Check if the type we want to return is null.
    if rsp.{{$rspType.TypeName}} == nil {
        {{- range $i, $r := getResponseTypeDefinitions .}}
            {{if gt $i 0}}
            {{if ne $r.TypeName "JSON202" }}
            if rsp.{{$r.TypeName}} != nil {
                return nil, HTTPError{
                    StatusCode: ogrsp.StatusCode,
                    RequestURL: ogrsp.Request.URL,
                    Message: *rsp.{{$r.TypeName}}.Message,
                }
            }
            {{end}}
            {{end}}
        {{end}}
        return nil, HTTPError{
            StatusCode: ogrsp.StatusCode,
            RequestURL: ogrsp.Request.URL,
            Message: fmt.Sprintf("%#v", rsp),
        }
    }
    return rsp.{{$rspType.TypeName}}, nil
}
{{end}}

{{end}}{{/* operations */}}
