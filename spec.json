{
  "openapi": "3.0.0",
  "info": {
    "title": "KittyCAD API",
    "description": "The KittyCAD API",
    "termsOfService": "https://kittycad.io/terms-and-conditions",
    "contact": {
      "name": "KittyCAD Support",
      "url": "https://kittycad.io",
      "email": "support@kittycad.io"
    },
    "license": {
      "name": "Apache License, Version 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "0.0.2-6f1ca7e"
  },
  "externalDocs": {
    "url": "https://docs.kittycad.io",
    "description": "KittyCAD API Documentation"
  },
  "servers": [
    {
      "url": "https://api.kittycad.io",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "file",
      "description": "CAD file operations."
    },
    {
      "name": "meta",
      "description": "Meta information about servers, instances, and sessions."
    },
    {
      "name": "beta",
      "description": "Beta API endpoints."
    },
    {
      "name": "internal",
      "description": "Internal API endpoints."
    }
  ],
  "paths": {
    "/file/conversion/{sourceFormat}/{outputFormat}": {
      "post": {
        "description": "Convert a CAD file from one format to another. If the file being converted is larger than 30MB, it will be performed asynchronously.",
        "summary": "Convert CAD file",
        "operationId": "postFileConversion",
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "tags": [
          "file",
          "beta"
        ],
        "responses": {
          "500": {
            "$ref": "#/components/responses/500"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "202": {
            "description": "The file conversion is being performed asynchronously. You can use the `id` returned from the request to get status information about the async conversion.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileConversion"
                }
              }
            }
          },
          "200": {
            "description": "Returns the contents of the converted file, base64 encoded, if successful. The contents will be base64 encoded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileConversion"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "sourceFormat",
            "description": "The format of the file to convert.",
            "in": "path",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "#/components/schemas/ValidSourceFileFormat"
            }
          },
          {
            "name": "outputFormat",
            "description": "The format the file should be converted to.",
            "in": "path",
            "required": true,
            "deprecated": false,
            "schema": {
              "$ref": "#/components/schemas/ValidOutputFileFormat"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/file/conversion/{id}": {
      "get": {
        "description": "Get the status and output of an async file conversion.",
        "summary": "Get a file conversion",
        "operationId": "fileConversionStatus",
        "tags": [
          "file",
          "beta"
        ],
        "responses": {
          "500": {
            "$ref": "#/components/responses/500"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "200": {
            "description": "Returns the status of the file conversion. If completed, the contents of the converted file will be returned as a base64 encoded string.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileConversion"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The id of the file conversion.",
            "in": "path",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/_meta/debug/session": {
      "get": {
        "description": "Get information about your API request session. This is primarily used for debugging.",
        "summary": "Get auth session",
        "operationId": "authSession",
        "tags": [
          "meta"
        ],
        "responses": {
          "403": {
            "$ref": "#/components/responses/403"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "200": {
            "description": "Returns the authorized user's authentication session if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSession"
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/_meta/debug/instance": {
      "get": {
        "description": "Get information about this specific API server instance. This is primarily used for debugging.",
        "summary": "Get instance metadata",
        "operationId": "instanceMetadata",
        "tags": [
          "meta"
        ],
        "responses": {
          "403": {
            "$ref": "#/components/responses/403"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "200": {
            "description": "Returns the instance metadata if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/_internal/gpu/devices": {
      "get": {
        "description": "Get information about GPU devices on this server. This is primarily used for debugging. This endpoint can only be used by specific KittyCAD employees.",
        "summary": "Get GPU devices",
        "operationId": "gpuDevices",
        "tags": [
          "internal"
        ],
        "responses": {
          "403": {
            "$ref": "#/components/responses/403"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "200": {
            "description": "Returns the GPU devices if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GPUDevice"
                  }
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/_internal/async/conversions/stop": {
      "post": {
        "description": "Stop all async conversions that are currently running. This endpoint can only be used by specific KittyCAD employees.",
        "summary": "Stop all async conversions",
        "operationId": "stopAsyncConversions",
        "tags": [
          "internal"
        ],
        "responses": {
          "404": {
            "$ref": "#/components/responses/404"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileConversion"
                }
              }
            }
          }
        },
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "description": "Simple ping to the server.",
        "summary": "Ping",
        "operationId": "ping",
        "tags": [
          "meta"
        ],
        "responses": {
          "200": {
            "description": "Returns the message \"pong\" if successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PongMessage"
                }
              }
            }
          }
        },
        "parameters": []
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Short status text"
          },
          "code": {
            "type": "integer",
            "description": "Status code",
            "minimum": -2147483648,
            "maximum": 2147483647
          },
          "message": {
            "type": "string",
            "description": "Verbose message"
          }
        },
        "required": []
      },
      "FileConversion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the file conversion."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the file conversion was created."
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the file conversion was completed."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the file conversion was completed."
          },
          "status": {
            "description": "The status of the file conversion.",
            "$ref": "#/components/schemas/FileConversionStatus"
          },
          "src_format": {
            "description": "The format of the original file uploaded to be converted.",
            "$ref": "#/components/schemas/ValidSourceFileFormat"
          },
          "output_format": {
            "description": "The output format requested for the file.",
            "$ref": "#/components/schemas/ValidOutputFileFormat"
          },
          "output": {
            "type": "string",
            "description": "The converted file, base64 encoded. If the conversion failed, this field will show any errors."
          }
        },
        "required": []
      },
      "ValidSourceFileFormat": {
        "type": "string",
        "enum": [
          "stl",
          "obj",
          "dae",
          "step",
          "fbx"
        ]
      },
      "Instance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the server instance."
          },
          "git_hash": {
            "type": "string",
            "description": "The git commit hash that the server binary was built from."
          },
          "environment": {
            "description": "The environment of the server instance.",
            "$ref": "#/components/schemas/ServerEnv"
          },
          "name": {
            "type": "string",
            "description": "The name of the server instance."
          },
          "description": {
            "type": "string",
            "description": "The description of the server instance."
          },
          "ip_address": {
            "type": "string",
            "format": "ip",
            "description": "The IP address of the server instance."
          },
          "zone": {
            "type": "string",
            "description": "The zone the server instance is deployed in."
          },
          "image": {
            "type": "string",
            "description": "The virtual machine image the instance used as a base."
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the server instance."
          },
          "cpu_platform": {
            "type": "string",
            "description": "The CPU platform of the server instance."
          },
          "machine_type": {
            "type": "string",
            "description": "The machine type of the server instance."
          }
        },
        "required": []
      },
      "GPUDevice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of the device."
          },
          "name": {
            "type": "string",
            "description": "The name of the device."
          },
          "memory_clock_rate": {
            "type": "integer",
            "format": "int64",
            "description": "The memory clock rate of the device."
          },
          "memory_bus_width": {
            "type": "integer",
            "format": "int64",
            "description": "The memory bus width of the device."
          },
          "peak_memory_bandwidth": {
            "type": "integer",
            "format": "int64",
            "description": "The peak memory bandwidth of the device."
          }
        },
        "required": []
      },
      "FileConversionStatus": {
        "type": "string",
        "enum": [
          "Queued",
          "Uploaded",
          "In Progress",
          "Completed",
          "Failed"
        ]
      },
      "ValidOutputFileFormat": {
        "type": "string",
        "enum": [
          "stl",
          "obj",
          "dae",
          "step",
          "fbx",
          "fbxb"
        ]
      },
      "AuthSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the session."
          },
          "token": {
            "type": "string",
            "description": "The token the user provided for the request."
          },
          "user_id": {
            "type": "string",
            "description": "The unique identifier of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address."
          },
          "ip_address": {
            "type": "string",
            "format": "ip",
            "description": "The IP address the request originated from."
          },
          "is_valid": {
            "type": "boolean",
            "description": "If the token is valid."
          },
          "image": {
            "type": "string",
            "description": "The virtual machine image the instance used as a base."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the session/request was created."
          }
        },
        "required": []
      },
      "ServerEnv": {
        "type": "string",
        "enum": [
          "production",
          "development",
          "preview"
        ]
      },
      "PongEnum": {
        "type": "string",
        "enum": [
          "pong"
        ]
      },
      "PongMessage": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Pong response",
            "$ref": "#/components/schemas/PongEnum"
          }
        },
        "required": []
      }
    },
    "responses": {
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "406": {
        "description": "Not Acceptable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "Default HTTP Basic Authorization",
        "scheme": "bearer"
      }
    }
  }
}