// Code generated by `generate`. DO NOT EDIT.

package kittycad

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"strings"

	"github.com/gorilla/schema"
)

// GetSchema: Get OpenAPI schema.
//
func (s *MetaService) GetSchema() error {
	// Create the url.
	path := "/"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// GetAiPluginManifest: Get AI plugin manifest.
//
func (s *MetaService) GetAiPluginManifest() (*AiPluginManifest, error) {
	// Create the url.
	path := "/.well-known/ai-plugin.json"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded AiPluginManifest
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// Getdata: Get the metadata about our currently running server.
//
// This includes information on any of our other distributed systems it is connected to.
// You must be a KittyCAD employee to perform this request.
//
func (s *MetaService) Getdata() (*Metadata, error) {
	// Create the url.
	path := "/_meta/info"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Metadata
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateImageTo3D: Generate a 3D model from an image.
//
// This is an alpha endpoint. It will change in the future. The current output is honestly pretty bad. So if you find this endpoint, you get what you pay for, which currently is nothing. But in the future will be made a lot better.
//
//
// Parameters
//
// 	- `inputFormat`: An enumeration.
// 	- `outputFormat`: The valid types of output file formats.
// 	- `body`
//
func (s *AiService) CreateImageTo3D(inputFormat ImageType, outputFormat FileExportFormat, body []byte) (*Mesh, error) {
	// Create the url.
	path := "/ai/image-to-3d/{{.input_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"input_format":  string(inputFormat),
		"output_format": string(outputFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Mesh
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateTextTo3D: Generate a 3D model from text.
//
// This is an alpha endpoint. It will change in the future. The current output is honestly pretty bad. So if you find this endpoint, you get what you pay for, which currently is nothing. But in the future will be made a lot better.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of output file formats.
// 	- `prompt`
//
func (s *AiService) CreateTextTo3D(outputFormat FileExportFormat, prompt string) (*Mesh, error) {
	// Create the url.
	path := "/ai/text-to-3d/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"prompt":        prompt,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Mesh
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMetrics: Get API call metrics.
//
// This endpoint requires authentication by a KittyCAD employee. The API calls are grouped by the parameter passed.
//
//
// Parameters
//
// 	- `groupBy`: The field of an API call to group by.
//
func (s *APICallService) GetMetrics(groupBy APICallQueryGroupBy) (*[]APICallQueryGroup, error) {
	// Create the url.
	path := "/api-call-metrics"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"group_by": string(groupBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded []APICallQueryGroup
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// List: List API calls.
//
// This endpoint requires authentication by a KittyCAD employee. The API calls are returned in order of creation, with the most recently created API calls first.
//
//
// Parameters
//
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
//
func (s *APICallService) List(limit int, pageToken string, sortBy CreatedAtSortMode) (*APICallWithPriceResultsPage, error) {
	// Create the url.
	path := "/api-calls"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APICallWithPriceResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// Get: Get details of an API call.
//
// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API call for the user.
// If the user is not authenticated to view the specified API call, then it is not returned.
// Only KittyCAD employees can view API calls for other users.
//
//
// Parameters
//
// 	- `id`
//
func (s *APICallService) Get(id string) (*APICallWithPrice, error) {
	// Create the url.
	path := "/api-calls/{{.id}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APICallWithPrice
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GithubCallback: Listen for callbacks to GitHub app authentication.
//
// This is different than OAuth 2.0 authentication for users. This endpoint grants access for KittyCAD to access user's repos.
// The user doesn't need KittyCAD OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.
//
//
// Parameters
//
// 	- `body`
//
func (s *AppService) GithubCallback(body any) error {
	// Create the url.
	path := "/apps/github/callback"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("GET", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// GithubConsent: Get the consent URL for GitHub app authentication.
//
// This is different than OAuth 2.0 authentication for users. This endpoint grants access for KittyCAD to access user's repos.
// The user doesn't need KittyCAD OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.
//
func (s *AppService) GithubConsent() (*AppClientInfo, error) {
	// Create the url.
	path := "/apps/github/consent"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded AppClientInfo
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GithubWebhook: Listen for GitHub webhooks.
//
// These come from the GitHub app.
//
//
// Parameters
//
// 	- `body`
//
func (s *AppService) GithubWebhook(body []byte) error {
	// Create the url.
	path := "/apps/github/webhook"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// ListAsyncOperations: List async operations.
//
// For async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.
// This endpoint requires authentication by a KittyCAD employee.
//
//
// Parameters
//
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
// 	- `status`: The status of an async API call.
//
func (s *APICallService) ListAsyncOperations(limit int, pageToken string, sortBy CreatedAtSortMode, status APICallStatus) (*AsyncAPICallResultsPage, error) {
	// Create the url.
	path := "/async/operations"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
		"status":     string(status),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded AsyncAPICallResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetAsyncOperation: Get an async operation.
//
// Get the status and output of an async operation.
// This endpoint requires authentication by any KittyCAD user. It returns details of the requested async operation for the user.
// If the user is not authenticated to view the specified async operation, then it is not returned.
// Only KittyCAD employees with the proper access can view async operations for other users.
//
//
// Parameters
//
// 	- `id`
//
func (s *APICallService) GetAsyncOperation(id string) (*any, error) {
	// Create the url.
	path := "/async/operations/{{.id}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded any
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// AuthEmail: Create an email verification request for a user.
//
//
// Parameters
//
// 	- `body`: The body of the form for email authentication.
//
func (s *HiddenService) AuthEmail(body EmailAuthenticationForm) (*VerificationToken, error) {
	// Create the url.
	path := "/auth/email"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded VerificationToken
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// AuthEmailCallback: Listen for callbacks for email verification for users.
//
//
// Parameters
//
// 	- `callbackUrl`
// 	- `email`
// 	- `token`
//
func (s *HiddenService) AuthEmailCallback(callbackUrl URL, email string, token string) error {
	// Create the url.
	path := "/auth/email/callback"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"callback_url": callbackUrl.String(),
		"email":        email,
		"token":        token,
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// GetPhysics: Get a physics constant.
//
//
// Parameters
//
// 	- `constant`: The valid types of phys constant names.
//
func (s *ConstantService) GetPhysics(constant PhysicsConstantName) (*PhysicsConstant, error) {
	// Create the url.
	path := "/constant/physics/{{.constant}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"constant": string(constant),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded PhysicsConstant
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// Cmd: Submit one drawing operation.
//
// Response depends on which command was submitted, so unfortunately the OpenAPI schema can't generate the right response type.
//
//
// Parameters
//
// 	- `body`: A graphics command submitted to the KittyCAD engine via the Drawing API.
//
func (s *DrawingService) Cmd(body DrawingCmdReq) error {
	// Create the url.
	path := "/drawing/cmd"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// CmdBatch: Submit many drawing operations.
//
//
// Parameters
//
// 	- `body`: A batch set of graphics commands submitted to the KittyCAD engine via the Drawing API.
//
func (s *DrawingService) CmdBatch(body DrawingCmdReqBatch) (*DrawingOutcomes, error) {
	// Create the url.
	path := "/drawing/cmd_batch"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded DrawingOutcomes
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateCenterOfMass: Get CAD file center of mass.
//
// Get the center of mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
//
// Parameters
//
// 	- `srcFormat`: The valid types of source file formats.
// 	- `body`
//
func (s *FileService) CreateCenterOfMass(srcFormat FileImportFormat, body []byte) (*FileCenterOfMass, error) {
	// Create the url.
	path := "/file/center-of-mass"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"src_format": string(srcFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded FileCenterOfMass
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateConversion: Convert CAD file.
//
// Convert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.
// If the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of output file formats.
// 	- `srcFormat`: The valid types of source file formats.
// 	- `body`
//
func (s *FileService) CreateConversion(outputFormat FileExportFormat, srcFormat FileImportFormat, body []byte) (*FileConversion, error) {
	// Create the url.
	path := "/file/conversion/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded FileConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateDensity: Get CAD file density.
//
// Get the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
//
// Parameters
//
// 	- `materialMass`
// 	- `srcFormat`: The valid types of source file formats.
// 	- `body`
//
func (s *FileService) CreateDensity(materialMass float64, srcFormat FileImportFormat, body []byte) (*FileDensity, error) {
	// Create the url.
	path := "/file/density"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"material_mass": fmt.Sprintf("%f", materialMass),
		"src_format":    string(srcFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded FileDensity
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateExecution: Execute a KittyCAD program in a specific language.
//
//
// Parameters
//
// 	- `lang`: The language code is written in.
// 	- `output`
// 	- `body`
//
func (s *FileService) CreateExecution(lang CodeLanguage, output string, body []byte) (*CodeOutput, error) {
	// Create the url.
	path := "/file/execute/{{.lang}}"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"lang":   string(lang),
		"output": output,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded CodeOutput
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateMass: Get CAD file mass.
//
// Get the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
//
// Parameters
//
// 	- `materialDensity`
// 	- `srcFormat`: The valid types of source file formats.
// 	- `body`
//
func (s *FileService) CreateMass(materialDensity float64, srcFormat FileImportFormat, body []byte) (*FileMass, error) {
	// Create the url.
	path := "/file/mass"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"material_density": fmt.Sprintf("%f", materialDensity),
		"src_format":       string(srcFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded FileMass
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateSurfaceArea: Get CAD file surface area.
//
// Get the surface area of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
//
// Parameters
//
// 	- `srcFormat`: The valid types of source file formats.
// 	- `body`
//
func (s *FileService) CreateSurfaceArea(srcFormat FileImportFormat, body []byte) (*FileSurfaceArea, error) {
	// Create the url.
	path := "/file/surface-area"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"src_format": string(srcFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded FileSurfaceArea
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateVolume: Get CAD file volume.
//
// Get the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
//
// Parameters
//
// 	- `srcFormat`: The valid types of source file formats.
// 	- `body`
//
func (s *FileService) CreateVolume(srcFormat FileImportFormat, body []byte) (*FileVolume, error) {
	// Create the url.
	path := "/file/volume"
	uri := resolveRelative(s.client.server, path)

	b := bytes.NewReader(body)

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/octet-stream")

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"src_format": string(srcFormat),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded FileVolume
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// Logout: This endpoint removes the session cookie for a user.
//
// This is used in logout scenarios.
//
func (s *HiddenService) Logout() error {
	// Create the url.
	path := "/logout"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// DeviceAuthRequest: Start an OAuth 2.0 Device Authorization Grant.
//
// This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.
//
//
// Parameters
//
// 	- `body`: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
//
func (s *Oauth2Service) DeviceAuthRequest(body DeviceAuthRequestForm) error {
	// Create the url.
	path := "/oauth2/device/auth"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as a form.
	form := url.Values{}
	encoder := schema.NewEncoder()
	err := encoder.Encode(body, form)
	if err != nil {
		return fmt.Errorf("encoding form body request failed: %v", err)
	}
	b := strings.NewReader(form.Encode())

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// DeviceAuthConfirm: Confirm an OAuth 2.0 Device Authorization Grant.
//
// This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.
//
//
// Parameters
//
// 	- `body`: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.
//
func (s *Oauth2Service) DeviceAuthConfirm(body DeviceAuthVerifyParams) error {
	// Create the url.
	path := "/oauth2/device/confirm"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// DeviceAccessToken: Request a device access token.
//
// This endpoint should be polled by the client until the user code is verified and the grant is confirmed.
//
//
// Parameters
//
// 	- `body`: The form for a device access token request.
//
func (s *Oauth2Service) DeviceAccessToken(body DeviceAccessTokenRequestForm) error {
	// Create the url.
	path := "/oauth2/device/token"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as a form.
	form := url.Values{}
	encoder := schema.NewEncoder()
	err := encoder.Encode(body, form)
	if err != nil {
		return fmt.Errorf("encoding form body request failed: %v", err)
	}
	b := strings.NewReader(form.Encode())

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// DeviceAuthVerify: Verify an OAuth 2.0 Device Authorization Grant.
//
// This endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.
//
//
// Parameters
//
// 	- `userCode`
//
func (s *Oauth2Service) DeviceAuthVerify(userCode string) error {
	// Create the url.
	path := "/oauth2/device/verify"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"user_code": userCode,
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// ProviderCallback: Listen for callbacks for the OAuth 2.0 provider.
//
//
// Parameters
//
// 	- `provider`: An account provider.
// 	- `code`
// 	- `state`
//
func (s *Oauth2Service) ProviderCallback(provider AccountProvider, code string, state string) error {
	// Create the url.
	path := "/oauth2/provider/{{.provider}}/callback"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"provider": string(provider),
		"code":     code,
		"state":    state,
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// ProviderConsent: Get the consent URL and other information for the OAuth 2.0 provider.
//
//
// Parameters
//
// 	- `provider`: An account provider.
// 	- `callbackUrl`
//
func (s *Oauth2Service) ProviderConsent(provider AccountProvider, callbackUrl string) (*OAuth2ClientInfo, error) {
	// Create the url.
	path := "/oauth2/provider/{{.provider}}/consent"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"provider":     string(provider),
		"callback_url": callbackUrl,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded OAuth2ClientInfo
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetOpenaiSchema: Get AI plugin OpenAPI schema.
//
// This is the same as the OpenAPI schema, BUT it has some modifications to make it compatible with OpenAI. For example, descriptions must be < 300 chars.
//
func (s *MetaService) GetOpenaiSchema() error {
	// Create the url.
	path := "/openai/openapi.json"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// Ping: Return pong.
//
func (s *MetaService) Ping() (*Pong, error) {
	// Create the url.
	path := "/ping"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Pong
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetAccelerationConversion: Convert acceleration units.
//
// Convert an acceleration unit value to another acceleration unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of acceleration unit formats.
// 	- `srcFormat`: The valid types of acceleration unit formats.
// 	- `value`
//
func (s *UnitService) GetAccelerationConversion(outputFormat UnitAccelerationFormat, srcFormat UnitAccelerationFormat, value float64) (*UnitAccelerationConversion, error) {
	// Create the url.
	path := "/unit/conversion/acceleration/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitAccelerationConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetAngleConversion: Convert angle units.
//
// Convert an angle unit value to another angle unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of angle formats.
// 	- `srcFormat`: The valid types of angle formats.
// 	- `value`
//
func (s *UnitService) GetAngleConversion(outputFormat UnitAngleFormat, srcFormat UnitAngleFormat, value float64) (*UnitAngleConversion, error) {
	// Create the url.
	path := "/unit/conversion/angle/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitAngleConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetAngularVelocityConversion: Convert angular velocity units.
//
// Convert an angular velocity unit value to another angular velocity unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of angular velocity unit formats.
// 	- `srcFormat`: The valid types of angular velocity unit formats.
// 	- `value`
//
func (s *UnitService) GetAngularVelocityConversion(outputFormat UnitAngularVelocityFormat, srcFormat UnitAngularVelocityFormat, value float64) (*UnitAngularVelocityConversion, error) {
	// Create the url.
	path := "/unit/conversion/angular-velocity/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitAngularVelocityConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetAreaConversion: Convert area units.
//
// Convert an area unit value to another area unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of area unit formats.
// 	- `srcFormat`: The valid types of area unit formats.
// 	- `value`
//
func (s *UnitService) GetAreaConversion(outputFormat UnitAreaFormat, srcFormat UnitAreaFormat, value float64) (*UnitAreaConversion, error) {
	// Create the url.
	path := "/unit/conversion/area/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitAreaConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetChargeConversion: Convert charge units.
//
// Convert a charge unit value to another charge unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of charge unit formats.
// 	- `srcFormat`: The valid types of charge unit formats.
// 	- `value`
//
func (s *UnitService) GetChargeConversion(outputFormat UnitChargeFormat, srcFormat UnitChargeFormat, value float64) (*UnitChargeConversion, error) {
	// Create the url.
	path := "/unit/conversion/charge/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitChargeConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetConcentrationConversion: Convert concentration units.
//
// Convert a concentration unit value to another concentration unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of concentration unit formats.
// 	- `srcFormat`: The valid types of concentration unit formats.
// 	- `value`
//
func (s *UnitService) GetConcentrationConversion(outputFormat UnitConcentrationFormat, srcFormat UnitConcentrationFormat, value float64) (*UnitConcentrationConversion, error) {
	// Create the url.
	path := "/unit/conversion/concentration/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitConcentrationConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetDataTransferRateConversion: Convert data transfer rate units.
//
// Convert a data transfer rate unit value to another data transfer rate unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of data transfer unit formats.
// 	- `srcFormat`: The valid types of data transfer unit formats.
// 	- `value`
//
func (s *UnitService) GetDataTransferRateConversion(outputFormat UnitDataTransferRateFormat, srcFormat UnitDataTransferRateFormat, value float64) (*UnitDataTransferRateConversion, error) {
	// Create the url.
	path := "/unit/conversion/data-transfer-rate/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitDataTransferRateConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetDataConversion: Convert data units.
//
// Convert a data unit value to another data unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of data unit formats.
// 	- `srcFormat`: The valid types of data unit formats.
// 	- `value`
//
func (s *UnitService) GetDataConversion(outputFormat UnitDataFormat, srcFormat UnitDataFormat, value float64) (*UnitDataConversion, error) {
	// Create the url.
	path := "/unit/conversion/data/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitDataConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetDensityConversion: Convert density units.
//
// Convert a density unit value to another density unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of density unit formats.
// 	- `srcFormat`: The valid types of density unit formats.
// 	- `value`
//
func (s *UnitService) GetDensityConversion(outputFormat UnitDensityFormat, srcFormat UnitDensityFormat, value float64) (*UnitDensityConversion, error) {
	// Create the url.
	path := "/unit/conversion/density/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitDensityConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetEnergyConversion: Convert energy units.
//
// Convert a energy unit value to another energy unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of energy unit formats.
// 	- `srcFormat`: The valid types of energy unit formats.
// 	- `value`
//
func (s *UnitService) GetEnergyConversion(outputFormat UnitEnergyFormat, srcFormat UnitEnergyFormat, value float64) (*UnitEnergyConversion, error) {
	// Create the url.
	path := "/unit/conversion/energy/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitEnergyConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetForceConversion: Convert force units.
//
// Convert a force unit value to another force unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of force unit formats.
// 	- `srcFormat`: The valid types of force unit formats.
// 	- `value`
//
func (s *UnitService) GetForceConversion(outputFormat UnitForceFormat, srcFormat UnitForceFormat, value float64) (*UnitForceConversion, error) {
	// Create the url.
	path := "/unit/conversion/force/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitForceConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetIlluminanceConversion: Convert illuminance units.
//
// Convert a illuminance unit value to another illuminance unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of illuminance unit formats.
// 	- `srcFormat`: The valid types of illuminance unit formats.
// 	- `value`
//
func (s *UnitService) GetIlluminanceConversion(outputFormat UnitIlluminanceFormat, srcFormat UnitIlluminanceFormat, value float64) (*UnitIlluminanceConversion, error) {
	// Create the url.
	path := "/unit/conversion/illuminance/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitIlluminanceConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetLengthConversion: Convert length units.
//
// Convert a length unit value to another length unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of length unit formats.
// 	- `srcFormat`: The valid types of length unit formats.
// 	- `value`
//
func (s *UnitService) GetLengthConversion(outputFormat UnitLengthFormat, srcFormat UnitLengthFormat, value float64) (*UnitLengthConversion, error) {
	// Create the url.
	path := "/unit/conversion/length/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitLengthConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMagneticFieldStrengthConversion: Convert magnetic field strength units.
//
// Convert a magnetic field strength unit value to another magnetic field strength unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of magnetic field strength unit formats.
// 	- `srcFormat`: The valid types of magnetic field strength unit formats.
// 	- `value`
//
func (s *UnitService) GetMagneticFieldStrengthConversion(outputFormat UnitMagneticFieldStrengthFormat, srcFormat UnitMagneticFieldStrengthFormat, value float64) (*UnitMagneticFieldStrengthConversion, error) {
	// Create the url.
	path := "/unit/conversion/magnetic-field-strength/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitMagneticFieldStrengthConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMagneticFluxConversion: Convert magnetic flux units.
//
// Convert a magnetic flux unit value to another magnetic flux unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of magnetic flux unit formats.
// 	- `srcFormat`: The valid types of magnetic flux unit formats.
// 	- `value`
//
func (s *UnitService) GetMagneticFluxConversion(outputFormat UnitMagneticFluxFormat, srcFormat UnitMagneticFluxFormat, value float64) (*UnitMagneticFluxConversion, error) {
	// Create the url.
	path := "/unit/conversion/magnetic-flux/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitMagneticFluxConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMassConversion: Convert mass units.
//
// Convert a mass unit value to another mass unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of mass unit formats.
// 	- `srcFormat`: The valid types of mass unit formats.
// 	- `value`
//
func (s *UnitService) GetMassConversion(outputFormat UnitMassFormat, srcFormat UnitMassFormat, value float64) (*UnitMassConversion, error) {
	// Create the url.
	path := "/unit/conversion/mass/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitMassConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMetricPowerCubedConversion: Convert metric cubed units.
//
// Convert a metric cubed unit value to another metric cubed unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of metric unit formats.
// 	- `srcFormat`: The valid types of metric unit formats.
// 	- `value`
//
func (s *UnitService) GetMetricPowerCubedConversion(outputFormat UnitMetricPower, srcFormat UnitMetricPower, value float64) (*UnitMetricPowerCubedConversion, error) {
	// Create the url.
	path := "/unit/conversion/metric/cubed/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitMetricPowerCubedConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMetricPowerConversion: Convert metric units.
//
// Convert a metric unit value to another metric unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of metric unit formats.
// 	- `srcFormat`: The valid types of metric unit formats.
// 	- `value`
//
func (s *UnitService) GetMetricPowerConversion(outputFormat UnitMetricPower, srcFormat UnitMetricPower, value float64) (*UnitMetricPowerConversion, error) {
	// Create the url.
	path := "/unit/conversion/metric/power/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitMetricPowerConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetMetricPowerSquaredConversion: Convert metric squared units.
//
// Convert a metric squared unit value to another metric squared unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of metric unit formats.
// 	- `srcFormat`: The valid types of metric unit formats.
// 	- `value`
//
func (s *UnitService) GetMetricPowerSquaredConversion(outputFormat UnitMetricPower, srcFormat UnitMetricPower, value float64) (*UnitMetricPowerSquaredConversion, error) {
	// Create the url.
	path := "/unit/conversion/metric/squared/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitMetricPowerSquaredConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetPowerConversion: Convert power units.
//
// Convert a power unit value to another power unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of power unit formats.
// 	- `srcFormat`: The valid types of power unit formats.
// 	- `value`
//
func (s *UnitService) GetPowerConversion(outputFormat UnitPowerFormat, srcFormat UnitPowerFormat, value float64) (*UnitPowerConversion, error) {
	// Create the url.
	path := "/unit/conversion/power/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitPowerConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetPressureConversion: Convert pressure units.
//
// Convert a pressure unit value to another pressure unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of pressure unit formats.
// 	- `srcFormat`: The valid types of pressure unit formats.
// 	- `value`
//
func (s *UnitService) GetPressureConversion(outputFormat UnitPressureFormat, srcFormat UnitPressureFormat, value float64) (*UnitPressureConversion, error) {
	// Create the url.
	path := "/unit/conversion/pressure/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitPressureConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetRadiationConversion: Convert radiation units.
//
// Convert a radiation unit value to another radiation unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of radiation unit formats. These describe the radiation energy absorbed by a mass or material and/or how it affects the relative damage to the human body.
// 	- `srcFormat`: The valid types of radiation unit formats. These describe the radiation energy absorbed by a mass or material and/or how it affects the relative damage to the human body.
// 	- `value`
//
func (s *UnitService) GetRadiationConversion(outputFormat UnitRadiationFormat, srcFormat UnitRadiationFormat, value float64) (*UnitRadiationConversion, error) {
	// Create the url.
	path := "/unit/conversion/radiation/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitRadiationConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetRadioactivityConversion: Convert radioactivity units.
//
// Convert a radioactivity unit value to another radioactivity unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of radioactivity unit formats. These describe the amount of radiation emitted by a radioactive material.
// 	- `srcFormat`: The valid types of radioactivity unit formats. These describe the amount of radiation emitted by a radioactive material.
// 	- `value`
//
func (s *UnitService) GetRadioactivityConversion(outputFormat UnitRadioactivityFormat, srcFormat UnitRadioactivityFormat, value float64) (*UnitRadioactivityConversion, error) {
	// Create the url.
	path := "/unit/conversion/radioactivity/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitRadioactivityConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetSolidAngleConversion: Convert solid angle units.
//
// Convert a solid angle unit value to another solid angle unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of solid angle unit formats.
// 	- `srcFormat`: The valid types of solid angle unit formats.
// 	- `value`
//
func (s *UnitService) GetSolidAngleConversion(outputFormat UnitSolidAngleFormat, srcFormat UnitSolidAngleFormat, value float64) (*UnitSolidAngleConversion, error) {
	// Create the url.
	path := "/unit/conversion/solid-angle/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitSolidAngleConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetTemperatureConversion: Convert temperature units.
//
// Convert a temperature unit value to another temperature unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of temperature unit formats.
// 	- `srcFormat`: The valid types of temperature unit formats.
// 	- `value`
//
func (s *UnitService) GetTemperatureConversion(outputFormat UnitTemperatureFormat, srcFormat UnitTemperatureFormat, value float64) (*UnitTemperatureConversion, error) {
	// Create the url.
	path := "/unit/conversion/temperature/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitTemperatureConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetTimeConversion: Convert time units.
//
// Convert a time unit value to another time unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of time unit formats.
// 	- `srcFormat`: The valid types of time unit formats.
// 	- `value`
//
func (s *UnitService) GetTimeConversion(outputFormat UnitTimeFormat, srcFormat UnitTimeFormat, value float64) (*UnitTimeConversion, error) {
	// Create the url.
	path := "/unit/conversion/time/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitTimeConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetVelocityConversion: Convert velocity units.
//
// Convert a velocity unit value to another velocity unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of velocity unit formats.
// 	- `srcFormat`: The valid types of velocity unit formats.
// 	- `value`
//
func (s *UnitService) GetVelocityConversion(outputFormat UnitVelocityFormat, srcFormat UnitVelocityFormat, value float64) (*UnitVelocityConversion, error) {
	// Create the url.
	path := "/unit/conversion/velocity/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitVelocityConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetVoltageConversion: Convert voltage units.
//
// Convert a voltage unit value to another voltage unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of voltage unit formats.
// 	- `srcFormat`: The valid types of voltage unit formats.
// 	- `value`
//
func (s *UnitService) GetVoltageConversion(outputFormat UnitVoltageFormat, srcFormat UnitVoltageFormat, value float64) (*UnitVoltageConversion, error) {
	// Create the url.
	path := "/unit/conversion/voltage/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitVoltageConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetVolumeConversion: Convert volume units.
//
// Convert a volume unit value to another volume unit value. This is a nice endpoint to use for helper functions.
//
//
// Parameters
//
// 	- `outputFormat`: The valid types of volume unit formats.
// 	- `srcFormat`: The valid types of volume unit formats.
// 	- `value`
//
func (s *UnitService) GetVolumeConversion(outputFormat UnitVolumeFormat, srcFormat UnitVolumeFormat, value float64) (*UnitVolumeConversion, error) {
	// Create the url.
	path := "/unit/conversion/volume/{{.src_format}}/{{.output_format}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"output_format": string(outputFormat),
		"src_format":    string(srcFormat),
		"value":         fmt.Sprintf("%f", value),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UnitVolumeConversion
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetSelf: Get your user.
//
// Get the user information for the authenticated user.
// Alternatively, you can also use the `/users/me` endpoint.
//
func (s *UserService) GetSelf() (*User, error) {
	// Create the url.
	path := "/user"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded User
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// UpdateSelf: Update your user.
//
// This endpoint requires authentication by any KittyCAD user. It updates information about the authenticated user.
//
//
// Parameters
//
// 	- `body`: The user-modifiable parts of a User.
//
func (s *UserService) UpdateSelf(body UpdateUser) (*User, error) {
	// Create the url.
	path := "/user"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded User
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// DeleteSelf: Delete your user.
//
// This endpoint requires authentication by any KittyCAD user. It deletes the authenticated user from KittyCAD's database.
// This call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.
//
func (s *UserService) DeleteSelf() error {
	// Create the url.
	path := "/user"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// UserList: List API calls for your user.
//
// This endpoint requires authentication by any KittyCAD user. It returns the API calls for the authenticated user.
// The API calls are returned in order of creation, with the most recently created API calls first.
//
//
// Parameters
//
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
//
func (s *APICallService) UserList(limit int, pageToken string, sortBy CreatedAtSortMode) (*APICallWithPriceResultsPage, error) {
	// Create the url.
	path := "/user/api-calls"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APICallWithPriceResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetForUser: Get an API call for a user.
//
// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API call for the user.
//
//
// Parameters
//
// 	- `id`
//
func (s *APICallService) GetForUser(id string) (*APICallWithPrice, error) {
	// Create the url.
	path := "/user/api-calls/{{.id}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APICallWithPrice
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// ListForUser: List API tokens for your user.
//
// This endpoint requires authentication by any KittyCAD user. It returns the API tokens for the authenticated user.
// The API tokens are returned in order of creation, with the most recently created API tokens first.
//
//
// Parameters
//
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
//
func (s *APITokenService) ListForUser(limit int, pageToken string, sortBy CreatedAtSortMode) (*APITokenResultsPage, error) {
	// Create the url.
	path := "/user/api-tokens"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APITokenResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateForUser: Create a new API token for your user.
//
// This endpoint requires authentication by any KittyCAD user. It creates a new API token for the authenticated user.
//
func (s *APITokenService) CreateForUser() (*APIToken, error) {
	// Create the url.
	path := "/user/api-tokens"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APIToken
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetForUser: Get an API token for your user.
//
// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API token for the user.
//
//
// Parameters
//
// 	- `token`
//
func (s *APITokenService) GetForUser(token UUID) (*APIToken, error) {
	// Create the url.
	path := "/user/api-tokens/{{.token}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"token": token.String(),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APIToken
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// DeleteForUser: Delete an API token for your user.
//
// This endpoint requires authentication by any KittyCAD user. It deletes the requested API token for the user.
// This endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.
//
//
// Parameters
//
// 	- `token`
//
func (s *APITokenService) DeleteForUser(token UUID) error {
	// Create the url.
	path := "/user/api-tokens/{{.token}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"token": token.String(),
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// GetSelfExtended: Get extended information about your user.
//
// Get the user information for the authenticated user.
// Alternatively, you can also use the `/users-extended/me` endpoint.
//
func (s *UserService) GetSelfExtended() (*ExtendedUser, error) {
	// Create the url.
	path := "/user/extended"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded ExtendedUser
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetFrontHashSelf: Get your user's front verification hash.
//
// This info is sent to front when initialing the front chat, it prevents impersonations using js hacks in the browser
//
func (s *UserService) GetFrontHashSelf() (*string, error) {
	// Create the url.
	path := "/user/front-hash"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded string
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetOnboardingSelf: Get your user's onboarding status.
//
// Checks key part of their api usage to determine their onboarding progress
//
func (s *UserService) GetOnboardingSelf() (*Onboarding, error) {
	// Create the url.
	path := "/user/onboarding"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Onboarding
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetInformationForUser: Get payment info about your user.
//
// This includes billing address, phone, and name.
// This endpoint requires authentication by any KittyCAD user. It gets the payment information for the authenticated user.
//
func (s *PaymentService) GetInformationForUser() (*Customer, error) {
	// Create the url.
	path := "/user/payment"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Customer
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateInformationForUser: Create payment info for your user.
//
// This includes billing address, phone, and name.
// This endpoint requires authentication by any KittyCAD user. It creates the payment information for the authenticated user.
//
//
// Parameters
//
// 	- `body`: The billing information for payments.
//
func (s *PaymentService) CreateInformationForUser(body BillingInfo) (*Customer, error) {
	// Create the url.
	path := "/user/payment"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("POST", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Customer
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// UpdateInformationForUser: Update payment info for your user.
//
// This includes billing address, phone, and name.
// This endpoint requires authentication by any KittyCAD user. It updates the payment information for the authenticated user.
//
//
// Parameters
//
// 	- `body`: The billing information for payments.
//
func (s *PaymentService) UpdateInformationForUser(body BillingInfo) (*Customer, error) {
	// Create the url.
	path := "/user/payment"
	uri := resolveRelative(s.client.server, path)

	// Encode the request body as json.
	b := new(bytes.Buffer)
	if err := json.NewEncoder(b).Encode(body); err != nil {
		return nil, fmt.Errorf("encoding json body request failed: %v", err)
	}

	// Create the request.
	req, err := http.NewRequest("PUT", uri, b)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add our headers.
	req.Header.Add("Content-Type", "application/json")

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Customer
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// DeleteInformationForUser: Delete payment info for your user.
//
// This includes billing address, phone, and name.
// This endpoint requires authentication by any KittyCAD user. It deletes the payment information for the authenticated user.
//
func (s *PaymentService) DeleteInformationForUser() error {
	// Create the url.
	path := "/user/payment"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// GetBalanceForUser: Get balance for your user.
//
// This endpoint requires authentication by any KittyCAD user. It gets the balance information for the authenticated user.
//
func (s *PaymentService) GetBalanceForUser() (*CustomerBalance, error) {
	// Create the url.
	path := "/user/payment/balance"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded CustomerBalance
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// CreateIntentForUser: Create a payment intent for your user.
//
// This endpoint requires authentication by any KittyCAD user. It creates a new payment intent for the authenticated user.
//
func (s *PaymentService) CreateIntentForUser() (*PaymentIntent, error) {
	// Create the url.
	path := "/user/payment/intent"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("POST", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded PaymentIntent
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// ListInvoicesForUser: List invoices for your user.
//
// This endpoint requires authentication by any KittyCAD user. It lists invoices for the authenticated user.
//
func (s *PaymentService) ListInvoicesForUser() (*[]Invoice, error) {
	// Create the url.
	path := "/user/payment/invoices"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded []Invoice
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// ListMethodsForUser: List payment methods for your user.
//
// This endpoint requires authentication by any KittyCAD user. It lists payment methods for the authenticated user.
//
func (s *PaymentService) ListMethodsForUser() (*[]PaymentMethod, error) {
	// Create the url.
	path := "/user/payment/methods"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded []PaymentMethod
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// DeleteMethodForUser: Delete a payment method for your user.
//
// This endpoint requires authentication by any KittyCAD user. It deletes the specified payment method for the authenticated user.
//
//
// Parameters
//
// 	- `id`
//
func (s *PaymentService) DeleteMethodForUser(id string) error {
	// Create the url.
	path := "/user/payment/methods/{{.id}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("DELETE", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// ValidateCustomerTaxInformationForUser: Validate a customer's information is correct and valid for automatic tax.
//
// This endpoint requires authentication by any KittyCAD user. It will return an error if the customer's information is not valid for automatic tax. Otherwise, it will return an empty successful response.
//
func (s *PaymentService) ValidateCustomerTaxInformationForUser() error {
	// Create the url.
	path := "/user/payment/tax"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return err
	}

	// Return.
	return nil

}

// GetForUser: Get a session for your user.
//
// This endpoint requires authentication by any KittyCAD user. It returns details of the requested API token for the user.
//
//
// Parameters
//
// 	- `token`
//
func (s *SessionService) GetForUser(token UUID) (*Session, error) {
	// Create the url.
	path := "/user/session/{{.token}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"token": token.String(),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded Session
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// List: List users.
//
// This endpoint required authentication by a KittyCAD employee. The users are returned in order of creation, with the most recently created users first.
//
//
// Parameters
//
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
//
func (s *UserService) List(limit int, pageToken string, sortBy CreatedAtSortMode) (*UserResultsPage, error) {
	// Create the url.
	path := "/users"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded UserResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// ListExtended: List users with extended information.
//
// This endpoint required authentication by a KittyCAD employee. The users are returned in order of creation, with the most recently created users first.
//
//
// Parameters
//
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
//
func (s *UserService) ListExtended(limit int, pageToken string, sortBy CreatedAtSortMode) (*ExtendedUserResultsPage, error) {
	// Create the url.
	path := "/users-extended"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded ExtendedUserResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// GetExtended: Get extended information about a user.
//
// To get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.
// Alternatively, to get information about the authenticated user, use `/user/extended` endpoint.
// To get information about any KittyCAD user, you must be a KittyCAD employee.
//
//
// Parameters
//
// 	- `id`
//
func (s *UserService) GetExtended(id string) (*ExtendedUser, error) {
	// Create the url.
	path := "/users-extended/{{.id}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded ExtendedUser
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// Get: Get a user.
//
// To get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.
// Alternatively, to get information about the authenticated user, use `/user` endpoint.
// To get information about any KittyCAD user, you must be a KittyCAD employee.
//
//
// Parameters
//
// 	- `id`
//
func (s *UserService) Get(id string) (*User, error) {
	// Create the url.
	path := "/users/{{.id}}"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id": id,
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded User
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}

// ListForUser: List API calls for a user.
//
// This endpoint requires authentication by any KittyCAD user. It returns the API calls for the authenticated user if "me" is passed as the user id.
// Alternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.
// If the authenticated user is a KittyCAD employee, then the API calls are returned for the user specified by the user id.
// The API calls are returned in order of creation, with the most recently created API calls first.
//
//
// Parameters
//
// 	- `id`
// 	- `limit`
// 	- `pageToken`
// 	- `sortBy`: Supported set of sort modes for scanning by created_at only.
//
// 		Currently, we only support scanning in ascending order.
//
func (s *APICallService) ListForUser(id string, limit int, pageToken string, sortBy CreatedAtSortMode) (*APICallWithPriceResultsPage, error) {
	// Create the url.
	path := "/users/{{.id}}/api-calls"
	uri := resolveRelative(s.client.server, path)

	// Create the request.
	req, err := http.NewRequest("GET", uri, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %v", err)
	}

	// Add the parameters to the url.
	if err := expandURL(req.URL, map[string]string{
		"id":         id,
		"limit":      strconv.Itoa(limit),
		"page_token": pageToken,
		"sort_by":    string(sortBy),
	}); err != nil {
		return nil, fmt.Errorf("expanding URL with parameters failed: %v", err)
	}

	// Send the request.
	resp, err := s.client.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	// Check the response.
	if err := checkResponse(resp); err != nil {
		return nil, err
	}

	// Decode the body from the response.
	if resp.Body == nil {
		return nil, errors.New("request returned an empty body in the response")
	}
	var decoded APICallWithPriceResultsPage
	if err := json.NewDecoder(resp.Body).Decode(&decoded); err != nil {
		return nil, fmt.Errorf("error decoding response body: %v", err)
	}

	// Return the response.
	return &decoded, nil

}
