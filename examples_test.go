// Code generated by `generate`. DO NOT EDIT.

package kittycad_test

import (
	"fmt"
	"log"
	"net/url"
	"os"
	"os/signal"
	"time"

	"github.com/gorilla/websocket"
	"github.com/kittycad/kittycad.go"
)

// Create a client with your token.
func ExampleNewClient() {
	client, err := kittycad.NewClient("$TOKEN", "your apps user agent")
	if err != nil {
		panic(err)
	}

	// Call the client's methods.
	result, err := client.Meta.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Println(result)
}

// - OR -

// Create a new client with your token parsed from the environment
// variable: `KITTYCAD_API_TOKEN`.
func ExampleNewClientFromEnv() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	// Call the client's methods.
	result, err := client.Meta.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)
}

// GetSchema: Get OpenAPI schema.
func ExampleMetaService_GetSchema() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Meta.GetSchema(); err != nil {
		panic(err)
	}

}

// GetAiPluginManifest: Get AI plugin manifest.
func ExampleMetaService_GetAiPluginManifest() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.GetAiPluginManifest()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Getdata: Get the metadata about our currently running server.
// This includes information on any of our other distributed systems it is connected to.
// You must be a Zoo employee to perform this request.
func ExampleMetaService_Getdata() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.Getdata()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListPrompts: List all AI prompts.
// For text-to-cad prompts, this will always return the STEP file contents as well as the format the user originally requested.
// This endpoint requires authentication by a Zoo employee.
// The AI prompts are returned in order of creation, with the most recently created AI prompts first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAiService_ListPrompts() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ai.ListPrompts(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPrompt: Get an AI prompt.
// This endpoint requires authentication by a Zoo employee.
//
// Parameters
//
//   - `id`
func ExampleAiService_GetPrompt() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ai.GetPrompt(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTextToCad: Generate a CAD model from text.
// Because our source of truth for the resulting model is a STEP file, you will always have STEP file contents when you list your generated models. Any other formats you request here will also be returned when you list your generated models.
// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
// One thing to note, if you hit the cache, this endpoint will return right away. So you only have to wait if the status is not `Completed` or `Failed`.
// This is an alpha endpoint. It will change in the future. The current output is honestly pretty bad. So if you find this endpoint, you get what you pay for, which currently is nothing. But in the future will be made a lot better.
//
// Parameters
//
//   - `outputFormat`: The valid types of output file formats.
//   - `body`: Body for generating models from text.
func ExampleAiService_CreateTextToCad() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ai.CreateTextToCad("", kittycad.TextToCadCreateBody{Prompt: "some-string"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetMetrics: Get API call metrics.
// This endpoint requires authentication by a Zoo employee. The API calls are grouped by the parameter passed.
//
// Parameters
//
//   - `groupBy`: The field of an API call to group by.
func ExampleAPICallService_GetMetrics() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetMetrics("")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// List: List API calls.
// This endpoint requires authentication by a Zoo employee. The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_List() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.List(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Get: Get details of an API call.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.
// If the user is not authenticated to view the specified API call, then it is not returned.
// Only Zoo employees can view API calls for other users.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_Get() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.Get(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GithubCallback: Listen for callbacks to GitHub app authentication.
// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.
// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.
//
// Parameters
//
//   - `body`
func ExampleAppService_GithubCallback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.App.GithubCallback(""); err != nil {
		panic(err)
	}

}

// GithubConsent: Get the consent URL for GitHub app authentication.
// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.
// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.
func ExampleAppService_GithubConsent() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.App.GithubConsent()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GithubWebhook: Listen for GitHub webhooks.
// These come from the GitHub app.
//
// Parameters
//
//   - `body`
func ExampleAppService_GithubWebhook() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.App.GithubWebhook([]byte("some-binary")); err != nil {
		panic(err)
	}

}

// ListAsyncOperations: List async operations.
// For async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.
// This endpoint requires authentication by a Zoo employee.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
//
//   - `status`: The status of an async API call.
func ExampleAPICallService_ListAsyncOperations() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.ListAsyncOperations(123, "some-string", "", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAsyncOperation: Get an async operation.
// Get the status and output of an async operation.
// This endpoint requires authentication by any Zoo user. It returns details of the requested async operation for the user.
// If the user is not authenticated to view the specified async operation, then it is not returned.
// Only Zoo employees with the proper access can view async operations for other users.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_GetAsyncOperation() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetAsyncOperation("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// AuthEmail: Create an email verification request for a user.
// Parameters
//
//   - `body`: The body of the form for email authentication.
func ExampleHiddenService_AuthEmail() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Hidden.AuthEmail(kittycad.EmailAuthenticationForm{CallbackUrl: kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, Email: "example@example.com"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// AuthEmailCallback: Listen for callbacks for email verification for users.
// Parameters
//
//   - `callbackUrl`
//   - `email`
//   - `token`
func ExampleHiddenService_AuthEmailCallback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.AuthEmailCallback(kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, "example@example.com", "some-string"); err != nil {
		panic(err)
	}

}

// CreateCenterOfMass: Get CAD file center of mass.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
// This endpoint returns the cartesian coordinate in world space measure units.
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
// Get the center of mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputUnit`: The valid types of length units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateCenterOfMass() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateCenterOfMass("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateConversion: Convert CAD file with defaults.
// If you wish to specify the conversion options, use the `/file/conversion` endpoint instead.
// Convert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.
// If the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputFormat`: The valid types of output file formats.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateConversion("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateDensity: Get CAD file density.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
// This endpoint assumes if you are giving a material mass in a specific mass units, we return a density in mass unit per cubic measure unit.
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
// Get the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `materialMass`
//   - `materialMassUnit`: The valid types of mass units.
//   - `outputUnit`: The valid types for density units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateDensity() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateDensity(123.45, "", "", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateFileExecution: Execute a Zoo program in a specific language.
// Parameters
//
//   - `lang`: The language code is written in.
//   - `output`
//   - `body`
func ExampleExecutorService_CreateFileExecution() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Executor.CreateFileExecution("", "some-string", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateMass: Get CAD file mass.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
// This endpoint assumes if you are giving a material density in a specific mass unit per cubic measure unit, we return a mass in mass units. The same mass units as passed in the material density.
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
// Get the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `materialDensity`
//   - `materialDensityUnit`: The valid types for density units.
//   - `outputUnit`: The valid types of mass units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateMass() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateMass(123.45, "", "", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateSurfaceArea: Get CAD file surface area.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
// This endpoint returns the square measure units.
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
// Get the surface area of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputUnit`: The valid types of area units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateSurfaceArea() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateSurfaceArea("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateVolume: Get CAD file volume.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
// This endpoint returns the cubic measure units.
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
// Get the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputUnit`: The valid types of volume units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateVolume() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateVolume("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// InternalGetAPITokenForDiscordUser: Get an API token for a user by their discord id.
// This endpoint allows us to run API calls from our discord bot on behalf of a user. The user must have a discord account linked to their Zoo Account via oauth2 for this to work.
// You must be a Zoo employee to use this endpoint.
//
// Parameters
//
//   - `discordId`
func ExampleMetaService_InternalGetAPITokenForDiscordUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.InternalGetAPITokenForDiscordUser("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Logout: This endpoint removes the session cookie for a user.
// This is used in logout scenarios.
func ExampleHiddenService_Logout() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.Logout(); err != nil {
		panic(err)
	}

}

// DeviceAuthRequest: Start an OAuth 2.0 Device Authorization Grant.
// This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.
//
// Parameters
//
//   - `body`: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
func ExampleOauth2Service_DeviceAuthRequest() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAuthRequest(kittycad.DeviceAuthRequestForm{ClientID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8")}); err != nil {
		panic(err)
	}

}

// DeviceAuthConfirm: Confirm an OAuth 2.0 Device Authorization Grant.
// This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.
//
// Parameters
//
//   - `body`: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.
func ExampleOauth2Service_DeviceAuthConfirm() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAuthConfirm(kittycad.DeviceAuthVerifyParams{UserCode: "some-string"}); err != nil {
		panic(err)
	}

}

// DeviceAccessToken: Request a device access token.
// This endpoint should be polled by the client until the user code is verified and the grant is confirmed.
//
// Parameters
//
//   - `body`: The form for a device access token request.
func ExampleOauth2Service_DeviceAccessToken() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAccessToken(kittycad.DeviceAccessTokenRequestForm{ClientID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), DeviceCode: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), GrantType: ""}); err != nil {
		panic(err)
	}

}

// DeviceAuthVerify: Verify an OAuth 2.0 Device Authorization Grant.
// This endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.
//
// Parameters
//
//   - `userCode`
func ExampleOauth2Service_DeviceAuthVerify() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAuthVerify("some-string"); err != nil {
		panic(err)
	}

}

// ProviderCallback: Listen for callbacks for the OAuth 2.0 provider.
// Parameters
//
//   - `provider`: An account provider.
//   - `code`
//   - `state`
func ExampleOauth2Service_ProviderCallback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.ProviderCallback("", "some-string", "some-string"); err != nil {
		panic(err)
	}

}

// ProviderConsent: Get the consent URL and other information for the OAuth 2.0 provider.
// Parameters
//
//   - `provider`: An account provider.
//   - `callbackUrl`
func ExampleOauth2Service_ProviderConsent() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Oauth2.ProviderConsent("", "some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetOpenaiSchema: Get AI plugin OpenAPI schema.
// This is the same as the OpenAPI schema, BUT it has some modifications to make it compatible with OpenAI. For example, descriptions must be < 300 chars.
func ExampleMetaService_GetOpenaiSchema() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Meta.GetOpenaiSchema(); err != nil {
		panic(err)
	}

}

// Ping: Return pong.
func ExampleMetaService_Ping() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAngleConversion: Convert angle units.
// Convert an angle unit value to another angle unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of angle formats.
//   - `outputUnit`: The valid types of angle formats.
//   - `value`
func ExampleUnitService_GetAngleConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetAngleConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAreaConversion: Convert area units.
// Convert an area unit value to another area unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of area units.
//   - `outputUnit`: The valid types of area units.
//   - `value`
func ExampleUnitService_GetAreaConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetAreaConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetCurrentConversion: Convert current units.
// Convert a current unit value to another current unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of current units.
//   - `outputUnit`: The valid types of current units.
//   - `value`
func ExampleUnitService_GetCurrentConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetCurrentConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetEnergyConversion: Convert energy units.
// Convert a energy unit value to another energy unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of energy units.
//   - `outputUnit`: The valid types of energy units.
//   - `value`
func ExampleUnitService_GetEnergyConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetEnergyConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForceConversion: Convert force units.
// Convert a force unit value to another force unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of force units.
//   - `outputUnit`: The valid types of force units.
//   - `value`
func ExampleUnitService_GetForceConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetForceConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetFrequencyConversion: Convert frequency units.
// Convert a frequency unit value to another frequency unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of frequency units.
//   - `outputUnit`: The valid types of frequency units.
//   - `value`
func ExampleUnitService_GetFrequencyConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetFrequencyConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetLengthConversion: Convert length units.
// Convert a length unit value to another length unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of length units.
//   - `outputUnit`: The valid types of length units.
//   - `value`
func ExampleUnitService_GetLengthConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetLengthConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetMassConversion: Convert mass units.
// Convert a mass unit value to another mass unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of mass units.
//   - `outputUnit`: The valid types of mass units.
//   - `value`
func ExampleUnitService_GetMassConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetMassConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPowerConversion: Convert power units.
// Convert a power unit value to another power unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of power units.
//   - `outputUnit`: The valid types of power units.
//   - `value`
func ExampleUnitService_GetPowerConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetPowerConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPressureConversion: Convert pressure units.
// Convert a pressure unit value to another pressure unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of pressure units.
//   - `outputUnit`: The valid types of pressure units.
//   - `value`
func ExampleUnitService_GetPressureConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetPressureConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetTemperatureConversion: Convert temperature units.
// Convert a temperature unit value to another temperature unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of temperature units.
//   - `outputUnit`: The valid types of temperature units.
//   - `value`
func ExampleUnitService_GetTemperatureConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetTemperatureConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetTorqueConversion: Convert torque units.
// Convert a torque unit value to another torque unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of torque units.
//   - `outputUnit`: The valid types of torque units.
//   - `value`
func ExampleUnitService_GetTorqueConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetTorqueConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetVolumeConversion: Convert volume units.
// Convert a volume unit value to another volume unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of volume units.
//   - `outputUnit`: The valid types of volume units.
//   - `value`
func ExampleUnitService_GetVolumeConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetVolumeConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetSelf: Get your user.
// Get the user information for the authenticated user.
// Alternatively, you can also use the `/users/me` endpoint.
func ExampleUserService_GetSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetSelf()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateSelf: Update your user.
// This endpoint requires authentication by any Zoo user. It updates information about the authenticated user.
//
// Parameters
//
//   - `body`: The user-modifiable parts of a User.
func ExampleUserService_UpdateSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.UpdateSelf(kittycad.UpdateUser{Company: "some-string", Discord: "some-string", FirstName: "some-string", Github: "some-string", LastName: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteSelf: Delete your user.
// This endpoint requires authentication by any Zoo user. It deletes the authenticated user from Zoo's database.
// This call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.
func ExampleUserService_DeleteSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.User.DeleteSelf(); err != nil {
		panic(err)
	}

}

// UserList: List API calls for your user.
// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user.
// The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_UserList() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.UserList(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForUser: Get an API call for a user.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_GetForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetForUser(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListForUser: List API tokens for your user.
// This endpoint requires authentication by any Zoo user. It returns the API tokens for the authenticated user.
// The API tokens are returned in order of creation, with the most recently created API tokens first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPITokenService_ListForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APIToken.ListForUser(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateForUser: Create a new API token for your user.
// This endpoint requires authentication by any Zoo user. It creates a new API token for the authenticated user.
func ExampleAPITokenService_CreateForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APIToken.CreateForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForUser: Get an API token for your user.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.
//
// Parameters
//
//   - `token`
func ExampleAPITokenService_GetForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APIToken.GetForUser(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteForUser: Delete an API token for your user.
// This endpoint requires authentication by any Zoo user. It deletes the requested API token for the user.
// This endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.
//
// Parameters
//
//   - `token`
func ExampleAPITokenService_DeleteForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.APIToken.DeleteForUser(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8")); err != nil {
		panic(err)
	}

}

// GetSelfExtended: Get extended information about your user.
// Get the user information for the authenticated user.
// Alternatively, you can also use the `/users-extended/me` endpoint.
func ExampleUserService_GetSelfExtended() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetSelfExtended()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetOnboardingSelf: Get your user's onboarding status.
// Checks key part of their api usage to determine their onboarding progress
func ExampleUserService_GetOnboardingSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetOnboardingSelf()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetInformationForUser: Get payment info about your user.
// This includes billing address, phone, and name.
// This endpoint requires authentication by any Zoo user. It gets the payment information for the authenticated user.
func ExamplePaymentService_GetInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetInformationForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateInformationForUser: Create payment info for your user.
// This includes billing address, phone, and name.
// This endpoint requires authentication by any Zoo user. It creates the payment information for the authenticated user.
//
// Parameters
//
//   - `body`: The billing information for payments.
func ExamplePaymentService_CreateInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateInformationForUser(kittycad.BillingInfo{Address: kittycad.NewAddress{City: "some-string", Country: "some-string", State: "some-string", Street1: "some-string", Street2: "some-string", UserID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), Zip: "some-string"}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateInformationForUser: Update payment info for your user.
// This includes billing address, phone, and name.
// This endpoint requires authentication by any Zoo user. It updates the payment information for the authenticated user.
//
// Parameters
//
//   - `body`: The billing information for payments.
func ExamplePaymentService_UpdateInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateInformationForUser(kittycad.BillingInfo{Address: kittycad.NewAddress{City: "some-string", Country: "some-string", State: "some-string", Street1: "some-string", Street2: "some-string", UserID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), Zip: "some-string"}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteInformationForUser: Delete payment info for your user.
// This includes billing address, phone, and name.
// This endpoint requires authentication by any Zoo user. It deletes the payment information for the authenticated user.
func ExamplePaymentService_DeleteInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.DeleteInformationForUser(); err != nil {
		panic(err)
	}

}

// GetBalanceForUser: Get balance for your user.
// This endpoint requires authentication by any Zoo user. It gets the balance information for the authenticated user.
func ExamplePaymentService_GetBalanceForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetBalanceForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateIntentForUser: Create a payment intent for your user.
// This endpoint requires authentication by any Zoo user. It creates a new payment intent for the authenticated user.
func ExamplePaymentService_CreateIntentForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateIntentForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListInvoicesForUser: List invoices for your user.
// This endpoint requires authentication by any Zoo user. It lists invoices for the authenticated user.
func ExamplePaymentService_ListInvoicesForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.ListInvoicesForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListMethodsForUser: List payment methods for your user.
// This endpoint requires authentication by any Zoo user. It lists payment methods for the authenticated user.
func ExamplePaymentService_ListMethodsForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.ListMethodsForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteMethodForUser: Delete a payment method for your user.
// This endpoint requires authentication by any Zoo user. It deletes the specified payment method for the authenticated user.
//
// Parameters
//
//   - `id`
func ExamplePaymentService_DeleteMethodForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.DeleteMethodForUser("some-string"); err != nil {
		panic(err)
	}

}

// ValidateCustomerTaxInformationForUser: Validate a customer's information is correct and valid for automatic tax.
// This endpoint requires authentication by any Zoo user. It will return an error if the customer's information is not valid for automatic tax. Otherwise, it will return an empty successful response.
func ExamplePaymentService_ValidateCustomerTaxInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.ValidateCustomerTaxInformationForUser(); err != nil {
		panic(err)
	}

}

// GetSessionFor: Get a session for your user.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.
//
// Parameters
//
//   - `token`
func ExampleUserService_GetSessionFor() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetSessionFor(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListTextToCadModelsForUser: List text-to-CAD models you've generated.
// This will always return the STEP file contents as well as the format the user originally requested.
// This endpoint requires authentication by any Zoo user. It returns the text-to-CAD models for the authenticated user.
// The text-to-CAD models are returned in order of creation, with the most recently created text-to-CAD models first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAiService_ListTextToCadModelsForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ai.ListTextToCadModelsForUser(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetTextToCadModelForUser: Get a text-to-CAD response.
// This endpoint requires authentication by any Zoo user. The user must be the owner of the text-to-CAD model.
//
// Parameters
//
//   - `id`
func ExampleAiService_GetTextToCadModelForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ai.GetTextToCadModelForUser(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTextToCadModelFeedback: Give feedback to a specific text-to-CAD response.
// This endpoint requires authentication by any Zoo user. The user must be the owner of the text-to-CAD model, in order to give feedback.
//
// Parameters
//
//   - `id`
//   - `feedback`: Human feedback on an AI response.
func ExampleAiService_CreateTextToCadModelFeedback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Ai.CreateTextToCadModelFeedback(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), ""); err != nil {
		panic(err)
	}

}

// List: List users.
// This endpoint required authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleUserService_List() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.List(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListExtended: List users with extended information.
// This endpoint required authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleUserService_ListExtended() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.ListExtended(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetExtended: Get extended information about a user.
// To get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.
// Alternatively, to get information about the authenticated user, use `/user/extended` endpoint.
// To get information about any Zoo user, you must be a Zoo employee.
//
// Parameters
//
//   - `id`
func ExampleUserService_GetExtended() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetExtended("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Get: Get a user.
// To get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.
// Alternatively, to get information about the authenticated user, use `/user` endpoint.
// To get information about any Zoo user, you must be a Zoo employee.
//
// Parameters
//
//   - `id`
func ExampleUserService_Get() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.Get("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListForUser: List API calls for a user.
// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user if "me" is passed as the user id.
// Alternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.
// If the authenticated user is a Zoo employee, then the API calls are returned for the user specified by the user id.
// The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `id`
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_ListForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.ListForUser("some-string", 123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTerm: Create a terminal.
// Attach to a docker container to create an interactive terminal.
func ExampleExecutorService_CreateTerm() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	// Create the websocket connection.
	ws, err := client.Executor.CreateTerm()
	if err != nil {
		panic(err)
	}

	defer ws.Close()

	done := make(chan struct{})

	go func() {
		defer close(done)
		for {
			_, message, err := ws.ReadMessage()
			if err != nil {
				log.Println("read:", err)
				return
			}
			log.Printf("recv: %s", message)
		}
	}()

	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)

	for {
		select {
		case <-done:
			return
		case t := <-ticker.C:
			err := ws.WriteMessage(websocket.TextMessage, []byte(t.String()))
			if err != nil {
				log.Println("write:", err)
				return
			}
		case <-interrupt:
			log.Println("interrupt")

			// Cleanly close the connection by sending a close message and then
			// waiting (with timeout) for the server to close the connection.
			err := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
			if err != nil {
				log.Println("write close:", err)
				return
			}
			select {
			case <-done:
			case <-time.After(time.Second):
			}
			return
		}
	}

}

// CommandsWs: Open a websocket which accepts modeling commands.
// Pass those commands to the engine via websocket, and pass responses back to the client. Basically, this is a websocket proxy between the frontend/client and the engine.
//
// Parameters
//
//   - `fps`
//   - `unlockedFramerate`
//   - `videoResHeight`
//   - `videoResWidth`
//   - `webrtc`
//   - `body`: The websocket messages the server receives.
func ExampleModelingService_CommandsWs() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	// Create the websocket connection.
	ws, err := client.Modeling.CommandsWs(123, true, 123, 123, true, "")
	if err != nil {
		panic(err)
	}

	defer ws.Close()

	done := make(chan struct{})

	go func() {
		defer close(done)
		for {
			_, message, err := ws.ReadMessage()
			if err != nil {
				log.Println("read:", err)
				return
			}
			log.Printf("recv: %s", message)
		}
	}()

	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)

	for {
		select {
		case <-done:
			return
		case t := <-ticker.C:
			err := ws.WriteMessage(websocket.TextMessage, []byte(t.String()))
			if err != nil {
				log.Println("write:", err)
				return
			}
		case <-interrupt:
			log.Println("interrupt")

			// Cleanly close the connection by sending a close message and then
			// waiting (with timeout) for the server to close the connection.
			err := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
			if err != nil {
				log.Println("write close:", err)
				return
			}
			select {
			case <-done:
			case <-time.After(time.Second):
			}
			return
		}
	}

}
