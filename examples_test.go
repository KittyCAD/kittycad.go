// Code generated by `generate`. DO NOT EDIT.

package kittycad_test

import (
	"bytes"
	"fmt"
	"log"
	"net/url"
	"os"
	"os/signal"
	"time"

	"github.com/gorilla/websocket"
	"github.com/kittycad/kittycad.go"
)

// Create a client with your token.
func ExampleNewClient() {
	client, err := kittycad.NewClient("$TOKEN", "your apps user agent")
	if err != nil {
		panic(err)
	}

	// Call the client's methods.
	result, err := client.Meta.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Println(result)
}

// - OR -

// Create a new client with your token parsed from the environment
// variable: `ZOO_API_TOKEN`.
func ExampleNewClientFromEnv() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	// Call the client's methods.
	result, err := client.Meta.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)
}

// GetSchema: Get OpenAPI schema.
func ExampleMetaService_GetSchema() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Meta.GetSchema(); err != nil {
		panic(err)
	}

}

// Getdata: Get the metadata about our currently running server.
// This includes information on any of our other distributed systems it is connected to.
//
// You must be a Zoo employee to perform this request.
func ExampleMetaService_Getdata() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.Getdata()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetIpinfo: Get ip address information.
func ExampleMetaService_GetIpinfo() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.GetIpinfo()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTextToCad: Generate a CAD model from text.
// Because our source of truth for the resulting model is a STEP file, you will always have STEP file contents when you list your generated models. Any other formats you request here will also be returned when you list your generated models.
//
// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// One thing to note, if you hit the cache, this endpoint will return right away. So you only have to wait if the status is not `Completed` or `Failed`.
//
// Parameters
//
//   - `outputFormat`: The valid types of output file formats.
//   - `kcl`
//   - `body`: Body for generating models from text.
func ExampleMlService_CreateTextToCad() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.CreateTextToCad("", true, kittycad.TextToCadCreateBody{Prompt: "some-string"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetMetrics: Get API call metrics.
// This endpoint requires authentication by a Zoo employee. The API calls are grouped by the parameter passed.
//
// Parameters
//
//   - `groupBy`: The field of an API call to group by.
func ExampleAPICallService_GetMetrics() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetMetrics("")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// List: List API calls.
// This endpoint requires authentication by a Zoo employee. The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_List() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.List(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Get: Get details of an API call.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.
//
// If the user is not authenticated to view the specified API call, then it is not returned.
//
// Only Zoo employees can view API calls for other users.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_Get() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.Get(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GithubCallback: Listen for callbacks to GitHub app authentication.
// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.
//
// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.
//
// Parameters
//
//   - `body`
func ExampleAppService_GithubCallback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.App.GithubCallback(""); err != nil {
		panic(err)
	}

}

// GithubConsent: Get the consent URL for GitHub app authentication.
// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.
//
// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.
func ExampleAppService_GithubConsent() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.App.GithubConsent()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GithubWebhook: Listen for GitHub webhooks.
// These come from the GitHub app.
//
// Parameters
//
//   - `body`
func ExampleAppService_GithubWebhook() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.App.GithubWebhook([]byte("some-binary")); err != nil {
		panic(err)
	}

}

// ListAsyncOperations: List async operations.
// For async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.
//
// This endpoint requires authentication by a Zoo employee.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
//
//   - `status`: The status of an async API call.
func ExampleAPICallService_ListAsyncOperations() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.ListAsyncOperations(123, "some-string", "", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAsyncOperation: Get an async operation.
// Get the status and output of an async operation.
//
// This endpoint requires authentication by any Zoo user. It returns details of the requested async operation for the user.
//
// If the user is not authenticated to view the specified async operation, then it is not returned.
//
// Only Zoo employees with the proper access can view async operations for other users.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_GetAsyncOperation() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetAsyncOperation(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// AuthEmail: Create an email verification request for a user.
// Parameters
//
//   - `body`: The body of the form for email authentication.
func ExampleHiddenService_AuthEmail() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Hidden.AuthEmail(kittycad.EmailAuthenticationForm{CallbackUrl: kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, Email: "example@example.com"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// AuthEmailCallback: Listen for callbacks for email verification for users.
// Parameters
//
//   - `callbackUrl`
//   - `email`
//   - `token`
func ExampleHiddenService_AuthEmailCallback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.AuthEmailCallback(kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, "example@example.com", "some-string"); err != nil {
		panic(err)
	}

}

// GetAuthSaml: Get a redirect straight to the SAML IdP.
// The UI uses this to avoid having to ask the API anything about the IdP. It already knows the SAML IdP ID from the path, so it can just link to this path and rely on the API to redirect to the actual IdP.
//
// Parameters
//
//   - `providerId`: A UUID usually v4 or v7
//   - `callbackUrl`
func ExampleHiddenService_GetAuthSaml() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.GetAuthSaml(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}); err != nil {
		panic(err)
	}

}

// PostAuthSaml: Authenticate a user via SAML
// Parameters
//
//   - `providerId`: A UUID usually v4 or v7
//   - `body`
func ExampleHiddenService_PostAuthSaml() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.PostAuthSaml(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), []byte("some-binary")); err != nil {
		panic(err)
	}

}

// CommunitySso: Authorize an inbound auth request from our Community page.
// Parameters
//
//   - `sig`
//   - `sso`
func ExampleMetaService_CommunitySso() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Meta.CommunitySso("some-string", "some-string"); err != nil {
		panic(err)
	}

}

// CreateDebugUploads: Uploads files to public blob storage for debugging purposes.
// Do NOT send files here that you don't want to be public.
//
// Parameters
//
//   - `body`
func ExampleMetaService_CreateDebugUploads() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	buf := new(bytes.Buffer)

	result, err := client.Meta.CreateDebugUploads(buf)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateEvent: Creates an internal telemetry event.
// We collect anonymous telemetry data for improving our product.
//
// Parameters
//
//   - `body`: Telemetry data we are collecting
func ExampleMetaService_CreateEvent() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	buf := new(bytes.Buffer)

	if err := client.Meta.CreateEvent(buf); err != nil {
		panic(err)
	}

}

// CreateCenterOfMass: Get CAD file center of mass.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
//
// This endpoint returns the cartesian coordinate in world space measure units.
//
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
//
// Get the center of mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
//
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputUnit`: The valid types of length units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateCenterOfMass() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateCenterOfMass("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateConversion: Convert CAD file with defaults.
// If you wish to specify the conversion options, use the `/file/conversion` endpoint instead.
//
// Convert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.
//
// If the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.
//
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputFormat`: The valid types of output file formats.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateConversion("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateDensity: Get CAD file density.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
//
// This endpoint assumes if you are giving a material mass in a specific mass units, we return a density in mass unit per cubic measure unit.
//
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
//
// Get the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
//
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `materialMass`
//   - `materialMassUnit`: The valid types of mass units.
//   - `outputUnit`: The valid types for density units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateDensity() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateDensity(123.45, "", "", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateFileExecution: Execute a Zoo program in a specific language.
// Parameters
//
//   - `lang`: The language code is written in.
//
//     <details><summary>JSON schema</summary>
//
//     ```json { "description": "The language code is written in.", "oneOf": [ { "description": "The `go` programming language.", "type": "string", "enum": [ "go" ] }, { "description": "The `python` programming language.", "type": "string", "enum": [ "python" ] }, { "description": "The `node` programming language.", "type": "string", "enum": [ "node" ] } ] } ``` </details>
//
//   - `output`
//
//   - `body`
func ExampleExecutorService_CreateFileExecution() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Executor.CreateFileExecution("", "some-string", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateMass: Get CAD file mass.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
//
// This endpoint assumes if you are giving a material density in a specific mass unit per cubic measure unit, we return a mass in mass units. The same mass units as passed in the material density.
//
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
//
// Get the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
//
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `materialDensity`
//   - `materialDensityUnit`: The valid types for density units.
//   - `outputUnit`: The valid types of mass units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateMass() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateMass(123.45, "", "", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateSurfaceArea: Get CAD file surface area.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
//
// This endpoint returns the square measure units.
//
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
//
// Get the surface area of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
//
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputUnit`: The valid types of area units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateSurfaceArea() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateSurfaceArea("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateVolume: Get CAD file volume.
// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.
//
// This endpoint returns the cubic measure units.
//
// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.
//
// Get the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.
//
// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `outputUnit`: The valid types of volume units.
//   - `srcFormat`: The valid types of source file formats.
//   - `body`
func ExampleFileService_CreateVolume() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.File.CreateVolume("", "", []byte("some-binary"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// InternalGetAPITokenForDiscordUser: Get an API token for a user by their discord id.
// This endpoint allows us to run API calls from our discord bot on behalf of a user. The user must have a discord account linked to their Zoo Account via oauth2 for this to work.
//
// You must be a Zoo employee to use this endpoint.
//
// Parameters
//
//   - `discordId`
func ExampleMetaService_InternalGetAPITokenForDiscordUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.InternalGetAPITokenForDiscordUser("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Logout: This endpoint removes the session cookie for a user.
// This is used in logout scenarios.
func ExampleHiddenService_Logout() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.Logout(); err != nil {
		panic(err)
	}

}

// ListPrompts: List all ML prompts.
// For text-to-cad prompts, this will always return the STEP file contents as well as the format the user originally requested.
//
// This endpoint requires authentication by a Zoo employee.
//
// The ML prompts are returned in order of creation, with the most recently created ML prompts first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleMlService_ListPrompts() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.ListPrompts(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPrompt: Get a ML prompt.
// This endpoint requires authentication by a Zoo employee.
//
// Parameters
//
//   - `id`
func ExampleMlService_GetPrompt() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.GetPrompt(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateKclCodeCompletions: Generate code completions for KCL.
// Parameters
//
//   - `body`: A request to generate KCL code completions.
func ExampleMlService_CreateKclCodeCompletions() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.CreateKclCodeCompletions(kittycad.KclCodeCompletionRequest{Extra: kittycad.KclCodeCompletionParams{Language: "some-string", NextIndent: 123, PromptTokens: 123, SuffixTokens: 123, TrimByIndentation: true}, MaxTokens: 123, N: 123, Nwo: "some-string", Prompt: "some-string", Stop: []string{"some-string"}, Stream: true, Suffix: "some-string", Temperature: 123.45, TopP: 123.45})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTextToCadIteration: Iterate on a CAD model with a prompt.
// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.
//
// Parameters
//
//   - `body`: Body for generating models from text.
func ExampleMlService_CreateTextToCadIteration() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.CreateTextToCadIteration(kittycad.TextToCadIterationBody{OriginalSourceCode: "some-string", Prompt: "some-string", SourceRanges: []kittycad.SourceRangePrompt{{Prompt: "some-string", Range: kittycad.SourceRange{End: kittycad.SourcePosition{Column: 123, Line: 123}, Start: kittycad.SourcePosition{Column: 123, Line: 123}}}}})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeviceAuthRequest: Start an OAuth 2.0 Device Authorization Grant.
// This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.
//
// Parameters
//
//   - `body`: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
func ExampleOauth2Service_DeviceAuthRequest() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAuthRequest(kittycad.DeviceAuthRequestForm{ClientID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8")}); err != nil {
		panic(err)
	}

}

// DeviceAuthConfirm: Confirm an OAuth 2.0 Device Authorization Grant.
// This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.
//
// Parameters
//
//   - `body`: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.
func ExampleOauth2Service_DeviceAuthConfirm() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAuthConfirm(kittycad.DeviceAuthVerifyParams{UserCode: "some-string"}); err != nil {
		panic(err)
	}

}

// DeviceAccessToken: Request a device access token.
// This endpoint should be polled by the client until the user code is verified and the grant is confirmed.
//
// Parameters
//
//   - `body`: The form for a device access token request.
func ExampleOauth2Service_DeviceAccessToken() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAccessToken(kittycad.DeviceAccessTokenRequestForm{ClientID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), DeviceCode: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), GrantType: ""}); err != nil {
		panic(err)
	}

}

// DeviceAuthVerify: Verify an OAuth 2.0 Device Authorization Grant.
// This endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.
//
// Parameters
//
//   - `userCode`
func ExampleOauth2Service_DeviceAuthVerify() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.DeviceAuthVerify("some-string"); err != nil {
		panic(err)
	}

}

// ProviderCallback: Listen for callbacks for the OAuth 2.0 provider.
// Parameters
//
//   - `provider`: An account provider.
//   - `code`
//   - `idToken`
//   - `state`
//   - `user`
func ExampleOauth2Service_ProviderCallback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.ProviderCallback("", "some-string", "some-string", "some-string", "some-string"); err != nil {
		panic(err)
	}

}

// ProviderCallbackCreate: Listen for callbacks for the OAuth 2.0 provider.
// This specific endpoint listens for posts of form data.
//
// Parameters
//
//   - `provider`: An account provider.
//   - `body`: The authentication callback from the OAuth 2.0 client. This is typically posted to the redirect URL as query params after authenticating.
func ExampleOauth2Service_ProviderCallbackCreate() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.ProviderCallbackCreate("", kittycad.AuthCallback{Code: "some-string", IdToken: "some-string", State: "some-string", User: "some-string"}); err != nil {
		panic(err)
	}

}

// ProviderConsent: Get the consent URL and other information for the OAuth 2.0 provider.
// Parameters
//
//   - `provider`: An account provider.
//   - `callbackUrl`
func ExampleOauth2Service_ProviderConsent() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Oauth2.ProviderConsent("", "some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// TokenRevoke: Revoke an OAuth2 token.
// This endpoint is designed to be accessed from an *unauthenticated* API client.
//
// Parameters
//
//   - `body`: The request parameters for the OAuth 2.0 token revocation flow.
func ExampleOauth2Service_TokenRevoke() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Oauth2.TokenRevoke(kittycad.TokenRevokeRequestForm{ClientID: kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), ClientSecret: "some-string", Token: "some-string"}); err != nil {
		panic(err)
	}

}

// Get: Get an org.
// This endpoint requires authentication by an org admin. It gets the authenticated user's org.
func ExampleOrgService_Get() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.Get()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Create: Create an org.
// This endpoint requires authentication by a Zoo user that is not already in an org. It creates a new org for the authenticated user and makes them an admin.
//
// Parameters
//
//   - `body`: The user-modifiable parts of an organization.
func ExampleOrgService_Create() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.Create(kittycad.OrgDetails{AllowUsersInDomainToAutoJoin: true, BillingEmail: "example@example.com", Domain: "some-string", Image: kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Update: Update an org.
// This endpoint requires authentication by an org admin. It updates the authenticated user's org.
//
// Parameters
//
//   - `body`: The user-modifiable parts of an organization.
func ExampleOrgService_Update() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.Update(kittycad.OrgDetails{AllowUsersInDomainToAutoJoin: true, BillingEmail: "example@example.com", Domain: "some-string", Image: kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Delete: Delete an org.
// In order to delete an org, you must first delete all of its members, except yourself.
//
// You must also have no outstanding invoices or unpaid balances.
//
// This endpoint requires authentication by an org admin. It deletes the authenticated user's org.
func ExampleOrgService_Delete() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Org.Delete(); err != nil {
		panic(err)
	}

}

// OrgList: List API calls for your org.
// This includes all API calls that were made by users in the org.
//
// This endpoint requires authentication by an org admin. It returns the API calls for the authenticated user's org.
//
// The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_OrgList() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.OrgList(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForOrg: Get an API call for an org.
// This endpoint requires authentication by an org admin. It returns details of the requested API call for the user's org.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_GetForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetForOrg(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListMembers: List members of your org.
// This endpoint requires authentication by an org admin. It lists the members of the authenticated user's org.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
//
//   - `role`: The roles for users in an organization.
func ExampleOrgService_ListMembers() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.ListMembers(123, "some-string", "", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateMember: Add a member to your org.
// If the user exists, this will add them to your org. If they do not exist, this will create a new user and add them to your org.
//
// In both cases the user gets an email that they have been added to the org.
//
// If the user is already in your org, this will return a 400 and a message.
//
// If the user is already in a different org, this will return a 400 and a message.
//
// This endpoint requires authentication by an org admin. It adds the specified member to the authenticated user's org.
//
// Parameters
//
//   - `body`: Data for adding a member to an org.
func ExampleOrgService_CreateMember() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.CreateMember(kittycad.AddOrgMember{Email: "example@example.com", Role: ""})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetMember: Get a member of your org.
// This endpoint requires authentication by an org admin. It gets the specified member of the authenticated user's org.
//
// Parameters
//
//   - `userId`: A UUID usually v4 or v7
func ExampleOrgService_GetMember() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.GetMember(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateMember: Update a member of your org.
// This endpoint requires authentication by an org admin. It updates the specified member of the authenticated user's org.
//
// Parameters
//
//   - `userId`: A UUID usually v4 or v7
//   - `body`: Data for updating a member of an org.
func ExampleOrgService_UpdateMember() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.UpdateMember(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), kittycad.UpdateMemberToOrgBody{Role: ""})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteMember: Remove a member from your org.
// This endpoint requires authentication by an org admin. It removes the specified member from the authenticated user's org.
//
// Parameters
//
//   - `userId`: A UUID usually v4 or v7
func ExampleOrgService_DeleteMember() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Org.DeleteMember(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8")); err != nil {
		panic(err)
	}

}

// GetInformationForOrg: Get payment info about your org.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by an org admin. It gets the payment information for the authenticated user's org.
func ExamplePaymentService_GetInformationForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetInformationForOrg()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateInformationForOrg: Create payment info for your org.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by the org admin. It creates the payment information for the authenticated user's org.
//
// Parameters
//
//   - `body`: The billing information for payments.
func ExamplePaymentService_CreateInformationForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateInformationForOrg(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: "some-string", Country: "some-string", State: "some-string", Street1: "some-string", Street2: "some-string", Zip: "some-string"}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateInformationForOrg: Update payment info for your org.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by an org admin. It updates the payment information for the authenticated user's org.
//
// Parameters
//
//   - `body`: The billing information for payments.
func ExamplePaymentService_UpdateInformationForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateInformationForOrg(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: "some-string", Country: "some-string", State: "some-string", Street1: "some-string", Street2: "some-string", Zip: "some-string"}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteInformationForOrg: Delete payment info for your org.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by an org admin. It deletes the payment information for the authenticated user's org.
func ExamplePaymentService_DeleteInformationForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.DeleteInformationForOrg(); err != nil {
		panic(err)
	}

}

// GetBalanceForOrg: Get balance for your org.
// This endpoint requires authentication by an org admin. It gets the balance information for the authenticated user's org.
func ExamplePaymentService_GetBalanceForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetBalanceForOrg()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateIntentForOrg: Create a payment intent for your org.
// This endpoint requires authentication by the org admin. It creates a new payment intent for the authenticated user's org's org.
func ExamplePaymentService_CreateIntentForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateIntentForOrg()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListInvoicesForOrg: List invoices for your org.
// This endpoint requires authentication by an org admin. It lists invoices for the authenticated user's org.
func ExamplePaymentService_ListInvoicesForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.ListInvoicesForOrg()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListMethodsForOrg: List payment methods for your org.
// This endpoint requires authentication by an org admin. It lists payment methods for the authenticated user's org.
func ExamplePaymentService_ListMethodsForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.ListMethodsForOrg()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteMethodForOrg: Delete a payment method for your org.
// This endpoint requires authentication by an org admin. It deletes the specified payment method for the authenticated user's org.
//
// Parameters
//
//   - `id`
func ExamplePaymentService_DeleteMethodForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.DeleteMethodForOrg("some-string"); err != nil {
		panic(err)
	}

}

// GetOrgSubscription: Get the subscription for an org.
// This endpoint requires authentication by an org admin. It gets the subscription for the authenticated user's org.
func ExamplePaymentService_GetOrgSubscription() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetOrgSubscription()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateOrgSubscription: Create the subscription for an org.
// This endpoint requires authentication by an org admin. It creates the subscription for the authenticated user's org.
//
// Parameters
//
//   - `body`: A struct of Zoo product subscriptions an organization can request.
func ExamplePaymentService_CreateOrgSubscription() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateOrgSubscription(kittycad.ZooProductSubscriptionsOrgRequest{ModelingApp: "", PayAnnually: true})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateOrgSubscription: Update the subscription for an org.
// This endpoint requires authentication by an org admin. It updates the subscription for the authenticated user's org.
//
// Parameters
//
//   - `body`: A struct of Zoo product subscriptions an organization can request.
func ExamplePaymentService_UpdateOrgSubscription() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateOrgSubscription(kittycad.ZooProductSubscriptionsOrgRequest{ModelingApp: "", PayAnnually: true})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ValidateCustomerTaxInformationForOrg: Validate an orgs's information is correct and valid for automatic tax.
// This endpoint requires authentication by an org admin. It will return an error if the org's information is not valid for automatic tax. Otherwise, it will return an empty successful response.
func ExamplePaymentService_ValidateCustomerTaxInformationForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.ValidateCustomerTaxInformationForOrg(); err != nil {
		panic(err)
	}

}

// GetPrivacySettings: Get the privacy settings for an org.
// This endpoint requires authentication by an org admin. It gets the privacy settings for the authenticated user's org.
func ExampleOrgService_GetPrivacySettings() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.GetPrivacySettings()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdatePrivacySettings: Update the privacy settings for an org.
// This endpoint requires authentication by an org admin. It updates the privacy settings for the authenticated user's org.
//
// Parameters
//
//   - `body`: Privacy settings for an org or user.
func ExampleOrgService_UpdatePrivacySettings() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.UpdatePrivacySettings(kittycad.PrivacySettings{CanTrainOnData: true})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetSamlIdp: Get the SAML identity provider.
// This endpoint requires authentication by an org admin.
func ExampleOrgService_GetSamlIdp() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.GetSamlIdp()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateSamlIdp: Create a SAML identity provider.
// This endpoint requires authentication by an org admin.
//
// Parameters
//
//   - `body`: Parameters for creating a SAML identity provider.
func ExampleOrgService_CreateSamlIdp() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.CreateSamlIdp(kittycad.SamlIdentityProviderCreate{IdpEntityID: "some-string", IdpMetadataSource: "", SigningKeypair: kittycad.DerEncodedKeyPair{PrivateKey: kittycad.Base64{Inner: []byte("aGVsbG8gd29ybGQK")}, PublicCert: kittycad.Base64{Inner: []byte("aGVsbG8gd29ybGQK")}}, TechnicalContactEmail: "example@example.com"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateSamlIdp: Update the SAML identity provider.
// This endpoint requires authentication by an org admin.
//
// Parameters
//
//   - `body`: Parameters for creating a SAML identity provider.
func ExampleOrgService_UpdateSamlIdp() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.UpdateSamlIdp(kittycad.SamlIdentityProviderCreate{IdpEntityID: "some-string", IdpMetadataSource: "", SigningKeypair: kittycad.DerEncodedKeyPair{PrivateKey: kittycad.Base64{Inner: []byte("aGVsbG8gd29ybGQK")}, PublicCert: kittycad.Base64{Inner: []byte("aGVsbG8gd29ybGQK")}}, TechnicalContactEmail: "example@example.com"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteSamlIdp: Delete an SAML identity provider.
// This endpoint requires authentication by an org admin.
func ExampleOrgService_DeleteSamlIdp() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Org.DeleteSamlIdp(); err != nil {
		panic(err)
	}

}

// ListForOrg: List service accounts for your org.
// This endpoint requires authentication by an org admin. It returns the service accounts for the organization.
//
// The service accounts are returned in order of creation, with the most recently created service accounts first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleServiceAccountService_ListForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.ServiceAccount.ListForOrg(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateForOrg: Create a new service account for your org.
// This endpoint requires authentication by an org admin. It creates a new service account for the organization.
//
// Parameters
//
//   - `label`
func ExampleServiceAccountService_CreateForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.ServiceAccount.CreateForOrg("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForOrg: Get an service account for your org.
// This endpoint requires authentication by an org admin. It returns details of the requested service account for the organization.
//
// Parameters
//
//   - `token`: An auth token. A uuid with a prefix of svc-
func ExampleServiceAccountService_GetForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.ServiceAccount.GetForOrg("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteForOrg: Delete an service account for your org.
// This endpoint requires authentication by an org admin. It deletes the requested service account for the organization.
//
// This endpoint does not actually delete the service account from the database. It merely marks the token as invalid. We still want to keep the service account in the database for historical purposes.
//
// Parameters
//
//   - `token`: An auth token. A uuid with a prefix of svc-
func ExampleServiceAccountService_DeleteForOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.ServiceAccount.DeleteForOrg("some-string"); err != nil {
		panic(err)
	}

}

// GetShortlinks: Get the shortlinks for an org.
// This endpoint requires authentication by an org admin. It gets the shortlinks for the authenticated user's org.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleOrgService_GetShortlinks() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.GetShortlinks(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// List: List orgs.
// This endpoint requires authentication by a Zoo employee. The orgs are returned in order of creation, with the most recently created orgs first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleOrgService_List() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.List(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAny: Get an org.
// This endpoint requires authentication by a Zoo employee. It gets the information for the specified org.
//
// Parameters
//
//   - `id`: A UUID usually v4 or v7
func ExampleOrgService_GetAny() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.GetAny(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateEnterprisePricingFor: Set the enterprise price for an organization.
// You must be a Zoo employee to perform this request.
//
// Parameters
//
//   - `id`: A UUID usually v4 or v7
//   - `body`: The price for an enterprise subscription.
func ExampleOrgService_UpdateEnterprisePricingFor() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.UpdateEnterprisePricingFor(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetBalanceForAnyOrg: Get balance for an org.
// This endpoint requires authentication by a Zoo employee. It gets the balance information for the specified org.
//
// Parameters
//
//   - `id`: A UUID usually v4 or v7
func ExamplePaymentService_GetBalanceForAnyOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetBalanceForAnyOrg(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateBalanceForAnyOrg: Update balance for an org.
// This endpoint requires authentication by a Zoo employee. It updates the balance information for the specified org.
//
// Parameters
//
//   - `id`: A UUID usually v4 or v7
//   - `body`: The data for updating a balance.
func ExamplePaymentService_UpdateBalanceForAnyOrg() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateBalanceForAnyOrg(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), kittycad.UpdatePaymentBalance{MonthlyCreditsRemaining: 123.45, PrePayCashRemaining: 123.45, PrePayCreditsRemaining: 123.45})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Ping: Return pong.
func ExampleMetaService_Ping() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.Ping()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPricingSubscriptions: Get the pricing for our subscriptions.
// This is the ultimate source of truth for the pricing of our subscriptions.
func ExampleMetaService_GetPricingSubscriptions() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Meta.GetPricingSubscriptions()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateCoupon: Create a new store coupon.
// This endpoint requires authentication by a Zoo employee. It creates a new store coupon.
//
// Parameters
//
//   - `body`: The parameters for a new store coupon.
func ExampleStoreService_CreateCoupon() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Store.CreateCoupon(kittycad.StoreCouponParams{PercentOff: 123})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAngleConversion: Convert angle units.
// Convert an angle unit value to another angle unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of angle formats.
//   - `outputUnit`: The valid types of angle formats.
//   - `value`
func ExampleUnitService_GetAngleConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetAngleConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetAreaConversion: Convert area units.
// Convert an area unit value to another area unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of area units.
//   - `outputUnit`: The valid types of area units.
//   - `value`
func ExampleUnitService_GetAreaConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetAreaConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetCurrentConversion: Convert current units.
// Convert a current unit value to another current unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of current units.
//   - `outputUnit`: The valid types of current units.
//   - `value`
func ExampleUnitService_GetCurrentConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetCurrentConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetEnergyConversion: Convert energy units.
// Convert a energy unit value to another energy unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of energy units.
//   - `outputUnit`: The valid types of energy units.
//   - `value`
func ExampleUnitService_GetEnergyConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetEnergyConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForceConversion: Convert force units.
// Convert a force unit value to another force unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of force units.
//   - `outputUnit`: The valid types of force units.
//   - `value`
func ExampleUnitService_GetForceConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetForceConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetFrequencyConversion: Convert frequency units.
// Convert a frequency unit value to another frequency unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of frequency units.
//   - `outputUnit`: The valid types of frequency units.
//   - `value`
func ExampleUnitService_GetFrequencyConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetFrequencyConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetLengthConversion: Convert length units.
// Convert a length unit value to another length unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of length units.
//   - `outputUnit`: The valid types of length units.
//   - `value`
func ExampleUnitService_GetLengthConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetLengthConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetMassConversion: Convert mass units.
// Convert a mass unit value to another mass unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of mass units.
//   - `outputUnit`: The valid types of mass units.
//   - `value`
func ExampleUnitService_GetMassConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetMassConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPowerConversion: Convert power units.
// Convert a power unit value to another power unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of power units.
//   - `outputUnit`: The valid types of power units.
//   - `value`
func ExampleUnitService_GetPowerConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetPowerConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetPressureConversion: Convert pressure units.
// Convert a pressure unit value to another pressure unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of pressure units.
//   - `outputUnit`: The valid types of pressure units.
//   - `value`
func ExampleUnitService_GetPressureConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetPressureConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetTemperatureConversion: Convert temperature units.
// Convert a temperature unit value to another temperature unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of temperature units.
//   - `outputUnit`: The valid types of temperature units.
//   - `value`
func ExampleUnitService_GetTemperatureConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetTemperatureConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetTorqueConversion: Convert torque units.
// Convert a torque unit value to another torque unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of torque units.
//   - `outputUnit`: The valid types of torque units.
//   - `value`
func ExampleUnitService_GetTorqueConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetTorqueConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetVolumeConversion: Convert volume units.
// Convert a volume unit value to another volume unit value. This is a nice endpoint to use for helper functions.
//
// Parameters
//
//   - `inputUnit`: The valid types of volume units.
//   - `outputUnit`: The valid types of volume units.
//   - `value`
func ExampleUnitService_GetVolumeConversion() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Unit.GetVolumeConversion("", "", 123.45)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetSelf: Get your user.
// Get the user information for the authenticated user.
//
// Alternatively, you can also use the `/users/me` endpoint.
func ExampleUserService_GetSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetSelf()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateSelf: Update your user.
// This endpoint requires authentication by any Zoo user. It updates information about the authenticated user.
//
// Parameters
//
//   - `body`: The user-modifiable parts of a User.
func ExampleUserService_UpdateSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.UpdateSelf(kittycad.UpdateUser{Company: "some-string", Discord: "some-string", FirstName: "some-string", Github: "some-string", Image: kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}, LastName: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteSelf: Delete your user.
// This endpoint requires authentication by any Zoo user. It deletes the authenticated user from Zoo's database.
//
// This call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.
func ExampleUserService_DeleteSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.User.DeleteSelf(); err != nil {
		panic(err)
	}

}

// UserList: List API calls for your user.
// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user.
//
// The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_UserList() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.UserList(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForUser: Get an API call for a user.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.
//
// Parameters
//
//   - `id`
func ExampleAPICallService_GetForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.GetForUser(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListForUser: List API tokens for your user.
// This endpoint requires authentication by any Zoo user. It returns the API tokens for the authenticated user.
//
// The API tokens are returned in order of creation, with the most recently created API tokens first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPITokenService_ListForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APIToken.ListForUser(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateForUser: Create a new API token for your user.
// This endpoint requires authentication by any Zoo user. It creates a new API token for the authenticated user.
//
// Parameters
//
//   - `label`
func ExampleAPITokenService_CreateForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APIToken.CreateForUser("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetForUser: Get an API token for your user.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.
//
// Parameters
//
//   - `token`: An auth token. A uuid with a prefix of api-
func ExampleAPITokenService_GetForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APIToken.GetForUser("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteForUser: Delete an API token for your user.
// This endpoint requires authentication by any Zoo user. It deletes the requested API token for the user.
//
// This endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.
//
// Parameters
//
//   - `token`: An auth token. A uuid with a prefix of api-
func ExampleAPITokenService_DeleteForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.APIToken.DeleteForUser("some-string"); err != nil {
		panic(err)
	}

}

// GetSelfExtended: Get extended information about your user.
// Get the user information for the authenticated user.
//
// Alternatively, you can also use the `/users-extended/me` endpoint.
func ExampleUserService_GetSelfExtended() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetSelfExtended()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetOauth2ProvidersFor: Get the OAuth2 providers for your user.
// If this returns an empty array, then the user has not connected any OAuth2 providers and uses raw email authentication.
//
// This endpoint requires authentication by any Zoo user. It gets the providers for the authenticated user.
func ExampleUserService_GetOauth2ProvidersFor() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetOauth2ProvidersFor()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetOnboardingSelf: Get your user's onboarding status.
// Checks key part of their api usage to determine their onboarding progress
func ExampleUserService_GetOnboardingSelf() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetOnboardingSelf()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetUser: Get a user's org.
// This endpoint requires authentication by any Zoo user. It gets the authenticated user's org.
//
// If the user is not a member of an org, this endpoint will return a 404.
func ExampleOrgService_GetUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Org.GetUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetInformationForUser: Get payment info about your user.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by any Zoo user. It gets the payment information for the authenticated user.
func ExamplePaymentService_GetInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetInformationForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateInformationForUser: Create payment info for your user.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by any Zoo user. It creates the payment information for the authenticated user.
//
// Parameters
//
//   - `body`: The billing information for payments.
func ExamplePaymentService_CreateInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateInformationForUser(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: "some-string", Country: "some-string", State: "some-string", Street1: "some-string", Street2: "some-string", Zip: "some-string"}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateInformationForUser: Update payment info for your user.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by any Zoo user. It updates the payment information for the authenticated user.
//
// Parameters
//
//   - `body`: The billing information for payments.
func ExamplePaymentService_UpdateInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateInformationForUser(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: "some-string", Country: "some-string", State: "some-string", Street1: "some-string", Street2: "some-string", Zip: "some-string"}, Name: "some-string", Phone: "+1-555-555-555"})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteInformationForUser: Delete payment info for your user.
// This includes billing address, phone, and name.
//
// This endpoint requires authentication by any Zoo user. It deletes the payment information for the authenticated user.
func ExamplePaymentService_DeleteInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.DeleteInformationForUser(); err != nil {
		panic(err)
	}

}

// GetBalanceForUser: Get balance for your user.
// This endpoint requires authentication by any Zoo user. It gets the balance information for the authenticated user.
func ExamplePaymentService_GetBalanceForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetBalanceForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateIntentForUser: Create a payment intent for your user.
// This endpoint requires authentication by any Zoo user. It creates a new payment intent for the authenticated user.
func ExamplePaymentService_CreateIntentForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateIntentForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListInvoicesForUser: List invoices for your user.
// This endpoint requires authentication by any Zoo user. It lists invoices for the authenticated user.
func ExamplePaymentService_ListInvoicesForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.ListInvoicesForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListMethodsForUser: List payment methods for your user.
// This endpoint requires authentication by any Zoo user. It lists payment methods for the authenticated user.
func ExamplePaymentService_ListMethodsForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.ListMethodsForUser()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// DeleteMethodForUser: Delete a payment method for your user.
// This endpoint requires authentication by any Zoo user. It deletes the specified payment method for the authenticated user.
//
// Parameters
//
//   - `id`
func ExamplePaymentService_DeleteMethodForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.DeleteMethodForUser("some-string"); err != nil {
		panic(err)
	}

}

// GetUserSubscription: Get the subscription for a user.
// This endpoint requires authentication by any Zoo user. It gets the subscription for the user.
func ExamplePaymentService_GetUserSubscription() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetUserSubscription()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateUserSubscription: Create the subscription for a user.
// This endpoint requires authentication by any Zoo user. It creates the subscription for the user.
//
// Parameters
//
//   - `body`: A struct of Zoo product subscriptions a user can request.
func ExamplePaymentService_CreateUserSubscription() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.CreateUserSubscription(kittycad.ZooProductSubscriptionsUserRequest{ModelingApp: "", PayAnnually: true})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateUserSubscription: Update the user's subscription.
// This endpoint requires authentication by any Zoo user. It updates the subscription for the user.
//
// Parameters
//
//   - `body`: A struct of Zoo product subscriptions a user can request.
func ExamplePaymentService_UpdateUserSubscription() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateUserSubscription(kittycad.ZooProductSubscriptionsUserRequest{ModelingApp: "", PayAnnually: true})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ValidateCustomerTaxInformationForUser: Validate a user's information is correct and valid for automatic tax.
// This endpoint requires authentication by any Zoo user. It will return an error if the user's information is not valid for automatic tax. Otherwise, it will return an empty successful response.
func ExamplePaymentService_ValidateCustomerTaxInformationForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Payment.ValidateCustomerTaxInformationForUser(); err != nil {
		panic(err)
	}

}

// GetPrivacySettings: Get the privacy settings for a user.
// This endpoint requires authentication by any Zoo user. It gets the privacy settings for the user.
func ExampleUserService_GetPrivacySettings() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetPrivacySettings()
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdatePrivacySettings: Update the user's privacy settings.
// This endpoint requires authentication by any Zoo user. It updates the privacy settings for the user.
//
// Parameters
//
//   - `body`: Privacy settings for an org or user.
func ExampleUserService_UpdatePrivacySettings() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.UpdatePrivacySettings(kittycad.PrivacySettings{CanTrainOnData: true})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetSessionFor: Get a session for your user.
// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.
//
// Parameters
//
//   - `token`: An auth token. A uuid with a prefix of ses-
func ExampleUserService_GetSessionFor() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetSessionFor("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetShortlinks: Get the shortlinks for a user.
// This endpoint requires authentication by any Zoo user. It gets the shortlinks for the user.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleUserService_GetShortlinks() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetShortlinks(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateShortlink: Create a shortlink for a user.
// This endpoint requires authentication by any Zoo user. It creates a shortlink for the user.
//
// Parameters
//
//   - `body`: Request to create a shortlink.
func ExampleUserService_CreateShortlink() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.CreateShortlink(kittycad.CreateShortlinkRequest{Password: "some-string", RestrictToOrg: true, Url: kittycad.URL{&url.URL{Scheme: "https", Host: "example.com"}}})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// RedirectUserShortlink: Redirect the user to the URL for the shortlink.
// This endpoint might require authentication by a Zoo user. It gets the shortlink for the user and redirects them to the URL. If the shortlink is owned by an org, the user must be a member of the org.
//
// Parameters
//
//   - `key`
func ExampleHiddenService_RedirectUserShortlink() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Hidden.RedirectUserShortlink("some-string"); err != nil {
		panic(err)
	}

}

// UpdateShortlink: Update a shortlink for a user.
// This endpoint requires authentication by any Zoo user. It updates a shortlink for the user.
//
// This endpoint really only allows you to change the `restrict_to_org` setting of a shortlink. Thus it is only useful for folks who are part of an org. If you are not part of an org, you will not be able to change the `restrict_to_org` status.
//
// Parameters
//
//   - `key`
//   - `body`: Request to update a shortlink.
func ExampleUserService_UpdateShortlink() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.User.UpdateShortlink("some-string", kittycad.UpdateShortlinkRequest{Password: "some-string", RestrictToOrg: true}); err != nil {
		panic(err)
	}

}

// DeleteShortlink: Delete a shortlink for a user.
// This endpoint requires authentication by any Zoo user. It deletes a shortlink for the user.
//
// Parameters
//
//   - `key`
func ExampleUserService_DeleteShortlink() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.User.DeleteShortlink("some-string"); err != nil {
		panic(err)
	}

}

// ListTextToCadModelsForUser: List text-to-CAD models you've generated.
// This will always return the STEP file contents as well as the format the user originally requested.
//
// This endpoint requires authentication by any Zoo user. It returns the text-to-CAD models for the authenticated user.
//
// The text-to-CAD models are returned in order of creation, with the most recently created text-to-CAD models first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
//
//   - `noModels`
func ExampleMlService_ListTextToCadModelsForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.ListTextToCadModelsForUser(123, "some-string", "", true)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetTextToCadModelForUser: Get a text-to-CAD response.
// This endpoint requires authentication by any Zoo user. The user must be the owner of the text-to-CAD model.
//
// Parameters
//
//   - `id`
func ExampleMlService_GetTextToCadModelForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Ml.GetTextToCadModelForUser(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTextToCadModelFeedback: Give feedback to a specific text-to-CAD response.
// This endpoint requires authentication by any Zoo user. The user must be the owner of the text-to-CAD model, in order to give feedback.
//
// Parameters
//
//   - `id`
//   - `feedback`: Human feedback on an ML response.
func ExampleMlService_CreateTextToCadModelFeedback() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	if err := client.Ml.CreateTextToCadModelFeedback(kittycad.ParseUUID("6ba7b810-9dad-11d1-80b4-00c04fd430c8"), ""); err != nil {
		panic(err)
	}

}

// List: List users.
// This endpoint requires authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleUserService_List() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.List(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListExtended: List users with extended information.
// This endpoint requires authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.
//
// Parameters
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleUserService_ListExtended() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.ListExtended(123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetExtended: Get extended information about a user.
// To get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.
//
// Alternatively, to get information about the authenticated user, use `/user/extended` endpoint.
//
// To get information about any Zoo user, you must be a Zoo employee.
//
// Parameters
//
//   - `id`
func ExampleUserService_GetExtended() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.GetExtended("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// Get: Get a user.
// To get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.
//
// Alternatively, to get information about the authenticated user, use `/user` endpoint.
//
// To get information about any Zoo user, you must be a Zoo employee.
//
// Parameters
//
//   - `id`
func ExampleUserService_Get() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.User.Get("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// ListForUser: List API calls for a user.
// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user if "me" is passed as the user id.
//
// Alternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.
//
// If the authenticated user is a Zoo employee, then the API calls are returned for the user specified by the user id.
//
// The API calls are returned in order of creation, with the most recently created API calls first.
//
// Parameters
//
//   - `id`
//
//   - `limit`
//
//   - `pageToken`
//
//   - `sortBy`: Supported set of sort modes for scanning by created_at only.
//
//     Currently, we only support scanning in ascending order.
func ExampleAPICallService_ListForUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.APICall.ListForUser("some-string", 123, "some-string", "")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// GetBalanceForAnyUser: Get balance for an user.
// This endpoint requires authentication by a Zoo employee. It gets the balance information for the specified user.
//
// Parameters
//
//   - `id`
func ExamplePaymentService_GetBalanceForAnyUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.GetBalanceForAnyUser("some-string")
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// UpdateBalanceForAnyUser: Update balance for an user.
// This endpoint requires authentication by a Zoo employee. It updates the balance information for the specified user.
//
// Parameters
//
//   - `id`
//   - `body`: The data for updating a balance.
func ExamplePaymentService_UpdateBalanceForAnyUser() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	result, err := client.Payment.UpdateBalanceForAnyUser("some-string", kittycad.UpdatePaymentBalance{MonthlyCreditsRemaining: 123.45, PrePayCashRemaining: 123.45, PrePayCreditsRemaining: 123.45})
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}

// CreateTerm: Create a terminal.
// Attach to a docker container to create an interactive terminal.
func ExampleExecutorService_CreateTerm() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	// Create the websocket connection.
	ws, err := client.Executor.CreateTerm()
	if err != nil {
		panic(err)
	}

	defer ws.Close()

	done := make(chan struct{})

	go func() {
		defer close(done)
		for {
			_, message, err := ws.ReadMessage()
			if err != nil {
				log.Println("read:", err)
				return
			}
			log.Printf("recv: %s", message)
		}
	}()

	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)

	for {
		select {
		case <-done:
			return
		case t := <-ticker.C:
			err := ws.WriteMessage(websocket.TextMessage, []byte(t.String()))
			if err != nil {
				log.Println("write:", err)
				return
			}
		case <-interrupt:
			log.Println("interrupt")

			// Cleanly close the connection by sending a close message and then
			// waiting (with timeout) for the server to close the connection.
			err := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
			if err != nil {
				log.Println("write close:", err)
				return
			}
			select {
			case <-done:
			case <-time.After(time.Second):
			}
			return
		}
	}

}

// CommandsWs: Open a websocket which accepts modeling commands.
// Pass those commands to the engine via websocket, and pass responses back to the client. Basically, this is a websocket proxy between the frontend/client and the engine.
//
// Parameters
//
//   - `fps`
//   - `pool`
//   - `postEffect`: Post effect type
//   - `replay`
//   - `showGrid`
//   - `unlockedFramerate`
//   - `videoResHeight`
//   - `videoResWidth`
//   - `webrtc`
//   - `body`: The websocket messages the server receives.
func ExampleModelingService_CommandsWs() {
	client, err := kittycad.NewClientFromEnv("your apps user agent")
	if err != nil {
		panic(err)
	}

	// Create the websocket connection.
	ws, err := client.Modeling.CommandsWs(123, "some-string", kittycad.PostEffectTypePhosphor, "some-string", true, true, 123, 123, true, "")
	if err != nil {
		panic(err)
	}

	defer ws.Close()

	done := make(chan struct{})

	go func() {
		defer close(done)
		for {
			_, message, err := ws.ReadMessage()
			if err != nil {
				log.Println("read:", err)
				return
			}
			log.Printf("recv: %s", message)
		}
	}()

	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt)

	for {
		select {
		case <-done:
			return
		case t := <-ticker.C:
			err := ws.WriteMessage(websocket.TextMessage, []byte(t.String()))
			if err != nil {
				log.Println("write:", err)
				return
			}
		case <-interrupt:
			log.Println("interrupt")

			// Cleanly close the connection by sending a close message and then
			// waiting (with timeout) for the server to close the connection.
			err := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))
			if err != nil {
				log.Println("write close:", err)
				return
			}
			select {
			case <-done:
			case <-time.After(time.Second):
			}
			return
		}
	}

}
