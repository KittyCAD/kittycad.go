// Code generated by `generate`. DO NOT EDIT.

package kittycad

// APICallStatus is the status of an async API call.
type APICallStatus string

const (
	// APICallStatusQueued represents the APICallStatus `"Queued"`.
	APICallStatusQueued APICallStatus = "Queued"
	// APICallStatusUploaded represents the APICallStatus `"Uploaded"`.
	APICallStatusUploaded APICallStatus = "Uploaded"
	// APICallStatusInProgress represents the APICallStatus `"In Progress"`.
	APICallStatusInProgress APICallStatus = "In Progress"
	// APICallStatusCompleted represents the APICallStatus `"Completed"`.
	APICallStatusCompleted APICallStatus = "Completed"
	// APICallStatusFailed represents the APICallStatus `"Failed"`.
	APICallStatusFailed APICallStatus = "Failed"
)

// Address is an address.
type Address struct {
	// City is the city component.
	City string `json:"city,omitempty" yaml:"city,omitempty"`
	// Country is the country component.
	Country string `json:"country,omitempty" yaml:"country,omitempty"`
	// CreatedAt is the time and date the address was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// ID is the unique identifier of the address.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// State is the state component.
	State string `json:"state,omitempty" yaml:"state,omitempty"`
	// Street1 is the first street component.
	Street1 string `json:"street1,omitempty" yaml:"street1,omitempty"`
	// Street2 is the second street component.
	Street2 string `json:"street2,omitempty" yaml:"street2,omitempty"`
	// UpdatedAt is the time and date the address was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID that this address belongs to.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	// Zip is the zip component.
	Zip string `json:"zip,omitempty" yaml:"zip,omitempty"`
}

// APICallQueryGroup is a response for a query on the API call table that is grouped by something.
type APICallQueryGroup struct {
	Count int    `json:"count,omitempty" yaml:"count,omitempty"`
	Query string `json:"query,omitempty" yaml:"query,omitempty"`
}

// APICallQueryGroupBy is the field of an API call to group by.
type APICallQueryGroupBy string

const (
	// APICallQueryGroupByEmail represents the APICallQueryGroupBy `"email"`.
	APICallQueryGroupByEmail APICallQueryGroupBy = "email"
	// APICallQueryGroupByMethod represents the APICallQueryGroupBy `"method"`.
	APICallQueryGroupByMethod APICallQueryGroupBy = "method"
	// APICallQueryGroupByEndpoint represents the APICallQueryGroupBy `"endpoint"`.
	APICallQueryGroupByEndpoint APICallQueryGroupBy = "endpoint"
	// APICallQueryGroupByUserId represents the APICallQueryGroupBy `"user_id"`.
	APICallQueryGroupByUserId APICallQueryGroupBy = "user_id"
	// APICallQueryGroupByOrigin represents the APICallQueryGroupBy `"origin"`.
	APICallQueryGroupByOrigin APICallQueryGroupBy = "origin"
	// APICallQueryGroupByIpAddress represents the APICallQueryGroupBy `"ip_address"`.
	APICallQueryGroupByIpAddress APICallQueryGroupBy = "ip_address"
)

// APICallWithPrice is an API call with the price.
//
// This is a join of the `APICall` and `APICallPrice` tables.
type APICallWithPrice struct {
	// CompletedAt is the date and time the API call completed billing.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the date and time the API call was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Duration is the duration of the API call.
	Duration int `json:"duration,omitempty" yaml:"duration,omitempty"`
	// Email is the user's email address.
	Email string `json:"email,omitempty" yaml:"email,omitempty"`
	// Endpoint is the endpoint requested by the API call.
	Endpoint string `json:"endpoint,omitempty" yaml:"endpoint,omitempty"`
	// ID is the unique identifier for the API call.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// IPAddress is the ip address of the origin.
	IPAddress string `json:"ip_address,omitempty" yaml:"ip_address,omitempty"`
	// Method is the HTTP method requsted by the API call.
	Method Method `json:"method,omitempty" yaml:"method,omitempty"`
	// Minutes is the number of minutes the API call was billed for.
	Minutes int `json:"minutes,omitempty" yaml:"minutes,omitempty"`
	// Origin is the origin of the API call.
	Origin string `json:"origin,omitempty" yaml:"origin,omitempty"`
	// Price is the price of the API call.
	Price float64 `json:"price,omitempty" yaml:"price,omitempty"`
	// RequestBody is the request body sent by the API call.
	RequestBody string `json:"request_body,omitempty" yaml:"request_body,omitempty"`
	// RequestQueryParams is the request query params sent by the API call.
	RequestQueryParams string `json:"request_query_params,omitempty" yaml:"request_query_params,omitempty"`
	// ResponseBody is the response body returned by the API call. We do not store this information if it is above a certain size.
	ResponseBody string `json:"response_body,omitempty" yaml:"response_body,omitempty"`
	// StartedAt is the date and time the API call started billing.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// StatusCode is the status code returned by the API call.
	StatusCode StatusCode `json:"status_code,omitempty" yaml:"status_code,omitempty"`
	// StripeInvoiceItemID is the Stripe invoice item ID of the API call if it is billable.
	StripeInvoiceItemID string `json:"stripe_invoice_item_id,omitempty" yaml:"stripe_invoice_item_id,omitempty"`
	// Token is the API token that made the API call.
	Token Uuid `json:"token,omitempty" yaml:"token,omitempty"`
	// UpdatedAt is the date and time the API call was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserAgent is the user agent of the request.
	UserAgent string `json:"user_agent,omitempty" yaml:"user_agent,omitempty"`
	// UserID is the ID of the user that made the API call.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// APICallWithPriceResultsPage is a single page of results
type APICallWithPriceResultsPage struct {
	// Items is list of items on this page of results
	Items []APICallWithPrice `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// APIToken is an API token.
//
// These are used to authenticate users with Bearer authentication.
type APIToken struct {
	// CreatedAt is the date and time the API token was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// ID is the unique identifier for the API token.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// IsValid is if the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token.
	IsValid bool `json:"is_valid,omitempty" yaml:"is_valid,omitempty"`
	// Token is the API token itself.
	Token Uuid `json:"token,omitempty" yaml:"token,omitempty"`
	// UpdatedAt is the date and time the API token was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the ID of the user that owns the API token.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// APITokenResultsPage is a single page of results
type APITokenResultsPage struct {
	// Items is list of items on this page of results
	Items []APIToken `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// AsyncAPICallType is the type of async API call.
type AsyncAPICallType string

const (
	// AsyncAPICallTypeFileConversion represents the AsyncAPICallType `"FileConversion"`.
	AsyncAPICallTypeFileConversion AsyncAPICallType = "FileConversion"
	// AsyncAPICallTypeFileVolume represents the AsyncAPICallType `"FileVolume"`.
	AsyncAPICallTypeFileVolume AsyncAPICallType = "FileVolume"
	// AsyncAPICallTypeFileMass represents the AsyncAPICallType `"FileMass"`.
	AsyncAPICallTypeFileMass AsyncAPICallType = "FileMass"
	// AsyncAPICallTypeFileDensity represents the AsyncAPICallType `"FileDensity"`.
	AsyncAPICallTypeFileDensity AsyncAPICallType = "FileDensity"
)

// AsyncAPICall is an async API call.
type AsyncAPICall struct {
	// CompletedAt is the time and date the async API call was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the async API call was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the async API call.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// Input is the JSON input for the API call. These are determined by the endpoint that is run.
	Input interface{} `json:"input,omitempty" yaml:"input,omitempty"`
	// Output is the JSON output for the API call. These are determined by the endpoint that is run.
	Output interface{} `json:"output,omitempty" yaml:"output,omitempty"`
	// StartedAt is the time and date the async API call was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the async API call.
	Status APICallStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Type is the type of async API call.
	Type AsyncAPICallType `json:"type,omitempty" yaml:"type,omitempty"`
	// UpdatedAt is the time and date the async API call was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the async API call.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	// Worker is the worker node that is performing or performed the async API call.
	Worker string `json:"worker,omitempty" yaml:"worker,omitempty"`
}

// AsyncAPICallOutputFileConversion is a file conversion.
type AsyncAPICallOutputFileConversion struct {
	// CompletedAt is the time and date the file conversion was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the file conversion was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the file conversion.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// Output is the converted file, if completed, base64 encoded.
	Output string `json:"output,omitempty" yaml:"output,omitempty"`
	// OutputFormat is the output format of the file conversion.
	OutputFormat FileOutputFormat `json:"output_format,omitempty" yaml:"output_format,omitempty"`
	// SrcFormat is the source format of the file conversion.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the file conversion was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the file conversion.
	Status APICallStatus          `json:"status,omitempty" yaml:"status,omitempty"`
	Type   AsyncAPICallOutputType `json:"type,omitempty" yaml:"type,omitempty"`
	// UpdatedAt is the time and date the file conversion was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the file conversion.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// AsyncAPICallOutputType is the type definition for a AsyncAPICallOutputType.
type AsyncAPICallOutputType string

const (
	// AsyncAPICallOutputTypeFileConversion represents the AsyncAPICallOutputType `"FileConversion"`.
	AsyncAPICallOutputTypeFileConversion AsyncAPICallOutputType = "FileConversion"
)

// AsyncAPICallOutputFileMass is a file mass.
type AsyncAPICallOutputFileMass struct {
	// CompletedAt is the time and date the mass was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the mass was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the mass request.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// Mass is the resulting mass.
	Mass float64 `json:"mass,omitempty" yaml:"mass,omitempty"`
	// MaterialDensity is the material density as denoted by the user.
	MaterialDensity float64 `json:"material_density,omitempty" yaml:"material_density,omitempty"`
	// SrcFormat is the source format of the file.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the mass was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the mass.
	Status APICallStatus          `json:"status,omitempty" yaml:"status,omitempty"`
	Type   AsyncAPICallOutputType `json:"type,omitempty" yaml:"type,omitempty"`
	// UpdatedAt is the time and date the mass was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the mass.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

const (
	// AsyncAPICallOutputTypeFileMass represents the AsyncAPICallOutputType `"FileMass"`.
	AsyncAPICallOutputTypeFileMass AsyncAPICallOutputType = "FileMass"
)

// AsyncAPICallOutputFileVolume is a file volume.
type AsyncAPICallOutputFileVolume struct {
	// CompletedAt is the time and date the volume was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the volume was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the volume request.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// SrcFormat is the source format of the file.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the volume was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the volume.
	Status APICallStatus          `json:"status,omitempty" yaml:"status,omitempty"`
	Type   AsyncAPICallOutputType `json:"type,omitempty" yaml:"type,omitempty"`
	// UpdatedAt is the time and date the volume was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the volume.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	// Volume is the resulting volume.
	Volume float64 `json:"volume,omitempty" yaml:"volume,omitempty"`
}

const (
	// AsyncAPICallOutputTypeFileVolume represents the AsyncAPICallOutputType `"FileVolume"`.
	AsyncAPICallOutputTypeFileVolume AsyncAPICallOutputType = "FileVolume"
)

// AsyncAPICallOutputFileDensity is a file density.
type AsyncAPICallOutputFileDensity struct {
	// CompletedAt is the time and date the density was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the density was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Density is the resulting density.
	Density float64 `json:"density,omitempty" yaml:"density,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the density request.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// MaterialMass is the material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass,omitempty" yaml:"material_mass,omitempty"`
	// SrcFormat is the source format of the file.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the density was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the density.
	Status APICallStatus          `json:"status,omitempty" yaml:"status,omitempty"`
	Type   AsyncAPICallOutputType `json:"type,omitempty" yaml:"type,omitempty"`
	// UpdatedAt is the time and date the density was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the density.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

const (
	// AsyncAPICallOutputTypeFileDensity represents the AsyncAPICallOutputType `"FileDensity"`.
	AsyncAPICallOutputTypeFileDensity AsyncAPICallOutputType = "FileDensity"
)

// AsyncAPICallOutput is the output from the async API call.
type AsyncAPICallOutput struct {
	CompletedAt     *JSONTime        `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	CreatedAt       *JSONTime        `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	Error           string           `json:"error,omitempty" yaml:"error,omitempty"`
	ID              Uuid             `json:"id,omitempty" yaml:"id,omitempty"`
	Output          string           `json:"output,omitempty" yaml:"output,omitempty"`
	OutputFormat    FileOutputFormat `json:"output_format,omitempty" yaml:"output_format,omitempty"`
	SrcFormat       FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	StartedAt       *JSONTime        `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	Status          APICallStatus    `json:"status,omitempty" yaml:"status,omitempty"`
	Type            string           `json:"type,omitempty" yaml:"type,omitempty"`
	UpdatedAt       *JSONTime        `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	UserID          string           `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	Mass            float64          `json:"mass,omitempty" yaml:"mass,omitempty"`
	MaterialDensity float64          `json:"material_density,omitempty" yaml:"material_density,omitempty"`
	Volume          float64          `json:"volume,omitempty" yaml:"volume,omitempty"`
	Density         float64          `json:"density,omitempty" yaml:"density,omitempty"`
	MaterialMass    float64          `json:"material_mass,omitempty" yaml:"material_mass,omitempty"`
}

// AsyncAPICallResultsPage is a single page of results
type AsyncAPICallResultsPage struct {
	// Items is list of items on this page of results
	Items []AsyncAPICall `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// BillingInfo is the billing information for payments.
type BillingInfo struct {
	// Address is the address of the customer.
	Address Address `json:"address,omitempty" yaml:"address,omitempty"`
	// Name is the name of the customer.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Phone is the phone for the customer.
	Phone PhoneNumber `json:"phone,omitempty" yaml:"phone,omitempty"`
}

// CacheMetadata is metadata about our cache.
//
// This is mostly used for internal purposes and debugging.
type CacheMetadata struct {
	// Ok is if the cache returned an ok response from ping.
	Ok bool `json:"ok,omitempty" yaml:"ok,omitempty"`
}

// CardDetails is the card details of a payment method.
type CardDetails struct {
	// Brand is card brand.
	//
	// Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
	Brand string `json:"brand,omitempty" yaml:"brand,omitempty"`
	// Checks is checks on Card address and CVC if provided.
	Checks PaymentMethodCardChecks `json:"checks,omitempty" yaml:"checks,omitempty"`
	// Country is two-letter ISO code representing the country of the card.
	Country string `json:"country,omitempty" yaml:"country,omitempty"`
	// ExpMonth is two-digit number representing the card's expiration month.
	ExpMonth int `json:"exp_month,omitempty" yaml:"exp_month,omitempty"`
	// ExpYear is four-digit number representing the card's expiration year.
	ExpYear int `json:"exp_year,omitempty" yaml:"exp_year,omitempty"`
	// Fingerprint is uniquely identifies this particular card number.
	Fingerprint string `json:"fingerprint,omitempty" yaml:"fingerprint,omitempty"`
	// Funding is card funding type.
	//
	// Can be `credit`, `debit`, `prepaid`, or `unknown`.
	Funding string `json:"funding,omitempty" yaml:"funding,omitempty"`
	// Last4 is the last four digits of the card.
	Last4 string `json:"last4,omitempty" yaml:"last4,omitempty"`
}

// Cluster is cluster information.
type Cluster struct {
	// Addr is the IP address of the cluster.
	Addr string `json:"addr,omitempty" yaml:"addr,omitempty"`
	// AuthTimeout is the auth timeout of the cluster.
	AuthTimeout int `json:"auth_timeout,omitempty" yaml:"auth_timeout,omitempty"`
	// ClusterPort is the port of the cluster.
	ClusterPort int `json:"cluster_port,omitempty" yaml:"cluster_port,omitempty"`
	// Name is the name of the cluster.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// TlsTimeout is the TLS timeout for the cluster.
	TlsTimeout int `json:"tls_timeout,omitempty" yaml:"tls_timeout,omitempty"`
	// Urls is the urls of the cluster.
	Urls []string `json:"urls,omitempty" yaml:"urls,omitempty"`
}

// CodeLanguage is the language code is written in.
type CodeLanguage string

const (
	// CodeLanguageGo represents the CodeLanguage `"go"`.
	CodeLanguageGo CodeLanguage = "go"
	// CodeLanguageRust represents the CodeLanguage `"rust"`.
	CodeLanguageRust CodeLanguage = "rust"
	// CodeLanguagePython represents the CodeLanguage `"python"`.
	CodeLanguagePython CodeLanguage = "python"
	// CodeLanguageNode represents the CodeLanguage `"node"`.
	CodeLanguageNode CodeLanguage = "node"
)

// CodeOutput is output of the code being executed.
type CodeOutput struct {
	// OutputFiles is the contents of the files requested if they were passed.
	OutputFiles []OutputFile `json:"output_files,omitempty" yaml:"output_files,omitempty"`
	// Stderr is the stderr of the code.
	Stderr string `json:"stderr,omitempty" yaml:"stderr,omitempty"`
	// Stdout is the stdout of the code.
	Stdout string `json:"stdout,omitempty" yaml:"stdout,omitempty"`
}

// Connection is metadata about a pub-sub connection.
//
// This is mostly used for internal purposes and debugging.
type Connection struct {
	// AuthTimeout is the auth timeout of the server.
	AuthTimeout int `json:"auth_timeout,omitempty" yaml:"auth_timeout,omitempty"`
	// Cluster is information about the cluster.
	Cluster Cluster `json:"cluster,omitempty" yaml:"cluster,omitempty"`
	// ConfigLoadTime is the time the configuration was loaded.
	ConfigLoadTime *JSONTime `json:"config_load_time,omitempty" yaml:"config_load_time,omitempty"`
	// Connections is the number of connections to the server.
	Connections int `json:"connections,omitempty" yaml:"connections,omitempty"`
	// Cores is the CPU core usage of the server.
	Cores int     `json:"cores,omitempty" yaml:"cores,omitempty"`
	Cpu   float64 `json:"cpu,omitempty" yaml:"cpu,omitempty"`
	// Gateway is information about the gateway.
	Gateway Gateway `json:"gateway,omitempty" yaml:"gateway,omitempty"`
	// GitCommit is the git commit.
	GitCommit string `json:"git_commit,omitempty" yaml:"git_commit,omitempty"`
	// Go is the go version.
	Go string `json:"go,omitempty" yaml:"go,omitempty"`
	// Gomaxprocs is `GOMAXPROCS` of the server.
	Gomaxprocs int `json:"gomaxprocs,omitempty" yaml:"gomaxprocs,omitempty"`
	// Host is the host of the server.
	Host string `json:"host,omitempty" yaml:"host,omitempty"`
	// HttpBasePath is the http base path of the server.
	HttpBasePath string `json:"http_base_path,omitempty" yaml:"http_base_path,omitempty"`
	// HttpHost is the http host of the server.
	HttpHost string `json:"http_host,omitempty" yaml:"http_host,omitempty"`
	// HttpPort is the http port of the server.
	HttpPort     int `json:"http_port,omitempty" yaml:"http_port,omitempty"`
	HttpReqStats int `json:"http_req_stats,omitempty" yaml:"http_req_stats,omitempty"`
	// HttpsPort is the https port of the server.
	HttpsPort int `json:"https_port,omitempty" yaml:"https_port,omitempty"`
	// ID is the ID as known by the most recently connected server.
	ID int `json:"id,omitempty" yaml:"id,omitempty"`
	// InBytes is the count of inbound bytes for the server.
	InBytes int `json:"in_bytes,omitempty" yaml:"in_bytes,omitempty"`
	// InMsgs is the number of inbound messages for the server.
	InMsgs int `json:"in_msgs,omitempty" yaml:"in_msgs,omitempty"`
	// Ip is the client IP as known by the most recently connected server.
	Ip string `json:"ip,omitempty" yaml:"ip,omitempty"`
	// Jetstream is jetstream information.
	Jetstream Jetstream `json:"jetstream,omitempty" yaml:"jetstream,omitempty"`
	// Leaf is information about leaf nodes.
	Leaf LeafNode `json:"leaf,omitempty" yaml:"leaf,omitempty"`
	// Leafnodes is the number of leaf nodes for the server.
	Leafnodes int `json:"leafnodes,omitempty" yaml:"leafnodes,omitempty"`
	// MaxConnections is the max connections of the server.
	MaxConnections int `json:"max_connections,omitempty" yaml:"max_connections,omitempty"`
	// MaxControlLine is the max control line of the server.
	MaxControlLine int `json:"max_control_line,omitempty" yaml:"max_control_line,omitempty"`
	// MaxPayload is the max payload of the server.
	MaxPayload int `json:"max_payload,omitempty" yaml:"max_payload,omitempty"`
	// MaxPending is the max pending of the server.
	MaxPending int `json:"max_pending,omitempty" yaml:"max_pending,omitempty"`
	// Mem is the memory usage of the server.
	Mem int `json:"mem,omitempty" yaml:"mem,omitempty"`
	// Now is the time now.
	Now *JSONTime `json:"now,omitempty" yaml:"now,omitempty"`
	// OutBytes is the count of outbound bytes for the server.
	OutBytes int `json:"out_bytes,omitempty" yaml:"out_bytes,omitempty"`
	// OutMsgs is the number of outbound messages for the server.
	OutMsgs int `json:"out_msgs,omitempty" yaml:"out_msgs,omitempty"`
	// PingInterval is the ping interval of the server.
	PingInterval int `json:"ping_interval,omitempty" yaml:"ping_interval,omitempty"`
	// PingMax is the ping max of the server.
	PingMax int `json:"ping_max,omitempty" yaml:"ping_max,omitempty"`
	// Port is the port of the server.
	Port int `json:"port,omitempty" yaml:"port,omitempty"`
	// Proto is the protocol version.
	Proto int `json:"proto,omitempty" yaml:"proto,omitempty"`
	// Remotes is the number of remotes for the server.
	Remotes int `json:"remotes,omitempty" yaml:"remotes,omitempty"`
	// Routes is the number of routes for the server.
	Routes int `json:"routes,omitempty" yaml:"routes,omitempty"`
	// Rtt is the round trip time between this client and the server.
	Rtt Duration `json:"rtt,omitempty" yaml:"rtt,omitempty"`
	// ServerID is the server ID.
	ServerID string `json:"server_id,omitempty" yaml:"server_id,omitempty"`
	// ServerName is the server name.
	ServerName string `json:"server_name,omitempty" yaml:"server_name,omitempty"`
	// SlowConsumers is the number of slow consumers for the server.
	SlowConsumers int `json:"slow_consumers,omitempty" yaml:"slow_consumers,omitempty"`
	// Start is when the server was started.
	Start *JSONTime `json:"start,omitempty" yaml:"start,omitempty"`
	// Subscriptions is the number of subscriptions for the server.
	Subscriptions int `json:"subscriptions,omitempty" yaml:"subscriptions,omitempty"`
	// SystemAccount is the system account.
	SystemAccount string `json:"system_account,omitempty" yaml:"system_account,omitempty"`
	// TlsTimeout is the TLS timeout of the server.
	TlsTimeout int `json:"tls_timeout,omitempty" yaml:"tls_timeout,omitempty"`
	// TotalConnections is the total number of connections to the server.
	TotalConnections int `json:"total_connections,omitempty" yaml:"total_connections,omitempty"`
	// Uptime is the uptime of the server.
	Uptime string `json:"uptime,omitempty" yaml:"uptime,omitempty"`
	// Version is the version of the service.
	Version string `json:"version,omitempty" yaml:"version,omitempty"`
	// WriteDeadline is the write deadline of the server.
	WriteDeadline int `json:"write_deadline,omitempty" yaml:"write_deadline,omitempty"`
}

// CreatedAtSortMode is supported set of sort modes for scanning by created_at only.
//
// Currently, we only support scanning in ascending order.
type CreatedAtSortMode string

const (
	// CreatedAtSortModeCreatedAtAscending represents the CreatedAtSortMode `"created-at-ascending"`.
	CreatedAtSortModeCreatedAtAscending CreatedAtSortMode = "created-at-ascending"
	// CreatedAtSortModeCreatedAtDescending represents the CreatedAtSortMode `"created-at-descending"`.
	CreatedAtSortModeCreatedAtDescending CreatedAtSortMode = "created-at-descending"
)

// Currency is currency is the list of supported currencies.
//
// For more details see <https://support.stripe.com/questions/which-currencies-does-stripe-support>.
type Currency string

const (
	// CurrencyAed represents the Currency `"aed"`.
	CurrencyAed Currency = "aed"
	// CurrencyAfn represents the Currency `"afn"`.
	CurrencyAfn Currency = "afn"
	// CurrencyAll represents the Currency `"all"`.
	CurrencyAll Currency = "all"
	// CurrencyAmd represents the Currency `"amd"`.
	CurrencyAmd Currency = "amd"
	// CurrencyAng represents the Currency `"ang"`.
	CurrencyAng Currency = "ang"
	// CurrencyAoa represents the Currency `"aoa"`.
	CurrencyAoa Currency = "aoa"
	// CurrencyArs represents the Currency `"ars"`.
	CurrencyArs Currency = "ars"
	// CurrencyAud represents the Currency `"aud"`.
	CurrencyAud Currency = "aud"
	// CurrencyAwg represents the Currency `"awg"`.
	CurrencyAwg Currency = "awg"
	// CurrencyAzn represents the Currency `"azn"`.
	CurrencyAzn Currency = "azn"
	// CurrencyBam represents the Currency `"bam"`.
	CurrencyBam Currency = "bam"
	// CurrencyBbd represents the Currency `"bbd"`.
	CurrencyBbd Currency = "bbd"
	// CurrencyBdt represents the Currency `"bdt"`.
	CurrencyBdt Currency = "bdt"
	// CurrencyBgn represents the Currency `"bgn"`.
	CurrencyBgn Currency = "bgn"
	// CurrencyBif represents the Currency `"bif"`.
	CurrencyBif Currency = "bif"
	// CurrencyBmd represents the Currency `"bmd"`.
	CurrencyBmd Currency = "bmd"
	// CurrencyBnd represents the Currency `"bnd"`.
	CurrencyBnd Currency = "bnd"
	// CurrencyBob represents the Currency `"bob"`.
	CurrencyBob Currency = "bob"
	// CurrencyBrl represents the Currency `"brl"`.
	CurrencyBrl Currency = "brl"
	// CurrencyBsd represents the Currency `"bsd"`.
	CurrencyBsd Currency = "bsd"
	// CurrencyBwp represents the Currency `"bwp"`.
	CurrencyBwp Currency = "bwp"
	// CurrencyBzd represents the Currency `"bzd"`.
	CurrencyBzd Currency = "bzd"
	// CurrencyCad represents the Currency `"cad"`.
	CurrencyCad Currency = "cad"
	// CurrencyCdf represents the Currency `"cdf"`.
	CurrencyCdf Currency = "cdf"
	// CurrencyChf represents the Currency `"chf"`.
	CurrencyChf Currency = "chf"
	// CurrencyClp represents the Currency `"clp"`.
	CurrencyClp Currency = "clp"
	// CurrencyCny represents the Currency `"cny"`.
	CurrencyCny Currency = "cny"
	// CurrencyCop represents the Currency `"cop"`.
	CurrencyCop Currency = "cop"
	// CurrencyCrc represents the Currency `"crc"`.
	CurrencyCrc Currency = "crc"
	// CurrencyCve represents the Currency `"cve"`.
	CurrencyCve Currency = "cve"
	// CurrencyCzk represents the Currency `"czk"`.
	CurrencyCzk Currency = "czk"
	// CurrencyDjf represents the Currency `"djf"`.
	CurrencyDjf Currency = "djf"
	// CurrencyDkk represents the Currency `"dkk"`.
	CurrencyDkk Currency = "dkk"
	// CurrencyDop represents the Currency `"dop"`.
	CurrencyDop Currency = "dop"
	// CurrencyDzd represents the Currency `"dzd"`.
	CurrencyDzd Currency = "dzd"
	// CurrencyEek represents the Currency `"eek"`.
	CurrencyEek Currency = "eek"
	// CurrencyEgp represents the Currency `"egp"`.
	CurrencyEgp Currency = "egp"
	// CurrencyEtb represents the Currency `"etb"`.
	CurrencyEtb Currency = "etb"
	// CurrencyEur represents the Currency `"eur"`.
	CurrencyEur Currency = "eur"
	// CurrencyFjd represents the Currency `"fjd"`.
	CurrencyFjd Currency = "fjd"
	// CurrencyFkp represents the Currency `"fkp"`.
	CurrencyFkp Currency = "fkp"
	// CurrencyGbp represents the Currency `"gbp"`.
	CurrencyGbp Currency = "gbp"
	// CurrencyGel represents the Currency `"gel"`.
	CurrencyGel Currency = "gel"
	// CurrencyGip represents the Currency `"gip"`.
	CurrencyGip Currency = "gip"
	// CurrencyGmd represents the Currency `"gmd"`.
	CurrencyGmd Currency = "gmd"
	// CurrencyGnf represents the Currency `"gnf"`.
	CurrencyGnf Currency = "gnf"
	// CurrencyGtq represents the Currency `"gtq"`.
	CurrencyGtq Currency = "gtq"
	// CurrencyGyd represents the Currency `"gyd"`.
	CurrencyGyd Currency = "gyd"
	// CurrencyHkd represents the Currency `"hkd"`.
	CurrencyHkd Currency = "hkd"
	// CurrencyHnl represents the Currency `"hnl"`.
	CurrencyHnl Currency = "hnl"
	// CurrencyHrk represents the Currency `"hrk"`.
	CurrencyHrk Currency = "hrk"
	// CurrencyHtg represents the Currency `"htg"`.
	CurrencyHtg Currency = "htg"
	// CurrencyHuf represents the Currency `"huf"`.
	CurrencyHuf Currency = "huf"
	// CurrencyIdr represents the Currency `"idr"`.
	CurrencyIdr Currency = "idr"
	// CurrencyIls represents the Currency `"ils"`.
	CurrencyIls Currency = "ils"
	// CurrencyInr represents the Currency `"inr"`.
	CurrencyInr Currency = "inr"
	// CurrencyIsk represents the Currency `"isk"`.
	CurrencyIsk Currency = "isk"
	// CurrencyJmd represents the Currency `"jmd"`.
	CurrencyJmd Currency = "jmd"
	// CurrencyJpy represents the Currency `"jpy"`.
	CurrencyJpy Currency = "jpy"
	// CurrencyKes represents the Currency `"kes"`.
	CurrencyKes Currency = "kes"
	// CurrencyKgs represents the Currency `"kgs"`.
	CurrencyKgs Currency = "kgs"
	// CurrencyKhr represents the Currency `"khr"`.
	CurrencyKhr Currency = "khr"
	// CurrencyKmf represents the Currency `"kmf"`.
	CurrencyKmf Currency = "kmf"
	// CurrencyKrw represents the Currency `"krw"`.
	CurrencyKrw Currency = "krw"
	// CurrencyKyd represents the Currency `"kyd"`.
	CurrencyKyd Currency = "kyd"
	// CurrencyKzt represents the Currency `"kzt"`.
	CurrencyKzt Currency = "kzt"
	// CurrencyLak represents the Currency `"lak"`.
	CurrencyLak Currency = "lak"
	// CurrencyLbp represents the Currency `"lbp"`.
	CurrencyLbp Currency = "lbp"
	// CurrencyLkr represents the Currency `"lkr"`.
	CurrencyLkr Currency = "lkr"
	// CurrencyLrd represents the Currency `"lrd"`.
	CurrencyLrd Currency = "lrd"
	// CurrencyLsl represents the Currency `"lsl"`.
	CurrencyLsl Currency = "lsl"
	// CurrencyLtl represents the Currency `"ltl"`.
	CurrencyLtl Currency = "ltl"
	// CurrencyLvl represents the Currency `"lvl"`.
	CurrencyLvl Currency = "lvl"
	// CurrencyMad represents the Currency `"mad"`.
	CurrencyMad Currency = "mad"
	// CurrencyMdl represents the Currency `"mdl"`.
	CurrencyMdl Currency = "mdl"
	// CurrencyMga represents the Currency `"mga"`.
	CurrencyMga Currency = "mga"
	// CurrencyMkd represents the Currency `"mkd"`.
	CurrencyMkd Currency = "mkd"
	// CurrencyMnt represents the Currency `"mnt"`.
	CurrencyMnt Currency = "mnt"
	// CurrencyMop represents the Currency `"mop"`.
	CurrencyMop Currency = "mop"
	// CurrencyMro represents the Currency `"mro"`.
	CurrencyMro Currency = "mro"
	// CurrencyMur represents the Currency `"mur"`.
	CurrencyMur Currency = "mur"
	// CurrencyMvr represents the Currency `"mvr"`.
	CurrencyMvr Currency = "mvr"
	// CurrencyMwk represents the Currency `"mwk"`.
	CurrencyMwk Currency = "mwk"
	// CurrencyMxn represents the Currency `"mxn"`.
	CurrencyMxn Currency = "mxn"
	// CurrencyMyr represents the Currency `"myr"`.
	CurrencyMyr Currency = "myr"
	// CurrencyMzn represents the Currency `"mzn"`.
	CurrencyMzn Currency = "mzn"
	// CurrencyNad represents the Currency `"nad"`.
	CurrencyNad Currency = "nad"
	// CurrencyNgn represents the Currency `"ngn"`.
	CurrencyNgn Currency = "ngn"
	// CurrencyNio represents the Currency `"nio"`.
	CurrencyNio Currency = "nio"
	// CurrencyNok represents the Currency `"nok"`.
	CurrencyNok Currency = "nok"
	// CurrencyNpr represents the Currency `"npr"`.
	CurrencyNpr Currency = "npr"
	// CurrencyNzd represents the Currency `"nzd"`.
	CurrencyNzd Currency = "nzd"
	// CurrencyPab represents the Currency `"pab"`.
	CurrencyPab Currency = "pab"
	// CurrencyPen represents the Currency `"pen"`.
	CurrencyPen Currency = "pen"
	// CurrencyPgk represents the Currency `"pgk"`.
	CurrencyPgk Currency = "pgk"
	// CurrencyPhp represents the Currency `"php"`.
	CurrencyPhp Currency = "php"
	// CurrencyPkr represents the Currency `"pkr"`.
	CurrencyPkr Currency = "pkr"
	// CurrencyPln represents the Currency `"pln"`.
	CurrencyPln Currency = "pln"
	// CurrencyPyg represents the Currency `"pyg"`.
	CurrencyPyg Currency = "pyg"
	// CurrencyQar represents the Currency `"qar"`.
	CurrencyQar Currency = "qar"
	// CurrencyRon represents the Currency `"ron"`.
	CurrencyRon Currency = "ron"
	// CurrencyRsd represents the Currency `"rsd"`.
	CurrencyRsd Currency = "rsd"
	// CurrencyRub represents the Currency `"rub"`.
	CurrencyRub Currency = "rub"
	// CurrencyRwf represents the Currency `"rwf"`.
	CurrencyRwf Currency = "rwf"
	// CurrencySar represents the Currency `"sar"`.
	CurrencySar Currency = "sar"
	// CurrencySbd represents the Currency `"sbd"`.
	CurrencySbd Currency = "sbd"
	// CurrencyScr represents the Currency `"scr"`.
	CurrencyScr Currency = "scr"
	// CurrencySek represents the Currency `"sek"`.
	CurrencySek Currency = "sek"
	// CurrencySgd represents the Currency `"sgd"`.
	CurrencySgd Currency = "sgd"
	// CurrencyShp represents the Currency `"shp"`.
	CurrencyShp Currency = "shp"
	// CurrencySll represents the Currency `"sll"`.
	CurrencySll Currency = "sll"
	// CurrencySos represents the Currency `"sos"`.
	CurrencySos Currency = "sos"
	// CurrencySrd represents the Currency `"srd"`.
	CurrencySrd Currency = "srd"
	// CurrencyStd represents the Currency `"std"`.
	CurrencyStd Currency = "std"
	// CurrencySvc represents the Currency `"svc"`.
	CurrencySvc Currency = "svc"
	// CurrencySzl represents the Currency `"szl"`.
	CurrencySzl Currency = "szl"
	// CurrencyThb represents the Currency `"thb"`.
	CurrencyThb Currency = "thb"
	// CurrencyTjs represents the Currency `"tjs"`.
	CurrencyTjs Currency = "tjs"
	// CurrencyTop represents the Currency `"top"`.
	CurrencyTop Currency = "top"
	// CurrencyTry represents the Currency `"try"`.
	CurrencyTry Currency = "try"
	// CurrencyTtd represents the Currency `"ttd"`.
	CurrencyTtd Currency = "ttd"
	// CurrencyTwd represents the Currency `"twd"`.
	CurrencyTwd Currency = "twd"
	// CurrencyTzs represents the Currency `"tzs"`.
	CurrencyTzs Currency = "tzs"
	// CurrencyUah represents the Currency `"uah"`.
	CurrencyUah Currency = "uah"
	// CurrencyUgx represents the Currency `"ugx"`.
	CurrencyUgx Currency = "ugx"
	// CurrencyUsd represents the Currency `"usd"`.
	CurrencyUsd Currency = "usd"
	// CurrencyUyu represents the Currency `"uyu"`.
	CurrencyUyu Currency = "uyu"
	// CurrencyUzs represents the Currency `"uzs"`.
	CurrencyUzs Currency = "uzs"
	// CurrencyVef represents the Currency `"vef"`.
	CurrencyVef Currency = "vef"
	// CurrencyVnd represents the Currency `"vnd"`.
	CurrencyVnd Currency = "vnd"
	// CurrencyVuv represents the Currency `"vuv"`.
	CurrencyVuv Currency = "vuv"
	// CurrencyWst represents the Currency `"wst"`.
	CurrencyWst Currency = "wst"
	// CurrencyXaf represents the Currency `"xaf"`.
	CurrencyXaf Currency = "xaf"
	// CurrencyXcd represents the Currency `"xcd"`.
	CurrencyXcd Currency = "xcd"
	// CurrencyXof represents the Currency `"xof"`.
	CurrencyXof Currency = "xof"
	// CurrencyXpf represents the Currency `"xpf"`.
	CurrencyXpf Currency = "xpf"
	// CurrencyYer represents the Currency `"yer"`.
	CurrencyYer Currency = "yer"
	// CurrencyZar represents the Currency `"zar"`.
	CurrencyZar Currency = "zar"
	// CurrencyZmw represents the Currency `"zmw"`.
	CurrencyZmw Currency = "zmw"
)

// Customer is the resource representing a payment "Customer".
type Customer struct {
	// Address is the customer's address.
	Address Address `json:"address,omitempty" yaml:"address,omitempty"`
	// Balance is current balance, if any, being stored on the customer.
	//
	// If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
	Balance int `json:"balance,omitempty" yaml:"balance,omitempty"`
	// CreatedAt is time at which the object was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Currency is three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.
	Currency Currency `json:"currency,omitempty" yaml:"currency,omitempty"`
	// Delinquent is when the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed.
	//
	// When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by dunning, `delinquent` doesn't get reset to `false`.
	Delinquent bool `json:"delinquent,omitempty" yaml:"delinquent,omitempty"`
	// Email is the customer's email address.
	Email string `json:"email,omitempty" yaml:"email,omitempty"`
	// ID is unique identifier for the object.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Metadata is set of key-value pairs.
	Metadata string `json:"metadata,omitempty" yaml:"metadata,omitempty"`
	// Name is the customer's full name or business name.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Phone is the customer's phone number.
	Phone PhoneNumber `json:"phone,omitempty" yaml:"phone,omitempty"`
}

// Duration is the type definition for a Duration.
type Duration int

// EngineMetadata is metadata about our currently running server.
//
// This is mostly used for internal purposes and debugging.
type EngineMetadata struct {
	// AsyncJobsRunning is if any async job is currently running.
	AsyncJobsRunning bool `json:"async_jobs_running,omitempty" yaml:"async_jobs_running,omitempty"`
	// Cache is metadata about our cache.
	Cache CacheMetadata `json:"cache,omitempty" yaml:"cache,omitempty"`
	// Environment is the environment we are running in.
	Environment Environment `json:"environment,omitempty" yaml:"environment,omitempty"`
	// Fs is metadata about our file system.
	Fs FileSystemMetadata `json:"fs,omitempty" yaml:"fs,omitempty"`
	// GitHash is the git hash of the server.
	GitHash string `json:"git_hash,omitempty" yaml:"git_hash,omitempty"`
	// Pubsub is metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub,omitempty" yaml:"pubsub,omitempty"`
}

// Environment is the environment the server is running in.
type Environment string

const (
	// EnvironmentDEVELOPMENT represents the Environment `"DEVELOPMENT"`.
	EnvironmentDEVELOPMENT Environment = "DEVELOPMENT"
	// EnvironmentPREVIEW represents the Environment `"PREVIEW"`.
	EnvironmentPREVIEW Environment = "PREVIEW"
	// EnvironmentPRODUCTION represents the Environment `"PRODUCTION"`.
	EnvironmentPRODUCTION Environment = "PRODUCTION"
)

// Error is error information from a response.
type Error struct {
	ErrorCode string `json:"error_code,omitempty" yaml:"error_code,omitempty"`
	Message   string `json:"message,omitempty" yaml:"message,omitempty"`
	RequestID string `json:"request_id,omitempty" yaml:"request_id,omitempty"`
}

// ExtendedUser is extended user information.
//
// This is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: MailChimp, Stripe, and Zendesk.
type ExtendedUser struct {
	// Company is the user's company.
	Company string `json:"company,omitempty" yaml:"company,omitempty"`
	// CreatedAt is the date and time the user was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Discord is the user's Discord handle.
	Discord string `json:"discord,omitempty" yaml:"discord,omitempty"`
	// Email is the email address of the user.
	Email string `json:"email,omitempty" yaml:"email,omitempty"`
	// EmailVerified is the date and time the email address was verified.
	EmailVerified *JSONTime `json:"email_verified,omitempty" yaml:"email_verified,omitempty"`
	// FirstName is the user's first name.
	FirstName string `json:"first_name,omitempty" yaml:"first_name,omitempty"`
	// Github is the user's GitHub handle.
	Github string `json:"github,omitempty" yaml:"github,omitempty"`
	// ID is the unique identifier for the user.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Image is the image avatar for the user. This is a URL.
	Image string `json:"image,omitempty" yaml:"image,omitempty"`
	// LastName is the user's last name.
	LastName string `json:"last_name,omitempty" yaml:"last_name,omitempty"`
	// MailchimpID is the user's MailChimp ID. This is mostly used for internal mapping.
	MailchimpID string `json:"mailchimp_id,omitempty" yaml:"mailchimp_id,omitempty"`
	// Name is the name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Phone is the user's phone number.
	Phone PhoneNumber `json:"phone,omitempty" yaml:"phone,omitempty"`
	// StripeID is the user's Stripe ID. This is mostly used for internal mapping.
	StripeID string `json:"stripe_id,omitempty" yaml:"stripe_id,omitempty"`
	// UpdatedAt is the date and time the user was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// ZendeskID is the user's Zendesk ID. This is mostly used for internal mapping.
	ZendeskID string `json:"zendesk_id,omitempty" yaml:"zendesk_id,omitempty"`
}

// ExtendedUserResultsPage is a single page of results
type ExtendedUserResultsPage struct {
	// Items is list of items on this page of results
	Items []ExtendedUser `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// FileConversion is a file conversion.
type FileConversion struct {
	// CompletedAt is the time and date the file conversion was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the file conversion was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the file conversion.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// Output is the converted file, if completed, base64 encoded.
	Output string `json:"output,omitempty" yaml:"output,omitempty"`
	// OutputFormat is the output format of the file conversion.
	OutputFormat FileOutputFormat `json:"output_format,omitempty" yaml:"output_format,omitempty"`
	// SrcFormat is the source format of the file conversion.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the file conversion was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the file conversion.
	Status APICallStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// UpdatedAt is the time and date the file conversion was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the file conversion.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// FileDensity is a file density result.
type FileDensity struct {
	// CompletedAt is the time and date the density was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the density was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Density is the resulting density.
	Density float64 `json:"density,omitempty" yaml:"density,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the density request.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// MaterialMass is the material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass,omitempty" yaml:"material_mass,omitempty"`
	// SrcFormat is the source format of the file.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the density was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the density.
	Status APICallStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// UpdatedAt is the time and date the density was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the density.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// FileMass is a file mass result.
type FileMass struct {
	// CompletedAt is the time and date the mass was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the mass was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the mass request.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// Mass is the resulting mass.
	Mass float64 `json:"mass,omitempty" yaml:"mass,omitempty"`
	// MaterialDensity is the material density as denoted by the user.
	MaterialDensity float64 `json:"material_density,omitempty" yaml:"material_density,omitempty"`
	// SrcFormat is the source format of the file.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the mass was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the mass.
	Status APICallStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// UpdatedAt is the time and date the mass was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the mass.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// FileOutputFormat is the valid types of output file formats.
type FileOutputFormat string

const (
	// FileOutputFormatStl represents the FileOutputFormat `"stl"`.
	FileOutputFormatStl FileOutputFormat = "stl"
	// FileOutputFormatObj represents the FileOutputFormat `"obj"`.
	FileOutputFormatObj FileOutputFormat = "obj"
	// FileOutputFormatDae represents the FileOutputFormat `"dae"`.
	FileOutputFormatDae FileOutputFormat = "dae"
	// FileOutputFormatStep represents the FileOutputFormat `"step"`.
	FileOutputFormatStep FileOutputFormat = "step"
	// FileOutputFormatFbx represents the FileOutputFormat `"fbx"`.
	FileOutputFormatFbx FileOutputFormat = "fbx"
	// FileOutputFormatFbxb represents the FileOutputFormat `"fbxb"`.
	FileOutputFormatFbxb FileOutputFormat = "fbxb"
)

// FileSourceFormat is the valid types of source file formats.
type FileSourceFormat string

const (
	// FileSourceFormatStl represents the FileSourceFormat `"stl"`.
	FileSourceFormatStl FileSourceFormat = "stl"
	// FileSourceFormatObj represents the FileSourceFormat `"obj"`.
	FileSourceFormatObj FileSourceFormat = "obj"
	// FileSourceFormatDae represents the FileSourceFormat `"dae"`.
	FileSourceFormatDae FileSourceFormat = "dae"
	// FileSourceFormatStep represents the FileSourceFormat `"step"`.
	FileSourceFormatStep FileSourceFormat = "step"
	// FileSourceFormatFbx represents the FileSourceFormat `"fbx"`.
	FileSourceFormatFbx FileSourceFormat = "fbx"
)

// FileSystemMetadata is metadata about our file system.
//
// This is mostly used for internal purposes and debugging.
type FileSystemMetadata struct {
	// Ok is if the file system passed a sanity check.
	Ok bool `json:"ok,omitempty" yaml:"ok,omitempty"`
}

// FileVolume is a file volume result.
type FileVolume struct {
	// CompletedAt is the time and date the volume was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the volume was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the volume request.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// SrcFormat is the source format of the file.
	SrcFormat FileSourceFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the volume was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the volume.
	Status APICallStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// UpdatedAt is the time and date the volume was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the volume.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
	// Volume is the resulting volume.
	Volume float64 `json:"volume,omitempty" yaml:"volume,omitempty"`
}

// Gateway is gateway information.
type Gateway struct {
	// AuthTimeout is the auth timeout of the gateway.
	AuthTimeout int `json:"auth_timeout,omitempty" yaml:"auth_timeout,omitempty"`
	// Host is the host of the gateway.
	Host string `json:"host,omitempty" yaml:"host,omitempty"`
	// Name is the name of the gateway.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Port is the port of the gateway.
	Port int `json:"port,omitempty" yaml:"port,omitempty"`
	// TlsTimeout is the TLS timeout for the gateway.
	TlsTimeout int `json:"tls_timeout,omitempty" yaml:"tls_timeout,omitempty"`
}

// Invoice is an invoice.
type Invoice struct {
	// AmountDue is final amount due at this time for this invoice.
	//
	// If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
	AmountDue int `json:"amount_due,omitempty" yaml:"amount_due,omitempty"`
	// AmountPaid is the amount, in %s, that was paid.
	AmountPaid int `json:"amount_paid,omitempty" yaml:"amount_paid,omitempty"`
	// AmountRemaining is the amount remaining, in %s, that is due.
	AmountRemaining int `json:"amount_remaining,omitempty" yaml:"amount_remaining,omitempty"`
	// AttemptCount is number of payment attempts made for this invoice, from the perspective of the payment retry schedule.
	//
	// Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
	AttemptCount int `json:"attempt_count,omitempty" yaml:"attempt_count,omitempty"`
	// Attempted is whether an attempt has been made to pay the invoice.
	//
	// An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
	Attempted bool `json:"attempted,omitempty" yaml:"attempted,omitempty"`
	// CreatedAt is time at which the object was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Currency is three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency,omitempty" yaml:"currency,omitempty"`
	// Description is description of the invoice.
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique identifier for the object.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// InvoicePdf is the link to download the PDF for the invoice.
	InvoicePdf string `json:"invoice_pdf,omitempty" yaml:"invoice_pdf,omitempty"`
	// InvoiceUrl is the URL for the hosted invoice page, which allows customers to view and pay an invoice.
	InvoiceUrl string `json:"invoice_url,omitempty" yaml:"invoice_url,omitempty"`
	// Lines is the individual line items that make up the invoice.
	//
	// `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
	Lines []InvoiceLineItem `json:"lines,omitempty" yaml:"lines,omitempty"`
	// Metadata is set of key-value pairs.
	Metadata string `json:"metadata,omitempty" yaml:"metadata,omitempty"`
	// Number is a unique, identifying string that appears on emails sent to the customer for this invoice.
	Number string `json:"number,omitempty" yaml:"number,omitempty"`
	// Paid is whether payment was successfully collected for this invoice.
	//
	// An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	Paid bool `json:"paid,omitempty" yaml:"paid,omitempty"`
	// ReceiptNumber is this is the transaction number that appears on email receipts sent for this invoice.
	ReceiptNumber string `json:"receipt_number,omitempty" yaml:"receipt_number,omitempty"`
	// StatementDescriptor is extra information about an invoice for the customer's credit card statement.
	StatementDescriptor string `json:"statement_descriptor,omitempty" yaml:"statement_descriptor,omitempty"`
	// Status is the status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
	//
	// [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview).
	Status InvoiceStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// Subtotal is total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied.
	//
	// Item discounts are already incorporated.
	Subtotal int `json:"subtotal,omitempty" yaml:"subtotal,omitempty"`
	// Tax is the amount of tax on this invoice.
	//
	// This is the sum of all the tax amounts on this invoice.
	Tax int `json:"tax,omitempty" yaml:"tax,omitempty"`
	// Total is total after discounts and taxes.
	Total int `json:"total,omitempty" yaml:"total,omitempty"`
}

// InvoiceLineItem is an invoice line item.
type InvoiceLineItem struct {
	// Amount is the amount, in %s.
	Amount int `json:"amount,omitempty" yaml:"amount,omitempty"`
	// Currency is three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency,omitempty" yaml:"currency,omitempty"`
	// Description is the description.
	Description string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID is unique identifier for the object.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// InvoiceItem is the ID of the invoice item associated with this line item if any.
	InvoiceItem string `json:"invoice_item,omitempty" yaml:"invoice_item,omitempty"`
	// Metadata is set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
	//
	// Set of key-value pairs.
	Metadata string `json:"metadata,omitempty" yaml:"metadata,omitempty"`
}

// InvoiceStatus is an enum representing the possible values of an `Invoice`'s `status` field.
type InvoiceStatus string

const (
	// InvoiceStatusDeleted represents the InvoiceStatus `"deleted"`.
	InvoiceStatusDeleted InvoiceStatus = "deleted"
	// InvoiceStatusDraft represents the InvoiceStatus `"draft"`.
	InvoiceStatusDraft InvoiceStatus = "draft"
	// InvoiceStatusOpen represents the InvoiceStatus `"open"`.
	InvoiceStatusOpen InvoiceStatus = "open"
	// InvoiceStatusPaid represents the InvoiceStatus `"paid"`.
	InvoiceStatusPaid InvoiceStatus = "paid"
	// InvoiceStatusUncollectible represents the InvoiceStatus `"uncollectible"`.
	InvoiceStatusUncollectible InvoiceStatus = "uncollectible"
	// InvoiceStatusVoid represents the InvoiceStatus `"void"`.
	InvoiceStatusVoid InvoiceStatus = "void"
)

// Jetstream is jetstream information.
type Jetstream struct {
	// Config is the Jetstream config.
	Config JetstreamConfig `json:"config,omitempty" yaml:"config,omitempty"`
	// Meta is meta information about the cluster.
	Meta MetaClusterInfo `json:"meta,omitempty" yaml:"meta,omitempty"`
	// Stats is jetstream statistics.
	Stats JetstreamStats `json:"stats,omitempty" yaml:"stats,omitempty"`
}

// JetstreamAPIStats is jetstream API statistics.
type JetstreamAPIStats struct {
	// Errors is the number of errors.
	Errors int `json:"errors,omitempty" yaml:"errors,omitempty"`
	// Inflight is the number of inflight requests.
	Inflight int `json:"inflight,omitempty" yaml:"inflight,omitempty"`
	// Total is the number of requests.
	Total int `json:"total,omitempty" yaml:"total,omitempty"`
}

// JetstreamConfig is jetstream configuration.
type JetstreamConfig struct {
	// Domain is the domain.
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty"`
	// MaxMemory is the max memory.
	MaxMemory int `json:"max_memory,omitempty" yaml:"max_memory,omitempty"`
	// MaxStorage is the max storage.
	MaxStorage int `json:"max_storage,omitempty" yaml:"max_storage,omitempty"`
	// StoreDir is the store directory.
	StoreDir string `json:"store_dir,omitempty" yaml:"store_dir,omitempty"`
}

// JetstreamStats is jetstream statistics.
type JetstreamStats struct {
	// Accounts is the number of accounts.
	Accounts int `json:"accounts,omitempty" yaml:"accounts,omitempty"`
	// API is aPI stats.
	API JetstreamAPIStats `json:"api,omitempty" yaml:"api,omitempty"`
	// HaAssets is the number of HA assets.
	HaAssets int `json:"ha_assets,omitempty" yaml:"ha_assets,omitempty"`
	// Memory is the memory used by the Jetstream server.
	Memory int `json:"memory,omitempty" yaml:"memory,omitempty"`
	// ReservedMemory is the reserved memory for the Jetstream server.
	ReservedMemory int `json:"reserved_memory,omitempty" yaml:"reserved_memory,omitempty"`
	// ReservedStore is the reserved storage for the Jetstream server.
	ReservedStore int `json:"reserved_store,omitempty" yaml:"reserved_store,omitempty"`
	// Store is the storage used by the Jetstream server.
	Store int `json:"store,omitempty" yaml:"store,omitempty"`
}

// LeafNode is leaf node information.
type LeafNode struct {
	// AuthTimeout is the auth timeout of the leaf node.
	AuthTimeout int `json:"auth_timeout,omitempty" yaml:"auth_timeout,omitempty"`
	// Host is the host of the leaf node.
	Host string `json:"host,omitempty" yaml:"host,omitempty"`
	// Port is the port of the leaf node.
	Port int `json:"port,omitempty" yaml:"port,omitempty"`
	// TlsTimeout is the TLS timeout for the leaf node.
	TlsTimeout int `json:"tls_timeout,omitempty" yaml:"tls_timeout,omitempty"`
}

// LoginParams is the parameters passed to login.
type LoginParams struct {
	// Session is the session token we should set as a cookie.
	Session string `json:"session,omitempty" yaml:"session,omitempty"`
}

// MetaClusterInfo is jetstream statistics.
type MetaClusterInfo struct {
	// ClusterSize is the size of the cluster.
	ClusterSize int `json:"cluster_size,omitempty" yaml:"cluster_size,omitempty"`
	// Leader is the leader of the cluster.
	Leader string `json:"leader,omitempty" yaml:"leader,omitempty"`
	// Name is the name of the cluster.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// Metadata is metadata about our currently running server.
//
// This is mostly used for internal purposes and debugging.
type Metadata struct {
	// Cache is metadata about our cache.
	Cache CacheMetadata `json:"cache,omitempty" yaml:"cache,omitempty"`
	// Engine is metadata about our engine API connection.
	Engine EngineMetadata `json:"engine,omitempty" yaml:"engine,omitempty"`
	// Environment is the environment we are running in.
	Environment Environment `json:"environment,omitempty" yaml:"environment,omitempty"`
	// Fs is metadata about our file system.
	Fs FileSystemMetadata `json:"fs,omitempty" yaml:"fs,omitempty"`
	// GitHash is the git hash of the server.
	GitHash string `json:"git_hash,omitempty" yaml:"git_hash,omitempty"`
	// Pubsub is metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub,omitempty" yaml:"pubsub,omitempty"`
}

// Method is the Request Method (VERB)
//
// This type also contains constants for a number of common HTTP methods such as GET, POST, etc.
//
// Currently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions.
type Method string

const (
	// MethodOPTIONS represents the Method `"OPTIONS"`.
	MethodOPTIONS Method = "OPTIONS"
	// MethodGET represents the Method `"GET"`.
	MethodGET Method = "GET"
	// MethodPOST represents the Method `"POST"`.
	MethodPOST Method = "POST"
	// MethodPUT represents the Method `"PUT"`.
	MethodPUT Method = "PUT"
	// MethodDELETE represents the Method `"DELETE"`.
	MethodDELETE Method = "DELETE"
	// MethodHEAD represents the Method `"HEAD"`.
	MethodHEAD Method = "HEAD"
	// MethodTRACE represents the Method `"TRACE"`.
	MethodTRACE Method = "TRACE"
	// MethodCONNECT represents the Method `"CONNECT"`.
	MethodCONNECT Method = "CONNECT"
	// MethodPATCH represents the Method `"PATCH"`.
	MethodPATCH Method = "PATCH"
	// MethodEXTENSION represents the Method `"EXTENSION"`.
	MethodEXTENSION Method = "EXTENSION"
)

// OutputFile is output file contents.
type OutputFile struct {
	// Contents is the contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON.
	Contents string `json:"contents,omitempty" yaml:"contents,omitempty"`
	// Name is the name of the file.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
}

// PaymentIntent is a payment intent response.
type PaymentIntent struct {
	// ClientSecret is the client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
	ClientSecret string `json:"client_secret,omitempty" yaml:"client_secret,omitempty"`
}

// PaymentMethod is a payment method.
type PaymentMethod struct {
	// BillingInfo is the billing info for the payment method.
	BillingInfo BillingInfo `json:"billing_info,omitempty" yaml:"billing_info,omitempty"`
	// Card is the card, if it is one. For our purposes, this is the only type of payment method that we support.
	Card CardDetails `json:"card,omitempty" yaml:"card,omitempty"`
	// CreatedAt is time at which the object was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// ID is unique identifier for the object.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Metadata is set of key-value pairs.
	Metadata string `json:"metadata,omitempty" yaml:"metadata,omitempty"`
	// Type is the type of payment method.
	Type PaymentMethodType `json:"type,omitempty" yaml:"type,omitempty"`
}

// PaymentMethodCardChecks is card checks.
type PaymentMethodCardChecks struct {
	// AddressLine1Check is if a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressLine1Check string `json:"address_line1_check,omitempty" yaml:"address_line1_check,omitempty"`
	// AddressPostalCodeCheck is if a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressPostalCodeCheck string `json:"address_postal_code_check,omitempty" yaml:"address_postal_code_check,omitempty"`
	// CvcCheck is if a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	CvcCheck string `json:"cvc_check,omitempty" yaml:"cvc_check,omitempty"`
}

// PaymentMethodType is an enum representing the possible values of an `PaymentMethod`'s `type` field.
type PaymentMethodType string

const (
	// PaymentMethodTypeCard represents the PaymentMethodType `"card"`.
	PaymentMethodTypeCard PaymentMethodType = "card"
)

// PhoneNumber is the type definition for a PhoneNumber.
type PhoneNumber string

// Pong is the response from the `/ping` endpoint.
type Pong struct {
	// Message is the pong response.
	Message string `json:"message,omitempty" yaml:"message,omitempty"`
}

// Session is an authentication session.
//
// For our UIs, these are automatically created by Next.js.
type Session struct {
	// CreatedAt is the date and time the session was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Expires is the date and time the session expires.
	Expires *JSONTime `json:"expires,omitempty" yaml:"expires,omitempty"`
	// ID is the unique identifier for the session.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// SessionToken is the session token.
	SessionToken Uuid `json:"session_token,omitempty" yaml:"session_token,omitempty"`
	// UpdatedAt is the date and time the session was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user that the session belongs to.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// StatusCode is the type definition for a StatusCode.
type StatusCode int

// UnitConversion is a unit conversion.
type UnitConversion struct {
	// CompletedAt is the time and date the unit conversion was completed.
	CompletedAt *JSONTime `json:"completed_at,omitempty" yaml:"completed_at,omitempty"`
	// CreatedAt is the time and date the unit conversion was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Error is the error the function returned, if any.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID is the unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID Uuid `json:"id,omitempty" yaml:"id,omitempty"`
	// Input is the input value.
	Input float64 `json:"input,omitempty" yaml:"input,omitempty"`
	// Output is the resulting value.
	Output float64 `json:"output,omitempty" yaml:"output,omitempty"`
	// OutputFormat is the output format of the unit conversion.
	OutputFormat UnitMetricFormat `json:"output_format,omitempty" yaml:"output_format,omitempty"`
	// SrcFormat is the source format of the unit conversion.
	SrcFormat UnitMetricFormat `json:"src_format,omitempty" yaml:"src_format,omitempty"`
	// StartedAt is the time and date the unit conversion was started.
	StartedAt *JSONTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`
	// Status is the status of the unit conversion.
	Status APICallStatus `json:"status,omitempty" yaml:"status,omitempty"`
	// UpdatedAt is the time and date the unit conversion was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
	// UserID is the user ID of the user who created the unit conversion.
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// UnitMetricFormat is the valid types of metric unit formats.
type UnitMetricFormat string

const (
	// UnitMetricFormatAtto represents the UnitMetricFormat `"atto"`.
	UnitMetricFormatAtto UnitMetricFormat = "atto"
	// UnitMetricFormatFemto represents the UnitMetricFormat `"femto"`.
	UnitMetricFormatFemto UnitMetricFormat = "femto"
	// UnitMetricFormatPico represents the UnitMetricFormat `"pico"`.
	UnitMetricFormatPico UnitMetricFormat = "pico"
	// UnitMetricFormatNano represents the UnitMetricFormat `"nano"`.
	UnitMetricFormatNano UnitMetricFormat = "nano"
	// UnitMetricFormatMicro represents the UnitMetricFormat `"micro"`.
	UnitMetricFormatMicro UnitMetricFormat = "micro"
	// UnitMetricFormatMilli represents the UnitMetricFormat `"milli"`.
	UnitMetricFormatMilli UnitMetricFormat = "milli"
	// UnitMetricFormatCenti represents the UnitMetricFormat `"centi"`.
	UnitMetricFormatCenti UnitMetricFormat = "centi"
	// UnitMetricFormatDeci represents the UnitMetricFormat `"deci"`.
	UnitMetricFormatDeci UnitMetricFormat = "deci"
	// UnitMetricFormatMetricUnit represents the UnitMetricFormat `"metric_unit"`.
	UnitMetricFormatMetricUnit UnitMetricFormat = "metric_unit"
	// UnitMetricFormatDeca represents the UnitMetricFormat `"deca"`.
	UnitMetricFormatDeca UnitMetricFormat = "deca"
	// UnitMetricFormatHecto represents the UnitMetricFormat `"hecto"`.
	UnitMetricFormatHecto UnitMetricFormat = "hecto"
	// UnitMetricFormatKilo represents the UnitMetricFormat `"kilo"`.
	UnitMetricFormatKilo UnitMetricFormat = "kilo"
	// UnitMetricFormatMega represents the UnitMetricFormat `"mega"`.
	UnitMetricFormatMega UnitMetricFormat = "mega"
	// UnitMetricFormatGiga represents the UnitMetricFormat `"giga"`.
	UnitMetricFormatGiga UnitMetricFormat = "giga"
	// UnitMetricFormatTera represents the UnitMetricFormat `"tera"`.
	UnitMetricFormatTera UnitMetricFormat = "tera"
	// UnitMetricFormatPeta represents the UnitMetricFormat `"peta"`.
	UnitMetricFormatPeta UnitMetricFormat = "peta"
	// UnitMetricFormatExa represents the UnitMetricFormat `"exa"`.
	UnitMetricFormatExa UnitMetricFormat = "exa"
)

// UpdateUser is the user-modifiable parts of a User.
type UpdateUser struct {
	// Company is the user's company.
	Company string `json:"company,omitempty" yaml:"company,omitempty"`
	// Discord is the user's Discord handle.
	Discord string `json:"discord,omitempty" yaml:"discord,omitempty"`
	// FirstName is the user's first name.
	FirstName string `json:"first_name,omitempty" yaml:"first_name,omitempty"`
	// Github is the user's GitHub handle.
	Github string `json:"github,omitempty" yaml:"github,omitempty"`
	// LastName is the user's last name.
	LastName string `json:"last_name,omitempty" yaml:"last_name,omitempty"`
	// Phone is the user's phone number.
	Phone PhoneNumber `json:"phone,omitempty" yaml:"phone,omitempty"`
}

// User is a user.
type User struct {
	// Company is the user's company.
	Company string `json:"company,omitempty" yaml:"company,omitempty"`
	// CreatedAt is the date and time the user was created.
	CreatedAt *JSONTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`
	// Discord is the user's Discord handle.
	Discord string `json:"discord,omitempty" yaml:"discord,omitempty"`
	// Email is the email address of the user.
	Email string `json:"email,omitempty" yaml:"email,omitempty"`
	// EmailVerified is the date and time the email address was verified.
	EmailVerified *JSONTime `json:"email_verified,omitempty" yaml:"email_verified,omitempty"`
	// FirstName is the user's first name.
	FirstName string `json:"first_name,omitempty" yaml:"first_name,omitempty"`
	// Github is the user's GitHub handle.
	Github string `json:"github,omitempty" yaml:"github,omitempty"`
	// ID is the unique identifier for the user.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`
	// Image is the image avatar for the user. This is a URL.
	Image string `json:"image,omitempty" yaml:"image,omitempty"`
	// LastName is the user's last name.
	LastName string `json:"last_name,omitempty" yaml:"last_name,omitempty"`
	// Name is the name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name,omitempty" yaml:"name,omitempty"`
	// Phone is the user's phone number.
	Phone PhoneNumber `json:"phone,omitempty" yaml:"phone,omitempty"`
	// UpdatedAt is the date and time the user was last updated.
	UpdatedAt *JSONTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`
}

// UserResultsPage is a single page of results
type UserResultsPage struct {
	// Items is list of items on this page of results
	Items []User `json:"items,omitempty" yaml:"items,omitempty"`
	// NextPage is token used to fetch the next page of results (if any)
	NextPage string `json:"next_page,omitempty" yaml:"next_page,omitempty"`
}

// Uuid is a uuid.
//
// A Version 4 UUID is a universally unique identifier that is generated using random numbers.
type Uuid string

// APICallQueryGroupBys is the collection of all APICallQueryGroupBy values.
var APICallQueryGroupBys = []APICallQueryGroupBy{
	APICallQueryGroupByEmail,
	APICallQueryGroupByEndpoint,
	APICallQueryGroupByIpAddress,
	APICallQueryGroupByMethod,
	APICallQueryGroupByOrigin,
	APICallQueryGroupByUserId,
}

// APICallStatuses is the collection of all APICallStatus values.
var APICallStatuses = []APICallStatus{
	APICallStatusCompleted,
	APICallStatusFailed,
	APICallStatusInProgress,
	APICallStatusQueued,
	APICallStatusUploaded,
}

// AsyncAPICallOutputTypes is the collection of all AsyncAPICallOutputType values.
var AsyncAPICallOutputTypes = []AsyncAPICallOutputType{
	AsyncAPICallOutputTypeFileConversion,
	AsyncAPICallOutputTypeFileDensity,
	AsyncAPICallOutputTypeFileMass,
	AsyncAPICallOutputTypeFileVolume,
}

// AsyncAPICallTypes is the collection of all AsyncAPICallType values.
var AsyncAPICallTypes = []AsyncAPICallType{
	AsyncAPICallTypeFileConversion,
	AsyncAPICallTypeFileDensity,
	AsyncAPICallTypeFileMass,
	AsyncAPICallTypeFileVolume,
}

// CodeLanguages is the collection of all CodeLanguage values.
var CodeLanguages = []CodeLanguage{
	CodeLanguageGo,
	CodeLanguageNode,
	CodeLanguagePython,
	CodeLanguageRust,
}

// CreatedAtSortModes is the collection of all CreatedAtSortMode values.
var CreatedAtSortModes = []CreatedAtSortMode{
	CreatedAtSortModeCreatedAtAscending,
	CreatedAtSortModeCreatedAtDescending,
}

// Currencys is the collection of all Currency values.
var Currencys = []Currency{
	CurrencyAed,
	CurrencyAfn,
	CurrencyAll,
	CurrencyAmd,
	CurrencyAng,
	CurrencyAoa,
	CurrencyArs,
	CurrencyAud,
	CurrencyAwg,
	CurrencyAzn,
	CurrencyBam,
	CurrencyBbd,
	CurrencyBdt,
	CurrencyBgn,
	CurrencyBif,
	CurrencyBmd,
	CurrencyBnd,
	CurrencyBob,
	CurrencyBrl,
	CurrencyBsd,
	CurrencyBwp,
	CurrencyBzd,
	CurrencyCad,
	CurrencyCdf,
	CurrencyChf,
	CurrencyClp,
	CurrencyCny,
	CurrencyCop,
	CurrencyCrc,
	CurrencyCve,
	CurrencyCzk,
	CurrencyDjf,
	CurrencyDkk,
	CurrencyDop,
	CurrencyDzd,
	CurrencyEek,
	CurrencyEgp,
	CurrencyEtb,
	CurrencyEur,
	CurrencyFjd,
	CurrencyFkp,
	CurrencyGbp,
	CurrencyGel,
	CurrencyGip,
	CurrencyGmd,
	CurrencyGnf,
	CurrencyGtq,
	CurrencyGyd,
	CurrencyHkd,
	CurrencyHnl,
	CurrencyHrk,
	CurrencyHtg,
	CurrencyHuf,
	CurrencyIdr,
	CurrencyIls,
	CurrencyInr,
	CurrencyIsk,
	CurrencyJmd,
	CurrencyJpy,
	CurrencyKes,
	CurrencyKgs,
	CurrencyKhr,
	CurrencyKmf,
	CurrencyKrw,
	CurrencyKyd,
	CurrencyKzt,
	CurrencyLak,
	CurrencyLbp,
	CurrencyLkr,
	CurrencyLrd,
	CurrencyLsl,
	CurrencyLtl,
	CurrencyLvl,
	CurrencyMad,
	CurrencyMdl,
	CurrencyMga,
	CurrencyMkd,
	CurrencyMnt,
	CurrencyMop,
	CurrencyMro,
	CurrencyMur,
	CurrencyMvr,
	CurrencyMwk,
	CurrencyMxn,
	CurrencyMyr,
	CurrencyMzn,
	CurrencyNad,
	CurrencyNgn,
	CurrencyNio,
	CurrencyNok,
	CurrencyNpr,
	CurrencyNzd,
	CurrencyPab,
	CurrencyPen,
	CurrencyPgk,
	CurrencyPhp,
	CurrencyPkr,
	CurrencyPln,
	CurrencyPyg,
	CurrencyQar,
	CurrencyRon,
	CurrencyRsd,
	CurrencyRub,
	CurrencyRwf,
	CurrencySar,
	CurrencySbd,
	CurrencyScr,
	CurrencySek,
	CurrencySgd,
	CurrencyShp,
	CurrencySll,
	CurrencySos,
	CurrencySrd,
	CurrencyStd,
	CurrencySvc,
	CurrencySzl,
	CurrencyThb,
	CurrencyTjs,
	CurrencyTop,
	CurrencyTry,
	CurrencyTtd,
	CurrencyTwd,
	CurrencyTzs,
	CurrencyUah,
	CurrencyUgx,
	CurrencyUsd,
	CurrencyUyu,
	CurrencyUzs,
	CurrencyVef,
	CurrencyVnd,
	CurrencyVuv,
	CurrencyWst,
	CurrencyXaf,
	CurrencyXcd,
	CurrencyXof,
	CurrencyXpf,
	CurrencyYer,
	CurrencyZar,
	CurrencyZmw,
}

// Environments is the collection of all Environment values.
var Environments = []Environment{
	EnvironmentDEVELOPMENT,
	EnvironmentPREVIEW,
	EnvironmentPRODUCTION,
}

// FileOutputFormats is the collection of all FileOutputFormat values.
var FileOutputFormats = []FileOutputFormat{
	FileOutputFormatDae,
	FileOutputFormatFbx,
	FileOutputFormatFbxb,
	FileOutputFormatObj,
	FileOutputFormatStep,
	FileOutputFormatStl,
}

// FileSourceFormats is the collection of all FileSourceFormat values.
var FileSourceFormats = []FileSourceFormat{
	FileSourceFormatDae,
	FileSourceFormatFbx,
	FileSourceFormatObj,
	FileSourceFormatStep,
	FileSourceFormatStl,
}

// InvoiceStatuses is the collection of all InvoiceStatus values.
var InvoiceStatuses = []InvoiceStatus{
	InvoiceStatusDeleted,
	InvoiceStatusDraft,
	InvoiceStatusOpen,
	InvoiceStatusPaid,
	InvoiceStatusUncollectible,
	InvoiceStatusVoid,
}

// Methods is the collection of all Method values.
var Methods = []Method{
	MethodCONNECT,
	MethodDELETE,
	MethodEXTENSION,
	MethodGET,
	MethodHEAD,
	MethodOPTIONS,
	MethodPATCH,
	MethodPOST,
	MethodPUT,
	MethodTRACE,
}

// PaymentMethodTypes is the collection of all PaymentMethodType values.
var PaymentMethodTypes = []PaymentMethodType{
	PaymentMethodTypeCard,
}

// UnitMetricFormats is the collection of all UnitMetricFormat values.
var UnitMetricFormats = []UnitMetricFormat{
	UnitMetricFormatAtto,
	UnitMetricFormatCenti,
	UnitMetricFormatDeca,
	UnitMetricFormatDeci,
	UnitMetricFormatExa,
	UnitMetricFormatFemto,
	UnitMetricFormatGiga,
	UnitMetricFormatHecto,
	UnitMetricFormatKilo,
	UnitMetricFormatMega,
	UnitMetricFormatMetricUnit,
	UnitMetricFormatMicro,
	UnitMetricFormatMilli,
	UnitMetricFormatNano,
	UnitMetricFormatPeta,
	UnitMetricFormatPico,
	UnitMetricFormatTera,
}
