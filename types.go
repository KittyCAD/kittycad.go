// Code generated by `generate`. DO NOT EDIT.

package kittycad

// AccountProvider: An account provider.
type AccountProvider string

const (
	// AccountProviderGoogle represents the AccountProvider `"google"`.
	AccountProviderGoogle AccountProvider = "google"
	// AccountProviderGithub represents the AccountProvider `"github"`.
	AccountProviderGithub AccountProvider = "github"
)

// APICallQueryGroup: A response for a query on the API call table that is grouped by something.
type APICallQueryGroup struct {
	// Count:
	Count int `json:"count" yaml:"count" schema:"count,required"`
	// Query:
	Query string `json:"query" yaml:"query" schema:"query,required"`
}

// APICallQueryGroupBy: The field of an API call to group by.
type APICallQueryGroupBy string

const (
	// APICallQueryGroupByEmail represents the APICallQueryGroupBy `"email"`.
	APICallQueryGroupByEmail APICallQueryGroupBy = "email"
	// APICallQueryGroupByMethod represents the APICallQueryGroupBy `"method"`.
	APICallQueryGroupByMethod APICallQueryGroupBy = "method"
	// APICallQueryGroupByEndpoint represents the APICallQueryGroupBy `"endpoint"`.
	APICallQueryGroupByEndpoint APICallQueryGroupBy = "endpoint"
	// APICallQueryGroupByUserID represents the APICallQueryGroupBy `"user_id"`.
	APICallQueryGroupByUserID APICallQueryGroupBy = "user_id"
	// APICallQueryGroupByOrigin represents the APICallQueryGroupBy `"origin"`.
	APICallQueryGroupByOrigin APICallQueryGroupBy = "origin"
	// APICallQueryGroupByIpAddress represents the APICallQueryGroupBy `"ip_address"`.
	APICallQueryGroupByIpAddress APICallQueryGroupBy = "ip_address"
)

// APICallStatus: The status of an async API call.
type APICallStatus string

const (
	// APICallStatusQueued represents the APICallStatus `"Queued"`.
	APICallStatusQueued APICallStatus = "Queued"
	// APICallStatusUploaded represents the APICallStatus `"Uploaded"`.
	APICallStatusUploaded APICallStatus = "Uploaded"
	// APICallStatusInProgress represents the APICallStatus `"In Progress"`.
	APICallStatusInProgress APICallStatus = "In Progress"
	// APICallStatusCompleted represents the APICallStatus `"Completed"`.
	APICallStatusCompleted APICallStatus = "Completed"
	// APICallStatusFailed represents the APICallStatus `"Failed"`.
	APICallStatusFailed APICallStatus = "Failed"
)

// APICallWithPrice: An API call with the price.
// This is a join of the `ApiCall` and `ApiCallPrice` tables.
type APICallWithPrice struct {
	// CompletedAt: The date and time the API call completed billing.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The date and time the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Duration: The duration of the API call.
	Duration int `json:"duration" yaml:"duration" schema:"duration"`
	// Email: The user's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// Endpoint: The endpoint requested by the API call.
	Endpoint string `json:"endpoint" yaml:"endpoint" schema:"endpoint"`
	// ID: The unique identifier for the API call.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IPAddress: The ip address of the origin.
	IPAddress IP `json:"ip_address" yaml:"ip_address" schema:"ip_address"`
	// Litterbox: If the API call was spawned from the litterbox or not.
	Litterbox bool `json:"litterbox" yaml:"litterbox" schema:"litterbox"`
	// Method: The HTTP method requsted by the API call.
	Method Method `json:"method" yaml:"method" schema:"method,required"`
	// Minutes: The number of minutes the API call was billed for.
	Minutes int `json:"minutes" yaml:"minutes" schema:"minutes"`
	// Origin: The origin of the API call.
	Origin string `json:"origin" yaml:"origin" schema:"origin"`
	// Price: The price of the API call.
	Price float64 `json:"price" yaml:"price" schema:"price"`
	// RequestBody: The request body sent by the API call.
	RequestBody string `json:"request_body" yaml:"request_body" schema:"request_body"`
	// RequestQueryParams: The request query params sent by the API call.
	RequestQueryParams string `json:"request_query_params" yaml:"request_query_params" schema:"request_query_params"`
	// ResponseBody: The response body returned by the API call. We do not store this information if it is above a certain size.
	ResponseBody string `json:"response_body" yaml:"response_body" schema:"response_body"`
	// StartedAt: The date and time the API call started billing.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// StatusCode: The status code returned by the API call.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code"`
	// StripeInvoiceItemID: The Stripe invoice item ID of the API call if it is billable.
	StripeInvoiceItemID string `json:"stripe_invoice_item_id" yaml:"stripe_invoice_item_id" schema:"stripe_invoice_item_id"`
	// Token: The API token that made the API call.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserAgent: The user agent of the request.
	UserAgent string `json:"user_agent" yaml:"user_agent" schema:"user_agent,required"`
	// UserID: The ID of the user that made the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// APICallWithPriceResultsPage: A single page of results
type APICallWithPriceResultsPage struct {
	// Items: list of items on this page of results
	Items []APICallWithPrice `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// APIToken: An API token.
// These are used to authenticate users with Bearer authentication.
type APIToken struct {
	// CreatedAt: The date and time the API token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the API token.
	ID string `json:"id" yaml:"id" schema:"id"`
	// IsValid: If the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token.
	IsValid bool `json:"is_valid" yaml:"is_valid" schema:"is_valid,required"`
	// Token: The API token itself.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The ID of the user that owns the API token.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// APITokenResultsPage: A single page of results
type APITokenResultsPage struct {
	// Items: list of items on this page of results
	Items []APIToken `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AppClientInfo: Information about a third party app client.
type AppClientInfo struct {
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// AsyncAPICall: An async API call.
type AsyncAPICall struct {
	// CompletedAt: The time and date the async API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the async API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the async API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The JSON input for the API call. These are determined by the endpoint that is run.
	Input any `json:"input" yaml:"input" schema:"input"`
	// Output: The JSON output for the API call. These are determined by the endpoint that is run.
	Output any `json:"output" yaml:"output" schema:"output"`
	// StartedAt: The time and date the async API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the async API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type: The type of async API call.
	Type AsyncAPICallType `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the async API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the async API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Worker: The worker node that is performing or performed the async API call.
	Worker string `json:"worker" yaml:"worker" schema:"worker"`
}

// AsyncAPICallOutputFileConversion: A file conversion.
type AsyncAPICallOutputFileConversion struct {
	// CompletedAt: The time and date the file conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the file conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the file conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Output: The converted file, if completed, base64 encoded.
	Output Base64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileOutputFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the file conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the file conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the file conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the file conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputFileMass: A file mass.
type AsyncAPICallOutputFileMass struct {
	// CompletedAt: The time and date the mass was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the mass was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the mass request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// SrcFormat: The source format of the file.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the mass was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the mass.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the mass was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the mass.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputFileVolume: A file volume.
type AsyncAPICallOutputFileVolume struct {
	// CompletedAt: The time and date the volume was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the volume was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the volume request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the volume was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the volume.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the volume was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the volume.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// AsyncAPICallOutputFileDensity: A file density.
type AsyncAPICallOutputFileDensity struct {
	// CompletedAt: The time and date the density was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the density was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the density request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// SrcFormat: The source format of the file.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the density was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the density.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the density was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the density.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallResultsPage: A single page of results
type AsyncAPICallResultsPage struct {
	// Items: list of items on this page of results
	Items []AsyncAPICall `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AsyncAPICallType: The type of async API call.
type AsyncAPICallType string

const (
	// AsyncAPICallTypeFileConversion represents the AsyncAPICallType `"FileConversion"`.
	AsyncAPICallTypeFileConversion AsyncAPICallType = "FileConversion"
	// AsyncAPICallTypeFileVolume represents the AsyncAPICallType `"FileVolume"`.
	AsyncAPICallTypeFileVolume AsyncAPICallType = "FileVolume"
	// AsyncAPICallTypeFileMass represents the AsyncAPICallType `"FileMass"`.
	AsyncAPICallTypeFileMass AsyncAPICallType = "FileMass"
	// AsyncAPICallTypeFileDensity represents the AsyncAPICallType `"FileDensity"`.
	AsyncAPICallTypeFileDensity AsyncAPICallType = "FileDensity"
)

// BillingInfo: The billing information for payments.
type BillingInfo struct {
	// Address: The address of the customer.
	Address NewAddress `json:"address" yaml:"address" schema:"address"`
	// Name: The name of the customer.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The phone for the customer.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CacheMetadata: Metadata about our cache.
// This is mostly used for internal purposes and debugging.
type CacheMetadata struct {
	// Ok: If the cache returned an ok response from ping.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// CardDetails: The card details of a payment method.
type CardDetails struct {
	// Brand: Card brand.
	//
	// Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
	Brand string `json:"brand" yaml:"brand" schema:"brand"`
	// Checks: Checks on Card address and CVC if provided.
	Checks PaymentMethodCardChecks `json:"checks" yaml:"checks" schema:"checks"`
	// Country: Two-letter ISO code representing the country of the card.
	Country string `json:"country" yaml:"country" schema:"country"`
	// ExpMonth: Two-digit number representing the card's expiration month.
	ExpMonth int `json:"exp_month" yaml:"exp_month" schema:"exp_month"`
	// ExpYear: Four-digit number representing the card's expiration year.
	ExpYear int `json:"exp_year" yaml:"exp_year" schema:"exp_year"`
	// Fingerprint: Uniquely identifies this particular card number.
	Fingerprint string `json:"fingerprint" yaml:"fingerprint" schema:"fingerprint"`
	// Funding: Card funding type.
	//
	// Can be `credit`, `debit`, `prepaid`, or `unknown`.
	Funding string `json:"funding" yaml:"funding" schema:"funding"`
	// Last4: The last four digits of the card.
	Last4 string `json:"last4" yaml:"last4" schema:"last4"`
}

// Cluster: Cluster information.
type Cluster struct {
	// Addr: The IP address of the cluster.
	Addr IP `json:"addr" yaml:"addr" schema:"addr"`
	// AuthTimeout: The auth timeout of the cluster.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// ClusterPort: The port of the cluster.
	ClusterPort int `json:"cluster_port" yaml:"cluster_port" schema:"cluster_port"`
	// Name: The name of the cluster.
	Name string `json:"name" yaml:"name" schema:"name"`
	// TlsTimeout: The TLS timeout for the cluster.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
	// Urls: The urls of the cluster.
	Urls []string `json:"urls" yaml:"urls" schema:"urls"`
}

// CodeLanguage: The language code is written in.
type CodeLanguage string

const (
	// CodeLanguageGo represents the CodeLanguage `"go"`.
	CodeLanguageGo CodeLanguage = "go"
	// CodeLanguagePython represents the CodeLanguage `"python"`.
	CodeLanguagePython CodeLanguage = "python"
	// CodeLanguageNode represents the CodeLanguage `"node"`.
	CodeLanguageNode CodeLanguage = "node"
)

// CodeOutput: Output of the code being executed.
type CodeOutput struct {
	// OutputFiles: The contents of the files requested if they were passed.
	OutputFiles []OutputFile `json:"output_files" yaml:"output_files" schema:"output_files"`
	// Stderr: The stderr of the code.
	Stderr string `json:"stderr" yaml:"stderr" schema:"stderr"`
	// Stdout: The stdout of the code.
	Stdout string `json:"stdout" yaml:"stdout" schema:"stdout"`
}

// Commit: Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`.
type Commit struct {
	// Expected: Commit ID of external tool expected by dockerd as set at build time.
	Expected string `json:"expected" yaml:"expected" schema:"expected"`
	// ID: Actual commit ID of external tool.
	ID string `json:"id" yaml:"id" schema:"id"`
}

// Connection: Metadata about a pub-sub connection.
// This is mostly used for internal purposes and debugging.
type Connection struct {
	// AuthTimeout: The auth timeout of the server.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Cluster: Information about the cluster.
	Cluster Cluster `json:"cluster" yaml:"cluster" schema:"cluster"`
	// ConfigLoadTime: The time the configuration was loaded.
	ConfigLoadTime Time `json:"config_load_time" yaml:"config_load_time" schema:"config_load_time,required"`
	// Connections: The number of connections to the server.
	Connections int `json:"connections" yaml:"connections" schema:"connections"`
	// Cores: The CPU core usage of the server.
	Cores int `json:"cores" yaml:"cores" schema:"cores"`
	// Cpu:
	Cpu float64 `json:"cpu" yaml:"cpu" schema:"cpu"`
	// Gateway: Information about the gateway.
	Gateway Gateway `json:"gateway" yaml:"gateway" schema:"gateway"`
	// GitCommit: The git commit.
	GitCommit string `json:"git_commit" yaml:"git_commit" schema:"git_commit"`
	// Go: The go version.
	Go string `json:"go" yaml:"go" schema:"go"`
	// Gomaxprocs: `GOMAXPROCS` of the server.
	Gomaxprocs int `json:"gomaxprocs" yaml:"gomaxprocs" schema:"gomaxprocs"`
	// Host: The host of the server.
	Host IP `json:"host" yaml:"host" schema:"host,required"`
	// HttpBasePath: The http base path of the server.
	HttpBasePath string `json:"http_base_path" yaml:"http_base_path" schema:"http_base_path"`
	// HttpHost: The http host of the server.
	HttpHost string `json:"http_host" yaml:"http_host" schema:"http_host"`
	// HttpPort: The http port of the server.
	HttpPort int `json:"http_port" yaml:"http_port" schema:"http_port"`
	// HttpReqStats:
	HttpReqStats map[string]int `json:"http_req_stats" yaml:"http_req_stats" schema:"http_req_stats,required"`
	// HttpsPort: The https port of the server.
	HttpsPort int `json:"https_port" yaml:"https_port" schema:"https_port"`
	// InBytes: The count of inbound bytes for the server.
	InBytes int `json:"in_bytes" yaml:"in_bytes" schema:"in_bytes"`
	// InMsgs: The number of inbound messages for the server.
	InMsgs int `json:"in_msgs" yaml:"in_msgs" schema:"in_msgs"`
	// Jetstream: Jetstream information.
	Jetstream Jetstream `json:"jetstream" yaml:"jetstream" schema:"jetstream"`
	// Leaf: Information about leaf nodes.
	Leaf LeafNode `json:"leaf" yaml:"leaf" schema:"leaf"`
	// Leafnodes: The number of leaf nodes for the server.
	Leafnodes int `json:"leafnodes" yaml:"leafnodes" schema:"leafnodes"`
	// MaxConnections: The max connections of the server.
	MaxConnections int `json:"max_connections" yaml:"max_connections" schema:"max_connections"`
	// MaxControlLine: The max control line of the server.
	MaxControlLine int `json:"max_control_line" yaml:"max_control_line" schema:"max_control_line"`
	// MaxPayload: The max payload of the server.
	MaxPayload int `json:"max_payload" yaml:"max_payload" schema:"max_payload"`
	// MaxPending: The max pending of the server.
	MaxPending int `json:"max_pending" yaml:"max_pending" schema:"max_pending"`
	// Mem: The memory usage of the server.
	Mem int `json:"mem" yaml:"mem" schema:"mem"`
	// Now: The time now.
	Now Time `json:"now" yaml:"now" schema:"now,required"`
	// OutBytes: The count of outbound bytes for the server.
	OutBytes int `json:"out_bytes" yaml:"out_bytes" schema:"out_bytes"`
	// OutMsgs: The number of outbound messages for the server.
	OutMsgs int `json:"out_msgs" yaml:"out_msgs" schema:"out_msgs"`
	// PingInterval: The ping interval of the server.
	PingInterval int `json:"ping_interval" yaml:"ping_interval" schema:"ping_interval"`
	// PingMax: The ping max of the server.
	PingMax int `json:"ping_max" yaml:"ping_max" schema:"ping_max"`
	// Port: The port of the server.
	Port int `json:"port" yaml:"port" schema:"port"`
	// Proto: The protocol version.
	Proto int `json:"proto" yaml:"proto" schema:"proto"`
	// Remotes: The number of remotes for the server.
	Remotes int `json:"remotes" yaml:"remotes" schema:"remotes"`
	// Routes: The number of routes for the server.
	Routes int `json:"routes" yaml:"routes" schema:"routes"`
	// ServerID: The server ID.
	ServerID string `json:"server_id" yaml:"server_id" schema:"server_id"`
	// ServerName: The server name.
	ServerName string `json:"server_name" yaml:"server_name" schema:"server_name"`
	// SlowConsumers: The number of slow consumers for the server.
	SlowConsumers int `json:"slow_consumers" yaml:"slow_consumers" schema:"slow_consumers"`
	// Start: When the server was started.
	Start Time `json:"start" yaml:"start" schema:"start,required"`
	// Subscriptions: The number of subscriptions for the server.
	Subscriptions int `json:"subscriptions" yaml:"subscriptions" schema:"subscriptions"`
	// SystemAccount: The system account.
	SystemAccount string `json:"system_account" yaml:"system_account" schema:"system_account"`
	// TlsTimeout: The TLS timeout of the server.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
	// TotalConnections: The total number of connections to the server.
	TotalConnections int `json:"total_connections" yaml:"total_connections" schema:"total_connections"`
	// Uptime: The uptime of the server.
	Uptime string `json:"uptime" yaml:"uptime" schema:"uptime"`
	// Version: The version of the service.
	Version string `json:"version" yaml:"version" schema:"version"`
	// WriteDeadline: The write deadline of the server.
	WriteDeadline int `json:"write_deadline" yaml:"write_deadline" schema:"write_deadline"`
}

// CreatedAtSortMode: Supported set of sort modes for scanning by created_at only.
// Currently, we only support scanning in ascending order.
type CreatedAtSortMode string

const (
	// CreatedAtSortModeCreatedAtAscending represents the CreatedAtSortMode `"created-at-ascending"`.
	CreatedAtSortModeCreatedAtAscending CreatedAtSortMode = "created-at-ascending"
	// CreatedAtSortModeCreatedAtDescending represents the CreatedAtSortMode `"created-at-descending"`.
	CreatedAtSortModeCreatedAtDescending CreatedAtSortMode = "created-at-descending"
)

// Currency: Currency is the list of supported currencies.
// For more details see <https://support.stripe.com/questions/which-currencies-does-stripe-support>.
type Currency string

const (
	// CurrencyAed represents the Currency `"aed"`.
	CurrencyAed Currency = "aed"
	// CurrencyAfn represents the Currency `"afn"`.
	CurrencyAfn Currency = "afn"
	// CurrencyAll represents the Currency `"all"`.
	CurrencyAll Currency = "all"
	// CurrencyAmd represents the Currency `"amd"`.
	CurrencyAmd Currency = "amd"
	// CurrencyAng represents the Currency `"ang"`.
	CurrencyAng Currency = "ang"
	// CurrencyAoa represents the Currency `"aoa"`.
	CurrencyAoa Currency = "aoa"
	// CurrencyArs represents the Currency `"ars"`.
	CurrencyArs Currency = "ars"
	// CurrencyAud represents the Currency `"aud"`.
	CurrencyAud Currency = "aud"
	// CurrencyAwg represents the Currency `"awg"`.
	CurrencyAwg Currency = "awg"
	// CurrencyAzn represents the Currency `"azn"`.
	CurrencyAzn Currency = "azn"
	// CurrencyBam represents the Currency `"bam"`.
	CurrencyBam Currency = "bam"
	// CurrencyBbd represents the Currency `"bbd"`.
	CurrencyBbd Currency = "bbd"
	// CurrencyBdt represents the Currency `"bdt"`.
	CurrencyBdt Currency = "bdt"
	// CurrencyBgn represents the Currency `"bgn"`.
	CurrencyBgn Currency = "bgn"
	// CurrencyBif represents the Currency `"bif"`.
	CurrencyBif Currency = "bif"
	// CurrencyBmd represents the Currency `"bmd"`.
	CurrencyBmd Currency = "bmd"
	// CurrencyBnd represents the Currency `"bnd"`.
	CurrencyBnd Currency = "bnd"
	// CurrencyBob represents the Currency `"bob"`.
	CurrencyBob Currency = "bob"
	// CurrencyBrl represents the Currency `"brl"`.
	CurrencyBrl Currency = "brl"
	// CurrencyBsd represents the Currency `"bsd"`.
	CurrencyBsd Currency = "bsd"
	// CurrencyBwp represents the Currency `"bwp"`.
	CurrencyBwp Currency = "bwp"
	// CurrencyBzd represents the Currency `"bzd"`.
	CurrencyBzd Currency = "bzd"
	// CurrencyCad represents the Currency `"cad"`.
	CurrencyCad Currency = "cad"
	// CurrencyCdf represents the Currency `"cdf"`.
	CurrencyCdf Currency = "cdf"
	// CurrencyChf represents the Currency `"chf"`.
	CurrencyChf Currency = "chf"
	// CurrencyClp represents the Currency `"clp"`.
	CurrencyClp Currency = "clp"
	// CurrencyCny represents the Currency `"cny"`.
	CurrencyCny Currency = "cny"
	// CurrencyCop represents the Currency `"cop"`.
	CurrencyCop Currency = "cop"
	// CurrencyCrc represents the Currency `"crc"`.
	CurrencyCrc Currency = "crc"
	// CurrencyCve represents the Currency `"cve"`.
	CurrencyCve Currency = "cve"
	// CurrencyCzk represents the Currency `"czk"`.
	CurrencyCzk Currency = "czk"
	// CurrencyDjf represents the Currency `"djf"`.
	CurrencyDjf Currency = "djf"
	// CurrencyDkk represents the Currency `"dkk"`.
	CurrencyDkk Currency = "dkk"
	// CurrencyDop represents the Currency `"dop"`.
	CurrencyDop Currency = "dop"
	// CurrencyDzd represents the Currency `"dzd"`.
	CurrencyDzd Currency = "dzd"
	// CurrencyEek represents the Currency `"eek"`.
	CurrencyEek Currency = "eek"
	// CurrencyEgp represents the Currency `"egp"`.
	CurrencyEgp Currency = "egp"
	// CurrencyEtb represents the Currency `"etb"`.
	CurrencyEtb Currency = "etb"
	// CurrencyEur represents the Currency `"eur"`.
	CurrencyEur Currency = "eur"
	// CurrencyFjd represents the Currency `"fjd"`.
	CurrencyFjd Currency = "fjd"
	// CurrencyFkp represents the Currency `"fkp"`.
	CurrencyFkp Currency = "fkp"
	// CurrencyGbp represents the Currency `"gbp"`.
	CurrencyGbp Currency = "gbp"
	// CurrencyGel represents the Currency `"gel"`.
	CurrencyGel Currency = "gel"
	// CurrencyGip represents the Currency `"gip"`.
	CurrencyGip Currency = "gip"
	// CurrencyGmd represents the Currency `"gmd"`.
	CurrencyGmd Currency = "gmd"
	// CurrencyGnf represents the Currency `"gnf"`.
	CurrencyGnf Currency = "gnf"
	// CurrencyGtq represents the Currency `"gtq"`.
	CurrencyGtq Currency = "gtq"
	// CurrencyGyd represents the Currency `"gyd"`.
	CurrencyGyd Currency = "gyd"
	// CurrencyHkd represents the Currency `"hkd"`.
	CurrencyHkd Currency = "hkd"
	// CurrencyHnl represents the Currency `"hnl"`.
	CurrencyHnl Currency = "hnl"
	// CurrencyHrk represents the Currency `"hrk"`.
	CurrencyHrk Currency = "hrk"
	// CurrencyHtg represents the Currency `"htg"`.
	CurrencyHtg Currency = "htg"
	// CurrencyHuf represents the Currency `"huf"`.
	CurrencyHuf Currency = "huf"
	// CurrencyIdr represents the Currency `"idr"`.
	CurrencyIdr Currency = "idr"
	// CurrencyIls represents the Currency `"ils"`.
	CurrencyIls Currency = "ils"
	// CurrencyInr represents the Currency `"inr"`.
	CurrencyInr Currency = "inr"
	// CurrencyIsk represents the Currency `"isk"`.
	CurrencyIsk Currency = "isk"
	// CurrencyJmd represents the Currency `"jmd"`.
	CurrencyJmd Currency = "jmd"
	// CurrencyJpy represents the Currency `"jpy"`.
	CurrencyJpy Currency = "jpy"
	// CurrencyKes represents the Currency `"kes"`.
	CurrencyKes Currency = "kes"
	// CurrencyKgs represents the Currency `"kgs"`.
	CurrencyKgs Currency = "kgs"
	// CurrencyKhr represents the Currency `"khr"`.
	CurrencyKhr Currency = "khr"
	// CurrencyKmf represents the Currency `"kmf"`.
	CurrencyKmf Currency = "kmf"
	// CurrencyKrw represents the Currency `"krw"`.
	CurrencyKrw Currency = "krw"
	// CurrencyKyd represents the Currency `"kyd"`.
	CurrencyKyd Currency = "kyd"
	// CurrencyKzt represents the Currency `"kzt"`.
	CurrencyKzt Currency = "kzt"
	// CurrencyLak represents the Currency `"lak"`.
	CurrencyLak Currency = "lak"
	// CurrencyLbp represents the Currency `"lbp"`.
	CurrencyLbp Currency = "lbp"
	// CurrencyLkr represents the Currency `"lkr"`.
	CurrencyLkr Currency = "lkr"
	// CurrencyLrd represents the Currency `"lrd"`.
	CurrencyLrd Currency = "lrd"
	// CurrencyLsl represents the Currency `"lsl"`.
	CurrencyLsl Currency = "lsl"
	// CurrencyLtl represents the Currency `"ltl"`.
	CurrencyLtl Currency = "ltl"
	// CurrencyLvl represents the Currency `"lvl"`.
	CurrencyLvl Currency = "lvl"
	// CurrencyMad represents the Currency `"mad"`.
	CurrencyMad Currency = "mad"
	// CurrencyMdl represents the Currency `"mdl"`.
	CurrencyMdl Currency = "mdl"
	// CurrencyMga represents the Currency `"mga"`.
	CurrencyMga Currency = "mga"
	// CurrencyMkd represents the Currency `"mkd"`.
	CurrencyMkd Currency = "mkd"
	// CurrencyMnt represents the Currency `"mnt"`.
	CurrencyMnt Currency = "mnt"
	// CurrencyMop represents the Currency `"mop"`.
	CurrencyMop Currency = "mop"
	// CurrencyMro represents the Currency `"mro"`.
	CurrencyMro Currency = "mro"
	// CurrencyMur represents the Currency `"mur"`.
	CurrencyMur Currency = "mur"
	// CurrencyMvr represents the Currency `"mvr"`.
	CurrencyMvr Currency = "mvr"
	// CurrencyMwk represents the Currency `"mwk"`.
	CurrencyMwk Currency = "mwk"
	// CurrencyMxn represents the Currency `"mxn"`.
	CurrencyMxn Currency = "mxn"
	// CurrencyMyr represents the Currency `"myr"`.
	CurrencyMyr Currency = "myr"
	// CurrencyMzn represents the Currency `"mzn"`.
	CurrencyMzn Currency = "mzn"
	// CurrencyNad represents the Currency `"nad"`.
	CurrencyNad Currency = "nad"
	// CurrencyNgn represents the Currency `"ngn"`.
	CurrencyNgn Currency = "ngn"
	// CurrencyNio represents the Currency `"nio"`.
	CurrencyNio Currency = "nio"
	// CurrencyNok represents the Currency `"nok"`.
	CurrencyNok Currency = "nok"
	// CurrencyNpr represents the Currency `"npr"`.
	CurrencyNpr Currency = "npr"
	// CurrencyNzd represents the Currency `"nzd"`.
	CurrencyNzd Currency = "nzd"
	// CurrencyPab represents the Currency `"pab"`.
	CurrencyPab Currency = "pab"
	// CurrencyPen represents the Currency `"pen"`.
	CurrencyPen Currency = "pen"
	// CurrencyPgk represents the Currency `"pgk"`.
	CurrencyPgk Currency = "pgk"
	// CurrencyPhp represents the Currency `"php"`.
	CurrencyPhp Currency = "php"
	// CurrencyPkr represents the Currency `"pkr"`.
	CurrencyPkr Currency = "pkr"
	// CurrencyPln represents the Currency `"pln"`.
	CurrencyPln Currency = "pln"
	// CurrencyPyg represents the Currency `"pyg"`.
	CurrencyPyg Currency = "pyg"
	// CurrencyQar represents the Currency `"qar"`.
	CurrencyQar Currency = "qar"
	// CurrencyRon represents the Currency `"ron"`.
	CurrencyRon Currency = "ron"
	// CurrencyRsd represents the Currency `"rsd"`.
	CurrencyRsd Currency = "rsd"
	// CurrencyRub represents the Currency `"rub"`.
	CurrencyRub Currency = "rub"
	// CurrencyRwf represents the Currency `"rwf"`.
	CurrencyRwf Currency = "rwf"
	// CurrencySar represents the Currency `"sar"`.
	CurrencySar Currency = "sar"
	// CurrencySbd represents the Currency `"sbd"`.
	CurrencySbd Currency = "sbd"
	// CurrencyScr represents the Currency `"scr"`.
	CurrencyScr Currency = "scr"
	// CurrencySek represents the Currency `"sek"`.
	CurrencySek Currency = "sek"
	// CurrencySgd represents the Currency `"sgd"`.
	CurrencySgd Currency = "sgd"
	// CurrencyShp represents the Currency `"shp"`.
	CurrencyShp Currency = "shp"
	// CurrencySll represents the Currency `"sll"`.
	CurrencySll Currency = "sll"
	// CurrencySos represents the Currency `"sos"`.
	CurrencySos Currency = "sos"
	// CurrencySrd represents the Currency `"srd"`.
	CurrencySrd Currency = "srd"
	// CurrencyStd represents the Currency `"std"`.
	CurrencyStd Currency = "std"
	// CurrencySvc represents the Currency `"svc"`.
	CurrencySvc Currency = "svc"
	// CurrencySzl represents the Currency `"szl"`.
	CurrencySzl Currency = "szl"
	// CurrencyThb represents the Currency `"thb"`.
	CurrencyThb Currency = "thb"
	// CurrencyTjs represents the Currency `"tjs"`.
	CurrencyTjs Currency = "tjs"
	// CurrencyTop represents the Currency `"top"`.
	CurrencyTop Currency = "top"
	// CurrencyTry represents the Currency `"try"`.
	CurrencyTry Currency = "try"
	// CurrencyTtd represents the Currency `"ttd"`.
	CurrencyTtd Currency = "ttd"
	// CurrencyTwd represents the Currency `"twd"`.
	CurrencyTwd Currency = "twd"
	// CurrencyTzs represents the Currency `"tzs"`.
	CurrencyTzs Currency = "tzs"
	// CurrencyUah represents the Currency `"uah"`.
	CurrencyUah Currency = "uah"
	// CurrencyUgx represents the Currency `"ugx"`.
	CurrencyUgx Currency = "ugx"
	// CurrencyUsd represents the Currency `"usd"`.
	CurrencyUsd Currency = "usd"
	// CurrencyUyu represents the Currency `"uyu"`.
	CurrencyUyu Currency = "uyu"
	// CurrencyUzs represents the Currency `"uzs"`.
	CurrencyUzs Currency = "uzs"
	// CurrencyVef represents the Currency `"vef"`.
	CurrencyVef Currency = "vef"
	// CurrencyVnd represents the Currency `"vnd"`.
	CurrencyVnd Currency = "vnd"
	// CurrencyVuv represents the Currency `"vuv"`.
	CurrencyVuv Currency = "vuv"
	// CurrencyWst represents the Currency `"wst"`.
	CurrencyWst Currency = "wst"
	// CurrencyXaf represents the Currency `"xaf"`.
	CurrencyXaf Currency = "xaf"
	// CurrencyXcd represents the Currency `"xcd"`.
	CurrencyXcd Currency = "xcd"
	// CurrencyXof represents the Currency `"xof"`.
	CurrencyXof Currency = "xof"
	// CurrencyXpf represents the Currency `"xpf"`.
	CurrencyXpf Currency = "xpf"
	// CurrencyYer represents the Currency `"yer"`.
	CurrencyYer Currency = "yer"
	// CurrencyZar represents the Currency `"zar"`.
	CurrencyZar Currency = "zar"
	// CurrencyZmw represents the Currency `"zmw"`.
	CurrencyZmw Currency = "zmw"
)

// Customer: The resource representing a payment "Customer".
type Customer struct {
	// Address: The customer's address.
	Address NewAddress `json:"address" yaml:"address" schema:"address"`
	// Balance: Current balance, if any, being stored on the customer in the payments service.
	//
	// If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
	Balance float64 `json:"balance" yaml:"balance" schema:"balance"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency,required"`
	// Delinquent: When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed.
	//
	// When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by dunning, `delinquent` doesn't get reset to `false`.
	Delinquent bool `json:"delinquent" yaml:"delinquent" schema:"delinquent"`
	// Email: The customer's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Name: The customer's full name or business name.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The customer's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CustomerBalance: A balance for a user.
// This holds information about the financial balance for the user.
type CustomerBalance struct {
	// CreatedAt: The date and time the balance was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the balance.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MonthlyCreditsRemaining: The monthy credits remaining in the balance. This gets re-upped every month, but if the credits are not used for a month they do not carry over to the next month. It is a stable amount granted to the user per month.
	MonthlyCreditsRemaining float64 `json:"monthly_credits_remaining" yaml:"monthly_credits_remaining" schema:"monthly_credits_remaining,required"`
	// PrePayCashRemaining: The amount of pre-pay cash remaining in the balance. This number goes down as the user uses their pre-paid credits. The reason we track this amount is if a user ever wants to withdraw their pre-pay cash, we can use this amount to determine how much to give them. Say a user has $100 in pre-paid cash, their bill is worth, $50 after subtracting any other credits (like monthly etc.) Their bill is $50, their pre-pay cash remaining will be subtracted by 50 to pay the bill and their `pre_pay_credits_remaining` will be subtracted by 50 to pay the bill. This way if they want to withdraw money after, they can only withdraw $50 since that is the amount of cash they have remaining.
	PrePayCashRemaining float64 `json:"pre_pay_cash_remaining" yaml:"pre_pay_cash_remaining" schema:"pre_pay_cash_remaining,required"`
	// PrePayCreditsRemaining: The amount of credits remaining in the balance. This is typically the amount of cash * some multiplier they get for pre-paying their account. This number lowers every time a bill is paid with the balance. This number increases every time a user adds funds to their balance. This may be through a subscription or a one off payment.
	PrePayCreditsRemaining float64 `json:"pre_pay_credits_remaining" yaml:"pre_pay_credits_remaining" schema:"pre_pay_credits_remaining,required"`
	// TotalDue: This includes any outstanding, draft, or open invoices and any pending invoice items. This does not include any credits the user has on their account.
	TotalDue float64 `json:"total_due" yaml:"total_due" schema:"total_due,required"`
	// UpdatedAt: The date and time the balance was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID the balance belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// DeviceAccessTokenRequestForm: The form for a device access token request.
type DeviceAccessTokenRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
	// DeviceCode: The device code.
	DeviceCode UUID `json:"device_code" yaml:"device_code" schema:"device_code,required"`
	// GrantType: The grant type.
	GrantType OAuth2GrantType `json:"grant_type" yaml:"grant_type" schema:"grant_type,required"`
}

// DeviceAuthRequestForm: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
type DeviceAuthRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
}

// DeviceAuthVerifyParams: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.
type DeviceAuthVerifyParams struct {
	// UserCode: The user code.
	UserCode string `json:"user_code" yaml:"user_code" schema:"user_code,required"`
}

// DockerSystemInfo: Docker system info.
type DockerSystemInfo struct {
	// Architecture: Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
	Architecture string `json:"architecture" yaml:"architecture" schema:"architecture"`
	// BridgeNfIp6Tables: Indicates if `bridge-nf-call-ip6tables` is available on the host.
	BridgeNfIp6Tables bool `json:"bridge_nf_ip6tables" yaml:"bridge_nf_ip6tables" schema:"bridge_nf_ip6tables"`
	// BridgeNfIptables: Indicates if `bridge-nf-call-iptables` is available on the host.
	BridgeNfIptables bool `json:"bridge_nf_iptables" yaml:"bridge_nf_iptables" schema:"bridge_nf_iptables"`
	// CgroupDriver: The driver to use for managing cgroups.
	CgroupDriver SystemInfoCgroupDriverEnum `json:"cgroup_driver" yaml:"cgroup_driver" schema:"cgroup_driver"`
	// CgroupVersion: The version of the cgroup.
	CgroupVersion SystemInfoCgroupVersionEnum `json:"cgroup_version" yaml:"cgroup_version" schema:"cgroup_version"`
	// ClusterAdvertise: The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.
	//
	// **Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty.
	ClusterAdvertise string `json:"cluster_advertise" yaml:"cluster_advertise" schema:"cluster_advertise"`
	// ClusterStore: URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.
	//
	// **Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty.
	ClusterStore string `json:"cluster_store" yaml:"cluster_store" schema:"cluster_store"`
	// ContainerdCommit:
	ContainerdCommit Commit `json:"containerd_commit" yaml:"containerd_commit" schema:"containerd_commit"`
	// Containers: Total number of containers on the host.
	Containers int `json:"containers" yaml:"containers" schema:"containers"`
	// ContainersPaused: Number of containers with status `\"paused\"`.
	ContainersPaused int `json:"containers_paused" yaml:"containers_paused" schema:"containers_paused"`
	// ContainersRunning: Number of containers with status `\"running\"`.
	ContainersRunning int `json:"containers_running" yaml:"containers_running" schema:"containers_running"`
	// ContainersStopped: Number of containers with status `\"stopped\"`.
	ContainersStopped int `json:"containers_stopped" yaml:"containers_stopped" schema:"containers_stopped"`
	// CpuCfsPeriod: Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
	CpuCfsPeriod bool `json:"cpu_cfs_period" yaml:"cpu_cfs_period" schema:"cpu_cfs_period"`
	// CpuCfsQuota: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
	CpuCfsQuota bool `json:"cpu_cfs_quota" yaml:"cpu_cfs_quota" schema:"cpu_cfs_quota"`
	// CpuSet: Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
	CpuSet bool `json:"cpu_set" yaml:"cpu_set" schema:"cpu_set"`
	// CpuShares: Indicates if CPU Shares limiting is supported by the host.
	CpuShares bool `json:"cpu_shares" yaml:"cpu_shares" schema:"cpu_shares"`
	// Debug: Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
	Debug bool `json:"debug" yaml:"debug" schema:"debug"`
	// DefaultAddressPools: List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools.
	DefaultAddressPools []SystemInfoDefaultAddressPools `json:"default_address_pools" yaml:"default_address_pools" schema:"default_address_pools"`
	// DefaultRuntime: Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.
	DefaultRuntime string `json:"default_runtime" yaml:"default_runtime" schema:"default_runtime"`
	// DockerRootDir: Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.
	DockerRootDir string `json:"docker_root_dir" yaml:"docker_root_dir" schema:"docker_root_dir"`
	// Driver: Name of the storage driver in use.
	Driver string `json:"driver" yaml:"driver" schema:"driver"`
	// DriverStatus: Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.
	//
	// **Note**: The information returned in this field, including the formatting of values and labels, should not be considered stable, and may change without notice.
	DriverStatus []string `json:"driver_status" yaml:"driver_status" schema:"driver_status"`
	// ExperimentalBuild: Indicates if experimental features are enabled on the daemon.
	ExperimentalBuild bool `json:"experimental_build" yaml:"experimental_build" schema:"experimental_build"`
	// HttpProxy: HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
	HttpProxy string `json:"http_proxy" yaml:"http_proxy" schema:"http_proxy"`
	// HttpsProxy: HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
	HttpsProxy string `json:"https_proxy" yaml:"https_proxy" schema:"https_proxy"`
	// ID: Unique identifier of the daemon.
	//
	// **Note**: The format of the ID itself is not part of the API, and should not be considered stable.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Images: Total number of images on the host. Both _tagged_ and _untagged_ (dangling) images are counted.
	Images int `json:"images" yaml:"images" schema:"images"`
	// IndexServerAddress: Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.
	IndexServerAddress string `json:"index_server_address" yaml:"index_server_address" schema:"index_server_address"`
	// InitBinary: Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
	InitBinary string `json:"init_binary" yaml:"init_binary" schema:"init_binary"`
	// InitCommit:
	InitCommit Commit `json:"init_commit" yaml:"init_commit" schema:"init_commit"`
	// Ipv4Forwarding: Indicates IPv4 forwarding is enabled.
	Ipv4Forwarding bool `json:"ipv4_forwarding" yaml:"ipv4_forwarding" schema:"ipv4_forwarding"`
	// Isolation: Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.
	Isolation SystemInfoIsolationEnum `json:"isolation" yaml:"isolation" schema:"isolation"`
	// KernelMemory: Indicates if the host has kernel memory limit support enabled.
	//
	// **Deprecated**: This field is deprecated as the kernel 5.4 deprecated `kmem.limit_in_bytes`.
	KernelMemory bool `json:"kernel_memory" yaml:"kernel_memory" schema:"kernel_memory"`
	// KernelMemoryTcp: Indicates if the host has kernel memory TCP limit support enabled.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
	KernelMemoryTcp bool `json:"kernel_memory_tcp" yaml:"kernel_memory_tcp" schema:"kernel_memory_tcp"`
	// KernelVersion: Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.
	KernelVersion string `json:"kernel_version" yaml:"kernel_version" schema:"kernel_version"`
	// Labels: User-defined labels (key/value metadata) as set on the daemon.
	//
	// **Note**: When part of a Swarm, nodes can both have _daemon_ labels, set through the daemon configuration, and _node_ labels, set from a manager node in the Swarm. Node labels are not included in this field. Node labels can be retrieved using the `/nodes/(id)` endpoint on a manager node in the Swarm.
	Labels []string `json:"labels" yaml:"labels" schema:"labels"`
	// LiveRestoreEnabled: Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.
	LiveRestoreEnabled bool `json:"live_restore_enabled" yaml:"live_restore_enabled" schema:"live_restore_enabled"`
	// LoggingDriver: The logging driver to use as a default for new containers.
	LoggingDriver string `json:"logging_driver" yaml:"logging_driver" schema:"logging_driver"`
	// MemTotal: Total amount of physical memory available on the host, in bytes.
	MemTotal int `json:"mem_total" yaml:"mem_total" schema:"mem_total"`
	// MemoryLimit: Indicates if the host has memory limit support enabled.
	MemoryLimit bool `json:"memory_limit" yaml:"memory_limit" schema:"memory_limit"`
	// NEventsListener: Number of event listeners subscribed.
	NEventsListener int `json:"n_events_listener" yaml:"n_events_listener" schema:"n_events_listener"`
	// NFd: The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.
	NFd int `json:"n_fd" yaml:"n_fd" schema:"n_fd"`
	// Name: Hostname of the host.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Ncpu: The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.
	Ncpu int `json:"ncpu" yaml:"ncpu" schema:"ncpu"`
	// NoProxy: Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.
	NoProxy string `json:"no_proxy" yaml:"no_proxy" schema:"no_proxy"`
	// OomKillDisable: Indicates if OOM killer disable is supported on the host.
	OomKillDisable bool `json:"oom_kill_disable" yaml:"oom_kill_disable" schema:"oom_kill_disable"`
	// OperatingSystem: Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"
	OperatingSystem string `json:"operating_system" yaml:"operating_system" schema:"operating_system"`
	// OsType: Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
	OsType string `json:"os_type" yaml:"os_type" schema:"os_type"`
	// OsVersion: Version of the host's operating system
	//
	// **Note**: The information returned in this field, including its very existence, and the formatting of values, should not be considered stable, and may change without notice.
	OsVersion string `json:"os_version" yaml:"os_version" schema:"os_version"`
	// PidsLimit: Indicates if the host kernel has PID limit support enabled.
	PidsLimit bool `json:"pids_limit" yaml:"pids_limit" schema:"pids_limit"`
	// Plugins:
	Plugins PluginsInfo `json:"plugins" yaml:"plugins" schema:"plugins"`
	// ProductLicense: Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included.
	ProductLicense string `json:"product_license" yaml:"product_license" schema:"product_license"`
	// RegistryConfig:
	RegistryConfig RegistryServiceConfig `json:"registry_config" yaml:"registry_config" schema:"registry_config"`
	// RuncCommit:
	RuncCommit Commit `json:"runc_commit" yaml:"runc_commit" schema:"runc_commit"`
	// Runtimes:
	Runtimes map[string]Runtime `json:"runtimes" yaml:"runtimes" schema:"runtimes"`
	// SecurityOptions: List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.
	SecurityOptions []string `json:"security_options" yaml:"security_options" schema:"security_options"`
	// ServerVersion: Version string of the daemon. **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) returns the Swarm version instead of the daemon  version, for example `swarm/1.2.8`.
	ServerVersion string `json:"server_version" yaml:"server_version" schema:"server_version"`
	// SwapLimit: Indicates if the host has memory swap limit support enabled.
	SwapLimit bool `json:"swap_limit" yaml:"swap_limit" schema:"swap_limit"`
	// SystemTime: The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.
	SystemTime string `json:"system_time" yaml:"system_time" schema:"system_time"`
	// Warnings: List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user.
	Warnings []string `json:"warnings" yaml:"warnings" schema:"warnings"`
}

// EmailAuthenticationForm: The body of the form for email authentication.
type EmailAuthenticationForm struct {
	// CallbackUrl: The URL to redirect back to after we have authenticated.
	CallbackUrl URL `json:"callback_url" yaml:"callback_url" schema:"callback_url"`
	// Email: The user's email.
	Email string `json:"email" yaml:"email" schema:"email,required"`
}

// EngineMetadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type EngineMetadata struct {
	// AsyncJobsRunning: If any async job is currently running.
	AsyncJobsRunning bool `json:"async_jobs_running" yaml:"async_jobs_running" schema:"async_jobs_running,required"`
	// Cache: Metadata about our cache.
	Cache CacheMetadata `json:"cache" yaml:"cache" schema:"cache,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// Fs: Metadata about our file system.
	Fs FileSystemMetadata `json:"fs" yaml:"fs" schema:"fs,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
	// Pubsub: Metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub" yaml:"pubsub" schema:"pubsub,required"`
}

// Environment: The environment the server is running in.
type Environment string

const (
	// EnvironmentDEVELOPMENT represents the Environment `"DEVELOPMENT"`.
	EnvironmentDEVELOPMENT Environment = "DEVELOPMENT"
	// EnvironmentPREVIEW represents the Environment `"PREVIEW"`.
	EnvironmentPREVIEW Environment = "PREVIEW"
	// EnvironmentPRODUCTION represents the Environment `"PRODUCTION"`.
	EnvironmentPRODUCTION Environment = "PRODUCTION"
)

// Error: Error information from a response.
type Error struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}

// ExecutorMetadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type ExecutorMetadata struct {
	// DockerInfo: Information about the docker daemon.
	DockerInfo DockerSystemInfo `json:"docker_info" yaml:"docker_info" schema:"docker_info,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
}

// ExtendedUser: Extended user information.
// This is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: MailChimp, Stripe, and Zendesk.
type ExtendedUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// MailchimpID: The user's MailChimp ID. This is mostly used for internal mapping.
	MailchimpID string `json:"mailchimp_id" yaml:"mailchimp_id" schema:"mailchimp_id"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// StripeID: The user's Stripe ID. This is mostly used for internal mapping.
	StripeID string `json:"stripe_id" yaml:"stripe_id" schema:"stripe_id"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// ZendeskID: The user's Zendesk ID. This is mostly used for internal mapping.
	ZendeskID string `json:"zendesk_id" yaml:"zendesk_id" schema:"zendesk_id"`
}

// ExtendedUserResultsPage: A single page of results
type ExtendedUserResultsPage struct {
	// Items: list of items on this page of results
	Items []ExtendedUser `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// FileConversion: A file conversion.
type FileConversion struct {
	// CompletedAt: The time and date the file conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the file conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the file conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Output: The converted file, if completed, base64 encoded.
	Output Base64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileOutputFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the file conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the file conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the file conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the file conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileDensity: A file density result.
type FileDensity struct {
	// CompletedAt: The time and date the density was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the density was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the density request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// SrcFormat: The source format of the file.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the density was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the density.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the density was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the density.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileMass: A file mass result.
type FileMass struct {
	// CompletedAt: The time and date the mass was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the mass was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the mass request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// SrcFormat: The source format of the file.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the mass was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the mass.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the mass was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the mass.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileOutputFormat: The valid types of output file formats.
type FileOutputFormat string

const (
	// FileOutputFormatStl represents the FileOutputFormat `"stl"`.
	FileOutputFormatStl FileOutputFormat = "stl"
	// FileOutputFormatObj represents the FileOutputFormat `"obj"`.
	FileOutputFormatObj FileOutputFormat = "obj"
	// FileOutputFormatDae represents the FileOutputFormat `"dae"`.
	FileOutputFormatDae FileOutputFormat = "dae"
	// FileOutputFormatStep represents the FileOutputFormat `"step"`.
	FileOutputFormatStep FileOutputFormat = "step"
	// FileOutputFormatFbx represents the FileOutputFormat `"fbx"`.
	FileOutputFormatFbx FileOutputFormat = "fbx"
	// FileOutputFormatFbxb represents the FileOutputFormat `"fbxb"`.
	FileOutputFormatFbxb FileOutputFormat = "fbxb"
)

// FileSourceFormat: The valid types of source file formats.
type FileSourceFormat string

const (
	// FileSourceFormatStl represents the FileSourceFormat `"stl"`.
	FileSourceFormatStl FileSourceFormat = "stl"
	// FileSourceFormatObj represents the FileSourceFormat `"obj"`.
	FileSourceFormatObj FileSourceFormat = "obj"
	// FileSourceFormatDae represents the FileSourceFormat `"dae"`.
	FileSourceFormatDae FileSourceFormat = "dae"
	// FileSourceFormatStep represents the FileSourceFormat `"step"`.
	FileSourceFormatStep FileSourceFormat = "step"
	// FileSourceFormatFbx represents the FileSourceFormat `"fbx"`.
	FileSourceFormatFbx FileSourceFormat = "fbx"
)

// FileSystemMetadata: Metadata about our file system.
// This is mostly used for internal purposes and debugging.
type FileSystemMetadata struct {
	// Ok: If the file system passed a sanity check.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// FileVolume: A file volume result.
type FileVolume struct {
	// CompletedAt: The time and date the volume was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the volume was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the volume request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileSourceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the volume was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the volume.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the volume was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the volume.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// Gateway: Gateway information.
type Gateway struct {
	// AuthTimeout: The auth timeout of the gateway.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Host: The host of the gateway.
	Host string `json:"host" yaml:"host" schema:"host"`
	// Name: The name of the gateway.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Port: The port of the gateway.
	Port int `json:"port" yaml:"port" schema:"port"`
	// TlsTimeout: The TLS timeout for the gateway.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
}

// IndexInfo: IndexInfo contains information about a registry.
type IndexInfo struct {
	// Mirrors: List of mirrors, expressed as URIs.
	Mirrors []string `json:"mirrors" yaml:"mirrors" schema:"mirrors"`
	// Name: Name of the registry, such as \"docker.io\".
	Name string `json:"name" yaml:"name" schema:"name"`
	// Official: Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
	Official bool `json:"official" yaml:"official" schema:"official"`
	// Secure: Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.
	//
	// **Warning**: Insecure registries can be useful when running a local registry. However, because its use creates security vulnerabilities it should ONLY be enabled for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option.
	Secure bool `json:"secure" yaml:"secure" schema:"secure"`
}

// Invoice: An invoice.
type Invoice struct {
	// AmountDue: Final amount due at this time for this invoice.
	//
	// If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
	AmountDue float64 `json:"amount_due" yaml:"amount_due" schema:"amount_due"`
	// AmountPaid: The amount, in USD, that was paid.
	AmountPaid float64 `json:"amount_paid" yaml:"amount_paid" schema:"amount_paid"`
	// AmountRemaining: The amount remaining, in USD, that is due.
	AmountRemaining float64 `json:"amount_remaining" yaml:"amount_remaining" schema:"amount_remaining"`
	// AttemptCount: Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.
	//
	// Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
	AttemptCount int `json:"attempt_count" yaml:"attempt_count" schema:"attempt_count"`
	// Attempted: Whether an attempt has been made to pay the invoice.
	//
	// An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
	Attempted bool `json:"attempted" yaml:"attempted" schema:"attempted"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency,required"`
	// CustomerEmail: The email address for the customer. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.
	CustomerEmail string `json:"customer_email" yaml:"customer_email" schema:"customer_email"`
	// CustomerID: Customer ID. The unique identifier for the customer this invoice belongs to. This is the customer ID in the payments service, not our database customer ID.
	CustomerID string `json:"customer_id" yaml:"customer_id" schema:"customer_id"`
	// DefaultPaymentMethod: Default payment method.
	DefaultPaymentMethod string `json:"default_payment_method" yaml:"default_payment_method" schema:"default_payment_method"`
	// Description: Description of the invoice.
	Description string `json:"description" yaml:"description" schema:"description"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Lines: The individual line items that make up the invoice.
	//
	// `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
	Lines []InvoiceLineItem `json:"lines" yaml:"lines" schema:"lines"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Number: A unique, identifying string that appears on emails sent to the customer for this invoice.
	Number string `json:"number" yaml:"number" schema:"number"`
	// Paid: Whether payment was successfully collected for this invoice.
	//
	// An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	Paid bool `json:"paid" yaml:"paid" schema:"paid"`
	// Pdf: The link to download the PDF for the invoice.
	Pdf URL `json:"pdf" yaml:"pdf" schema:"pdf"`
	// ReceiptNumber: This is the transaction number that appears on email receipts sent for this invoice.
	ReceiptNumber string `json:"receipt_number" yaml:"receipt_number" schema:"receipt_number"`
	// StatementDescriptor: Extra information about an invoice for the customer's credit card statement.
	StatementDescriptor string `json:"statement_descriptor" yaml:"statement_descriptor" schema:"statement_descriptor"`
	// Status: The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
	//
	// [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview).
	Status InvoiceStatus `json:"status" yaml:"status" schema:"status"`
	// Subtotal: Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied.
	//
	// Item discounts are already incorporated.
	Subtotal float64 `json:"subtotal" yaml:"subtotal" schema:"subtotal"`
	// Tax: The amount of tax on this invoice.
	//
	// This is the sum of all the tax amounts on this invoice.
	Tax float64 `json:"tax" yaml:"tax" schema:"tax"`
	// Total: Total after discounts and taxes.
	Total float64 `json:"total" yaml:"total" schema:"total"`
	// Url: The URL for the hosted invoice page, which allows customers to view and pay an invoice.
	Url URL `json:"url" yaml:"url" schema:"url"`
}

// InvoiceLineItem: An invoice line item.
type InvoiceLineItem struct {
	// Amount: The amount, in USD.
	Amount float64 `json:"amount" yaml:"amount" schema:"amount"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency,required"`
	// Description: The description.
	Description string `json:"description" yaml:"description" schema:"description"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// InvoiceItem: The ID of the invoice item associated with this line item if any.
	InvoiceItem string `json:"invoice_item" yaml:"invoice_item" schema:"invoice_item"`
	// Metadata: Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
	//
	// Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
}

// InvoiceStatus: An enum representing the possible values of an `Invoice`'s `status` field.
type InvoiceStatus string

const (
	// InvoiceStatusDeleted represents the InvoiceStatus `"deleted"`.
	InvoiceStatusDeleted InvoiceStatus = "deleted"
	// InvoiceStatusDraft represents the InvoiceStatus `"draft"`.
	InvoiceStatusDraft InvoiceStatus = "draft"
	// InvoiceStatusOpen represents the InvoiceStatus `"open"`.
	InvoiceStatusOpen InvoiceStatus = "open"
	// InvoiceStatusPaid represents the InvoiceStatus `"paid"`.
	InvoiceStatusPaid InvoiceStatus = "paid"
	// InvoiceStatusUncollectible represents the InvoiceStatus `"uncollectible"`.
	InvoiceStatusUncollectible InvoiceStatus = "uncollectible"
	// InvoiceStatusVoid represents the InvoiceStatus `"void"`.
	InvoiceStatusVoid InvoiceStatus = "void"
)

// Jetstream: Jetstream information.
type Jetstream struct {
	// Config: The Jetstream config.
	Config JetstreamConfig `json:"config" yaml:"config" schema:"config"`
	// Meta: Meta information about the cluster.
	Meta MetaClusterInfo `json:"meta" yaml:"meta" schema:"meta"`
	// Stats: Jetstream statistics.
	Stats JetstreamStats `json:"stats" yaml:"stats" schema:"stats"`
}

// JetstreamAPIStats: Jetstream API statistics.
type JetstreamAPIStats struct {
	// Errors: The number of errors.
	Errors int `json:"errors" yaml:"errors" schema:"errors"`
	// Inflight: The number of inflight requests.
	Inflight int `json:"inflight" yaml:"inflight" schema:"inflight"`
	// Total: The number of requests.
	Total int `json:"total" yaml:"total" schema:"total"`
}

// JetstreamConfig: Jetstream configuration.
type JetstreamConfig struct {
	// Domain: The domain.
	Domain string `json:"domain" yaml:"domain" schema:"domain"`
	// MaxMemory: The max memory.
	MaxMemory int `json:"max_memory" yaml:"max_memory" schema:"max_memory"`
	// MaxStorage: The max storage.
	MaxStorage int `json:"max_storage" yaml:"max_storage" schema:"max_storage"`
	// StoreDir: The store directory.
	StoreDir string `json:"store_dir" yaml:"store_dir" schema:"store_dir"`
}

// JetstreamStats: Jetstream statistics.
type JetstreamStats struct {
	// Accounts: The number of accounts.
	Accounts int `json:"accounts" yaml:"accounts" schema:"accounts"`
	// API: API stats.
	API JetstreamAPIStats `json:"api" yaml:"api" schema:"api"`
	// HaAssets: The number of HA assets.
	HaAssets int `json:"ha_assets" yaml:"ha_assets" schema:"ha_assets"`
	// Memory: The memory used by the Jetstream server.
	Memory int `json:"memory" yaml:"memory" schema:"memory"`
	// ReservedMemory: The reserved memory for the Jetstream server.
	ReservedMemory int `json:"reserved_memory" yaml:"reserved_memory" schema:"reserved_memory"`
	// ReservedStore: The reserved storage for the Jetstream server.
	ReservedStore int `json:"reserved_store" yaml:"reserved_store" schema:"reserved_store"`
	// Store: The storage used by the Jetstream server.
	Store int `json:"store" yaml:"store" schema:"store"`
}

// LeafNode: Leaf node information.
type LeafNode struct {
	// AuthTimeout: The auth timeout of the leaf node.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Host: The host of the leaf node.
	Host string `json:"host" yaml:"host" schema:"host"`
	// Port: The port of the leaf node.
	Port int `json:"port" yaml:"port" schema:"port"`
	// TlsTimeout: The TLS timeout for the leaf node.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
}

// MetaClusterInfo: Jetstream statistics.
type MetaClusterInfo struct {
	// ClusterSize: The size of the cluster.
	ClusterSize int `json:"cluster_size" yaml:"cluster_size" schema:"cluster_size"`
	// Leader: The leader of the cluster.
	Leader string `json:"leader" yaml:"leader" schema:"leader"`
	// Name: The name of the cluster.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// Metadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type Metadata struct {
	// Cache: Metadata about our cache.
	Cache CacheMetadata `json:"cache" yaml:"cache" schema:"cache,required"`
	// Engine: Metadata about our engine API connection.
	Engine EngineMetadata `json:"engine" yaml:"engine" schema:"engine,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// Executor: Metadata about our executor API connection.
	Executor ExecutorMetadata `json:"executor" yaml:"executor" schema:"executor,required"`
	// Fs: Metadata about our file system.
	Fs FileSystemMetadata `json:"fs" yaml:"fs" schema:"fs,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
	// Pubsub: Metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub" yaml:"pubsub" schema:"pubsub,required"`
}

// Method: The Request Method (VERB)
// This type also contains constants for a number of common HTTP methods such as GET, POST, etc.
//
// Currently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions.
type Method string

const (
	// MethodOPTIONS represents the Method `"OPTIONS"`.
	MethodOPTIONS Method = "OPTIONS"
	// MethodGET represents the Method `"GET"`.
	MethodGET Method = "GET"
	// MethodPOST represents the Method `"POST"`.
	MethodPOST Method = "POST"
	// MethodPUT represents the Method `"PUT"`.
	MethodPUT Method = "PUT"
	// MethodDELETE represents the Method `"DELETE"`.
	MethodDELETE Method = "DELETE"
	// MethodHEAD represents the Method `"HEAD"`.
	MethodHEAD Method = "HEAD"
	// MethodTRACE represents the Method `"TRACE"`.
	MethodTRACE Method = "TRACE"
	// MethodCONNECT represents the Method `"CONNECT"`.
	MethodCONNECT Method = "CONNECT"
	// MethodPATCH represents the Method `"PATCH"`.
	MethodPATCH Method = "PATCH"
	// MethodEXTENSION represents the Method `"EXTENSION"`.
	MethodEXTENSION Method = "EXTENSION"
)

// NewAddress: The struct that is used to create a new record. This is automatically generated and has all the same fields as the main struct only it is missing the `id`.
type NewAddress struct {
	// City: The city component.
	City string `json:"city" yaml:"city" schema:"city"`
	// Country: The country component.
	Country string `json:"country" yaml:"country" schema:"country"`
	// State: The state component.
	State string `json:"state" yaml:"state" schema:"state"`
	// Street1: The first street component.
	Street1 string `json:"street1" yaml:"street1" schema:"street1"`
	// Street2: The second street component.
	Street2 string `json:"street2" yaml:"street2" schema:"street2"`
	// UserID: The user ID that this address belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Zip: The zip component.
	Zip string `json:"zip" yaml:"zip" schema:"zip"`
}

// OAuth2ClientInfo: Information about an OAuth 2.0 client.
type OAuth2ClientInfo struct {
	// CsrfToken: Value used for [CSRF](https://tools.ietf.org/html/rfc6749#section-10.12) protection via the `state` parameter.
	CsrfToken string `json:"csrf_token" yaml:"csrf_token" schema:"csrf_token"`
	// PkceCodeVerifier: Code Verifier used for [PKCE]((https://tools.ietf.org/html/rfc7636)) protection via the `code_verifier` parameter. The value must have a minimum length of 43 characters and a maximum length of 128 characters.  Each character must be ASCII alphanumeric or one of the characters "-" / "." / "_" / "~".
	PkceCodeVerifier string `json:"pkce_code_verifier" yaml:"pkce_code_verifier" schema:"pkce_code_verifier"`
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// OAuth2GrantType: An OAuth 2.0 Grant Type. These are documented here: <https://oauth.net/2/grant-types/>.
type OAuth2GrantType string

const (
	// OAuth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode represents the OAuth2GrantType `"urn:ietf:params:oauth:grant-type:device_code"`.
	OAuth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode OAuth2GrantType = "urn:ietf:params:oauth:grant-type:device_code"
)

// OutputFile: Output file contents.
type OutputFile struct {
	// Contents: The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON.
	Contents string `json:"contents" yaml:"contents" schema:"contents"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// PaymentIntent: A payment intent response.
type PaymentIntent struct {
	// ClientSecret: The client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
	ClientSecret string `json:"client_secret" yaml:"client_secret" schema:"client_secret,required"`
}

// PaymentMethod: A payment method.
type PaymentMethod struct {
	// BillingInfo: The billing info for the payment method.
	BillingInfo BillingInfo `json:"billing_info" yaml:"billing_info" schema:"billing_info,required"`
	// Card: The card, if it is one. For our purposes, this is the only type of payment method that we support.
	Card CardDetails `json:"card" yaml:"card" schema:"card"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Type: The type of payment method.
	Type PaymentMethodType `json:"type" yaml:"type" schema:"type,required"`
}

// PaymentMethodCardChecks: Card checks.
type PaymentMethodCardChecks struct {
	// AddressLine1Check: If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressLine1Check string `json:"address_line1_check" yaml:"address_line1_check" schema:"address_line1_check"`
	// AddressPostalCodeCheck: If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressPostalCodeCheck string `json:"address_postal_code_check" yaml:"address_postal_code_check" schema:"address_postal_code_check"`
	// CvcCheck: If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	CvcCheck string `json:"cvc_check" yaml:"cvc_check" schema:"cvc_check"`
}

// PaymentMethodType: An enum representing the possible values of an `PaymentMethod`'s `type` field.
type PaymentMethodType string

const (
	// PaymentMethodTypeCard represents the PaymentMethodType `"card"`.
	PaymentMethodTypeCard PaymentMethodType = "card"
)

// PhysicsConstant: A physics constant.
type PhysicsConstant struct {
	// CompletedAt: The time and date the constant was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// Constant: The constant we are returning.
	Constant PhysicsConstantName `json:"constant" yaml:"constant" schema:"constant,required"`
	// CreatedAt: The time and date the constant was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the constant request.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// StartedAt: The time and date the constant was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the constant.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the constant was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the constant.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Value: The resulting value of the constant.
	Value float64 `json:"value" yaml:"value" schema:"value"`
}

// PhysicsConstantName: The valid types of phys constant names.
type PhysicsConstantName string

const (
	// PhysicsConstantNamePi represents the PhysicsConstantName `"pi"`.
	PhysicsConstantNamePi PhysicsConstantName = "pi"
	// PhysicsConstantNameC represents the PhysicsConstantName `"c"`.
	PhysicsConstantNameC PhysicsConstantName = "c"
	// PhysicsConstantNameSpeedOfLight represents the PhysicsConstantName `"speed_of_light"`.
	PhysicsConstantNameSpeedOfLight PhysicsConstantName = "speed_of_light"
	// PhysicsConstantNameG represents the PhysicsConstantName `"G"`.
	PhysicsConstantNameG PhysicsConstantName = "G"
	// PhysicsConstantNameNewtonianGraviation represents the PhysicsConstantName `"newtonian_graviation"`.
	PhysicsConstantNameNewtonianGraviation PhysicsConstantName = "newtonian_graviation"
	// PhysicsConstantNameH represents the PhysicsConstantName `"h"`.
	PhysicsConstantNameH PhysicsConstantName = "h"
	// PhysicsConstantNamePlankConst represents the PhysicsConstantName `"plank_const"`.
	PhysicsConstantNamePlankConst PhysicsConstantName = "plank_const"
	// PhysicsConstantNameMu0 represents the PhysicsConstantName `"mu_0"`.
	PhysicsConstantNameMu0 PhysicsConstantName = "mu_0"
	// PhysicsConstantNameVacuumPermeability represents the PhysicsConstantName `"vacuum_permeability"`.
	PhysicsConstantNameVacuumPermeability PhysicsConstantName = "vacuum_permeability"
	// PhysicsConstantNameE0 represents the PhysicsConstantName `"E_0"`.
	PhysicsConstantNameE0 PhysicsConstantName = "E_0"
	// PhysicsConstantNameVacuumPermitivity represents the PhysicsConstantName `"vacuum_permitivity"`.
	PhysicsConstantNameVacuumPermitivity PhysicsConstantName = "vacuum_permitivity"
	// PhysicsConstantNameZ0 represents the PhysicsConstantName `"Z_0"`.
	PhysicsConstantNameZ0 PhysicsConstantName = "Z_0"
	// PhysicsConstantNameVacuumImpedance represents the PhysicsConstantName `"vacuum_impedance"`.
	PhysicsConstantNameVacuumImpedance PhysicsConstantName = "vacuum_impedance"
	// PhysicsConstantNameKE represents the PhysicsConstantName `"k_e"`.
	PhysicsConstantNameKE PhysicsConstantName = "k_e"
	// PhysicsConstantNameCoulombConst represents the PhysicsConstantName `"coulomb_const"`.
	PhysicsConstantNameCoulombConst PhysicsConstantName = "coulomb_const"
	// PhysicsConstantNameE represents the PhysicsConstantName `"e"`.
	PhysicsConstantNameE PhysicsConstantName = "e"
	// PhysicsConstantNameElementaryCharge represents the PhysicsConstantName `"elementary_charge"`.
	PhysicsConstantNameElementaryCharge PhysicsConstantName = "elementary_charge"
	// PhysicsConstantNameME represents the PhysicsConstantName `"m_e"`.
	PhysicsConstantNameME PhysicsConstantName = "m_e"
	// PhysicsConstantNameElectronMass represents the PhysicsConstantName `"electron_mass"`.
	PhysicsConstantNameElectronMass PhysicsConstantName = "electron_mass"
	// PhysicsConstantNameMP represents the PhysicsConstantName `"m_p"`.
	PhysicsConstantNameMP PhysicsConstantName = "m_p"
	// PhysicsConstantNameProtonMass represents the PhysicsConstantName `"proton_mass"`.
	PhysicsConstantNameProtonMass PhysicsConstantName = "proton_mass"
	// PhysicsConstantNameMuB represents the PhysicsConstantName `"mu_B"`.
	PhysicsConstantNameMuB PhysicsConstantName = "mu_B"
	// PhysicsConstantNameBohrMagneton represents the PhysicsConstantName `"bohr_magneton"`.
	PhysicsConstantNameBohrMagneton PhysicsConstantName = "bohr_magneton"
	// PhysicsConstantNameNA represents the PhysicsConstantName `"NA"`.
	PhysicsConstantNameNA PhysicsConstantName = "NA"
	// PhysicsConstantNameAvogadroNum represents the PhysicsConstantName `"avogadro_num"`.
	PhysicsConstantNameAvogadroNum PhysicsConstantName = "avogadro_num"
	// PhysicsConstantNameR represents the PhysicsConstantName `"R"`.
	PhysicsConstantNameR PhysicsConstantName = "R"
	// PhysicsConstantNameMolarGasConst represents the PhysicsConstantName `"molar_gas_const"`.
	PhysicsConstantNameMolarGasConst PhysicsConstantName = "molar_gas_const"
	// PhysicsConstantNameKB represents the PhysicsConstantName `"K_B"`.
	PhysicsConstantNameKB PhysicsConstantName = "K_B"
	// PhysicsConstantNameBoltzmannConst represents the PhysicsConstantName `"boltzmann_const"`.
	PhysicsConstantNameBoltzmannConst PhysicsConstantName = "boltzmann_const"
	// PhysicsConstantNameF represents the PhysicsConstantName `"F"`.
	PhysicsConstantNameF PhysicsConstantName = "F"
	// PhysicsConstantNameFaradayConst represents the PhysicsConstantName `"faraday_const"`.
	PhysicsConstantNameFaradayConst PhysicsConstantName = "faraday_const"
	// PhysicsConstantNameSigma represents the PhysicsConstantName `"sigma"`.
	PhysicsConstantNameSigma PhysicsConstantName = "sigma"
	// PhysicsConstantNameStefanBoltzmannConst represents the PhysicsConstantName `"stefan_boltzmann_const"`.
	PhysicsConstantNameStefanBoltzmannConst PhysicsConstantName = "stefan_boltzmann_const"
)

// PluginsInfo: Available plugins per type.
// **Note**: Only unmanaged (V1) plugins are included in this list. V1 plugins are \"lazily\" loaded, and are not returned in this list if there is no resource using the plugin.
type PluginsInfo struct {
	// Authorization: Names of available authorization plugins.
	Authorization []string `json:"authorization" yaml:"authorization" schema:"authorization"`
	// Log: Names of available logging-drivers, and logging-driver plugins.
	Log []string `json:"log" yaml:"log" schema:"log"`
	// Network: Names of available network-drivers, and network-driver plugins.
	Network []string `json:"network" yaml:"network" schema:"network"`
	// Volume: Names of available volume-drivers, and network-driver plugins.
	Volume []string `json:"volume" yaml:"volume" schema:"volume"`
}

// Pong: The response from the `/ping` endpoint.
type Pong struct {
	// Message: The pong response.
	Message string `json:"message" yaml:"message" schema:"message,required"`
}

// RegistryServiceConfig: RegistryServiceConfig stores daemon registry services configuration.
type RegistryServiceConfig struct {
	// AllowNondistributableArtifactsCidRs: List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.
	//
	// **Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts.
	AllowNondistributableArtifactsCidRs []string `json:"allow_nondistributable_artifacts_cid_rs" yaml:"allow_nondistributable_artifacts_cid_rs" schema:"allow_nondistributable_artifacts_cid_rs"`
	// AllowNondistributableArtifactsHostnames: List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.
	//
	// **Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts.
	AllowNondistributableArtifactsHostnames []string `json:"allow_nondistributable_artifacts_hostnames" yaml:"allow_nondistributable_artifacts_hostnames" schema:"allow_nondistributable_artifacts_hostnames"`
	// IndexConfigs:
	IndexConfigs map[string]IndexInfo `json:"index_configs" yaml:"index_configs" schema:"index_configs"`
	// InsecureRegistryCidRs: List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.
	//
	// **Warning**: Using this option can be useful when running a local  registry, but introduces security vulnerabilities. This option should therefore ONLY be used for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option.
	InsecureRegistryCidRs []string `json:"insecure_registry_cid_rs" yaml:"insecure_registry_cid_rs" schema:"insecure_registry_cid_rs"`
	// Mirrors: List of registry URLs that act as a mirror for the official (`docker.io`) registry.
	Mirrors []string `json:"mirrors" yaml:"mirrors" schema:"mirrors"`
}

// Runtime: Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux.
type Runtime struct {
	// Path: Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
	Path string `json:"path" yaml:"path" schema:"path"`
	// RuntimeArgs: List of command-line arguments to pass to the runtime when invoked.
	RuntimeArgs []string `json:"runtime_args" yaml:"runtime_args" schema:"runtime_args"`
}

// Session: An authentication session.
// For our UIs, these are automatically created by Next.js.
type Session struct {
	// CreatedAt: The date and time the session was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the session expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The unique identifier for the session.
	ID string `json:"id" yaml:"id" schema:"id"`
	// SessionToken: The session token.
	SessionToken UUID `json:"session_token" yaml:"session_token" schema:"session_token,required"`
	// UpdatedAt: The date and time the session was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user that the session belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// SystemInfoCgroupDriverEnum is the type definition for a SystemInfoCgroupDriverEnum.
type SystemInfoCgroupDriverEnum string

const (
	// SystemInfoCgroupDriverEnumEmpty represents the SystemInfoCgroupDriverEnum `""`.
	SystemInfoCgroupDriverEnumEmpty SystemInfoCgroupDriverEnum = ""
	// SystemInfoCgroupDriverEnumCgroupfs represents the SystemInfoCgroupDriverEnum `"cgroupfs"`.
	SystemInfoCgroupDriverEnumCgroupfs SystemInfoCgroupDriverEnum = "cgroupfs"
	// SystemInfoCgroupDriverEnumSystemd represents the SystemInfoCgroupDriverEnum `"systemd"`.
	SystemInfoCgroupDriverEnumSystemd SystemInfoCgroupDriverEnum = "systemd"
	// SystemInfoCgroupDriverEnumNone represents the SystemInfoCgroupDriverEnum `"none"`.
	SystemInfoCgroupDriverEnumNone SystemInfoCgroupDriverEnum = "none"
)

// SystemInfoCgroupVersionEnum is the type definition for a SystemInfoCgroupVersionEnum.
type SystemInfoCgroupVersionEnum string

const (
	// SystemInfoCgroupVersionEnumEmpty represents the SystemInfoCgroupVersionEnum `""`.
	SystemInfoCgroupVersionEnumEmpty SystemInfoCgroupVersionEnum = ""
	// SystemInfoCgroupVersionEnum1 represents the SystemInfoCgroupVersionEnum `"1"`.
	SystemInfoCgroupVersionEnum1 SystemInfoCgroupVersionEnum = "1"
	// SystemInfoCgroupVersionEnum2 represents the SystemInfoCgroupVersionEnum `"2"`.
	SystemInfoCgroupVersionEnum2 SystemInfoCgroupVersionEnum = "2"
)

// SystemInfoDefaultAddressPools is the type definition for a SystemInfoDefaultAddressPools.
type SystemInfoDefaultAddressPools struct {
	// Base: The network address in CIDR format
	Base string `json:"base" yaml:"base" schema:"base"`
	// Size: The network pool size
	Size int `json:"size" yaml:"size" schema:"size"`
}

// SystemInfoIsolationEnum is the type definition for a SystemInfoIsolationEnum.
type SystemInfoIsolationEnum string

const (
	// SystemInfoIsolationEnumEmpty represents the SystemInfoIsolationEnum `""`.
	SystemInfoIsolationEnumEmpty SystemInfoIsolationEnum = ""
	// SystemInfoIsolationEnumDefault represents the SystemInfoIsolationEnum `"default"`.
	SystemInfoIsolationEnumDefault SystemInfoIsolationEnum = "default"
	// SystemInfoIsolationEnumHyperv represents the SystemInfoIsolationEnum `"hyperv"`.
	SystemInfoIsolationEnumHyperv SystemInfoIsolationEnum = "hyperv"
	// SystemInfoIsolationEnumProcess represents the SystemInfoIsolationEnum `"process"`.
	SystemInfoIsolationEnumProcess SystemInfoIsolationEnum = "process"
)

// UnitAccelerationConversion: A unit conversion.
type UnitAccelerationConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitAccelerationFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitAccelerationFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitAccelerationFormat: The valid types of metric unit formats.
type UnitAccelerationFormat string

const (
	// UnitAccelerationFormatMetersPerSecondSquared represents the UnitAccelerationFormat `"meters_per_second_squared"`.
	UnitAccelerationFormatMetersPerSecondSquared UnitAccelerationFormat = "meters_per_second_squared"
	// UnitAccelerationFormatFeetPerSecondSquared represents the UnitAccelerationFormat `"feet_per_second_squared"`.
	UnitAccelerationFormatFeetPerSecondSquared UnitAccelerationFormat = "feet_per_second_squared"
	// UnitAccelerationFormatStandardGravity represents the UnitAccelerationFormat `"standard_gravity"`.
	UnitAccelerationFormatStandardGravity UnitAccelerationFormat = "standard_gravity"
)

// UnitAngleConversion: A unit conversion.
type UnitAngleConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitAngleFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitAngleFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitAngleFormat: The valid types of angle formats.
type UnitAngleFormat string

const (
	// UnitAngleFormatRadian represents the UnitAngleFormat `"radian"`.
	UnitAngleFormatRadian UnitAngleFormat = "radian"
	// UnitAngleFormatDegree represents the UnitAngleFormat `"degree"`.
	UnitAngleFormatDegree UnitAngleFormat = "degree"
	// UnitAngleFormatArcminute represents the UnitAngleFormat `"arcminute"`.
	UnitAngleFormatArcminute UnitAngleFormat = "arcminute"
	// UnitAngleFormatArcsecond represents the UnitAngleFormat `"arcsecond"`.
	UnitAngleFormatArcsecond UnitAngleFormat = "arcsecond"
	// UnitAngleFormatMilliarcsecond represents the UnitAngleFormat `"milliarcsecond"`.
	UnitAngleFormatMilliarcsecond UnitAngleFormat = "milliarcsecond"
	// UnitAngleFormatTurn represents the UnitAngleFormat `"turn"`.
	UnitAngleFormatTurn UnitAngleFormat = "turn"
	// UnitAngleFormatGradian represents the UnitAngleFormat `"gradian"`.
	UnitAngleFormatGradian UnitAngleFormat = "gradian"
)

// UnitAngularVelocityConversion: A unit conversion.
type UnitAngularVelocityConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitAngularVelocityFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitAngularVelocityFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitAngularVelocityFormat: The valid types of angular velocity unit formats.
type UnitAngularVelocityFormat string

const (
	// UnitAngularVelocityFormatRadiansPerSecond represents the UnitAngularVelocityFormat `"radians_per_second"`.
	UnitAngularVelocityFormatRadiansPerSecond UnitAngularVelocityFormat = "radians_per_second"
	// UnitAngularVelocityFormatDegreesPerSecond represents the UnitAngularVelocityFormat `"degrees_per_second"`.
	UnitAngularVelocityFormatDegreesPerSecond UnitAngularVelocityFormat = "degrees_per_second"
	// UnitAngularVelocityFormatRevolutionsPerMinute represents the UnitAngularVelocityFormat `"revolutions_per_minute"`.
	UnitAngularVelocityFormatRevolutionsPerMinute UnitAngularVelocityFormat = "revolutions_per_minute"
	// UnitAngularVelocityFormatMilliarcsecondsPerYear represents the UnitAngularVelocityFormat `"milliarcseconds_per_year"`.
	UnitAngularVelocityFormatMilliarcsecondsPerYear UnitAngularVelocityFormat = "milliarcseconds_per_year"
)

// UnitAreaConversion: A unit conversion.
type UnitAreaConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitAreaFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitAreaFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitAreaFormat: The valid types of area unit formats.
type UnitAreaFormat string

const (
	// UnitAreaFormatSquareMeter represents the UnitAreaFormat `"square_meter"`.
	UnitAreaFormatSquareMeter UnitAreaFormat = "square_meter"
	// UnitAreaFormatSquareFoot represents the UnitAreaFormat `"square_foot"`.
	UnitAreaFormatSquareFoot UnitAreaFormat = "square_foot"
	// UnitAreaFormatSquareInch represents the UnitAreaFormat `"square_inch"`.
	UnitAreaFormatSquareInch UnitAreaFormat = "square_inch"
	// UnitAreaFormatSquareMile represents the UnitAreaFormat `"square_mile"`.
	UnitAreaFormatSquareMile UnitAreaFormat = "square_mile"
	// UnitAreaFormatSquareKilometer represents the UnitAreaFormat `"square_kilometer"`.
	UnitAreaFormatSquareKilometer UnitAreaFormat = "square_kilometer"
	// UnitAreaFormatHectare represents the UnitAreaFormat `"hectare"`.
	UnitAreaFormatHectare UnitAreaFormat = "hectare"
	// UnitAreaFormatAcre represents the UnitAreaFormat `"acre"`.
	UnitAreaFormatAcre UnitAreaFormat = "acre"
)

// UnitChargeConversion: A unit conversion.
type UnitChargeConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitChargeFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitChargeFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitChargeFormat: The valid types of charge unit formats.
type UnitChargeFormat string

const (
	// UnitChargeFormatCoulomb represents the UnitChargeFormat `"coulomb"`.
	UnitChargeFormatCoulomb UnitChargeFormat = "coulomb"
	// UnitChargeFormatAmpereHour represents the UnitChargeFormat `"ampere_hour"`.
	UnitChargeFormatAmpereHour UnitChargeFormat = "ampere_hour"
)

// UnitConcentrationConversion: A unit conversion.
type UnitConcentrationConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitConcentrationFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitConcentrationFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitConcentrationFormat: The valid types of concentration unit formats.
type UnitConcentrationFormat string

const (
	// UnitConcentrationFormatPartsPerMillion represents the UnitConcentrationFormat `"parts_per_million"`.
	UnitConcentrationFormatPartsPerMillion UnitConcentrationFormat = "parts_per_million"
	// UnitConcentrationFormatPartsPerBillion represents the UnitConcentrationFormat `"parts_per_billion"`.
	UnitConcentrationFormatPartsPerBillion UnitConcentrationFormat = "parts_per_billion"
	// UnitConcentrationFormatPartsPerTrillion represents the UnitConcentrationFormat `"parts_per_trillion"`.
	UnitConcentrationFormatPartsPerTrillion UnitConcentrationFormat = "parts_per_trillion"
	// UnitConcentrationFormatPercent represents the UnitConcentrationFormat `"percent"`.
	UnitConcentrationFormatPercent UnitConcentrationFormat = "percent"
)

// UnitDataConversion: A unit conversion.
type UnitDataConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitDataFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitDataFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitDataFormat: The valid types of data unit formats.
type UnitDataFormat string

const (
	// UnitDataFormatByte represents the UnitDataFormat `"byte"`.
	UnitDataFormatByte UnitDataFormat = "byte"
	// UnitDataFormatExabyte represents the UnitDataFormat `"exabyte"`.
	UnitDataFormatExabyte UnitDataFormat = "exabyte"
	// UnitDataFormatBit represents the UnitDataFormat `"bit"`.
	UnitDataFormatBit UnitDataFormat = "bit"
	// UnitDataFormatExabit represents the UnitDataFormat `"exabit"`.
	UnitDataFormatExabit UnitDataFormat = "exabit"
)

// UnitDataTransferRateConversion: A unit conversion.
type UnitDataTransferRateConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitDataTransferRateFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitDataTransferRateFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitDataTransferRateFormat: The valid types of data transfer unit formats.
type UnitDataTransferRateFormat string

const (
	// UnitDataTransferRateFormatBytesPerSecond represents the UnitDataTransferRateFormat `"bytes_per_second"`.
	UnitDataTransferRateFormatBytesPerSecond UnitDataTransferRateFormat = "bytes_per_second"
	// UnitDataTransferRateFormatExabytesPerSecond represents the UnitDataTransferRateFormat `"exabytes_per_second"`.
	UnitDataTransferRateFormatExabytesPerSecond UnitDataTransferRateFormat = "exabytes_per_second"
	// UnitDataTransferRateFormatBitsPerSecond represents the UnitDataTransferRateFormat `"bits_per_second"`.
	UnitDataTransferRateFormatBitsPerSecond UnitDataTransferRateFormat = "bits_per_second"
	// UnitDataTransferRateFormatExabitsPerSecond represents the UnitDataTransferRateFormat `"exabits_per_second"`.
	UnitDataTransferRateFormatExabitsPerSecond UnitDataTransferRateFormat = "exabits_per_second"
)

// UnitDensityConversion: A unit conversion.
type UnitDensityConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitDensityFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitDensityFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitDensityFormat: The valid types of density unit formats.
type UnitDensityFormat string

const (
	// UnitDensityFormatKilogramsPerCubicMeter represents the UnitDensityFormat `"kilograms_per_cubic_meter"`.
	UnitDensityFormatKilogramsPerCubicMeter UnitDensityFormat = "kilograms_per_cubic_meter"
	// UnitDensityFormatGramsPerMilliliter represents the UnitDensityFormat `"grams_per_milliliter"`.
	UnitDensityFormatGramsPerMilliliter UnitDensityFormat = "grams_per_milliliter"
	// UnitDensityFormatKilogramsPerLiter represents the UnitDensityFormat `"kilograms_per_liter"`.
	UnitDensityFormatKilogramsPerLiter UnitDensityFormat = "kilograms_per_liter"
	// UnitDensityFormatOuncesPerCubicFoot represents the UnitDensityFormat `"ounces_per_cubic_foot"`.
	UnitDensityFormatOuncesPerCubicFoot UnitDensityFormat = "ounces_per_cubic_foot"
	// UnitDensityFormatOuncesPerCubicInch represents the UnitDensityFormat `"ounces_per_cubic_inch"`.
	UnitDensityFormatOuncesPerCubicInch UnitDensityFormat = "ounces_per_cubic_inch"
	// UnitDensityFormatOuncesPerGallon represents the UnitDensityFormat `"ounces_per_gallon"`.
	UnitDensityFormatOuncesPerGallon UnitDensityFormat = "ounces_per_gallon"
	// UnitDensityFormatPoundsPerCubicFoot represents the UnitDensityFormat `"pounds_per_cubic_foot"`.
	UnitDensityFormatPoundsPerCubicFoot UnitDensityFormat = "pounds_per_cubic_foot"
	// UnitDensityFormatPoundsPerCubicInch represents the UnitDensityFormat `"pounds_per_cubic_inch"`.
	UnitDensityFormatPoundsPerCubicInch UnitDensityFormat = "pounds_per_cubic_inch"
	// UnitDensityFormatPoundsPerGallon represents the UnitDensityFormat `"pounds_per_gallon"`.
	UnitDensityFormatPoundsPerGallon UnitDensityFormat = "pounds_per_gallon"
	// UnitDensityFormatSlugsPerCubicFoot represents the UnitDensityFormat `"slugs_per_cubic_foot"`.
	UnitDensityFormatSlugsPerCubicFoot UnitDensityFormat = "slugs_per_cubic_foot"
)

// UnitEnergyConversion: A unit conversion.
type UnitEnergyConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitEnergyFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitEnergyFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitEnergyFormat: The valid types of energy unit formats.
type UnitEnergyFormat string

const (
	// UnitEnergyFormatJoule represents the UnitEnergyFormat `"joule"`.
	UnitEnergyFormatJoule UnitEnergyFormat = "joule"
	// UnitEnergyFormatCalorie represents the UnitEnergyFormat `"calorie"`.
	UnitEnergyFormatCalorie UnitEnergyFormat = "calorie"
	// UnitEnergyFormatBritishThermalUnit represents the UnitEnergyFormat `"british_thermal_unit"`.
	UnitEnergyFormatBritishThermalUnit UnitEnergyFormat = "british_thermal_unit"
	// UnitEnergyFormatBritishThermalUnitIso represents the UnitEnergyFormat `"british_thermal_unit_iso"`.
	UnitEnergyFormatBritishThermalUnitIso UnitEnergyFormat = "british_thermal_unit_iso"
	// UnitEnergyFormatBritishThermalUnit59 represents the UnitEnergyFormat `"british_thermal_unit59"`.
	UnitEnergyFormatBritishThermalUnit59 UnitEnergyFormat = "british_thermal_unit59"
	// UnitEnergyFormatFootPound represents the UnitEnergyFormat `"foot_pound"`.
	UnitEnergyFormatFootPound UnitEnergyFormat = "foot_pound"
)

// UnitForceConversion: A unit conversion.
type UnitForceConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitForceFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitForceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitForceFormat: The valid types of force unit formats.
type UnitForceFormat string

const (
	// UnitForceFormatNewton represents the UnitForceFormat `"newton"`.
	UnitForceFormatNewton UnitForceFormat = "newton"
	// UnitForceFormatPound represents the UnitForceFormat `"pound"`.
	UnitForceFormatPound UnitForceFormat = "pound"
	// UnitForceFormatDyne represents the UnitForceFormat `"dyne"`.
	UnitForceFormatDyne UnitForceFormat = "dyne"
	// UnitForceFormatKilopound represents the UnitForceFormat `"kilopound"`.
	UnitForceFormatKilopound UnitForceFormat = "kilopound"
	// UnitForceFormatPoundal represents the UnitForceFormat `"poundal"`.
	UnitForceFormatPoundal UnitForceFormat = "poundal"
)

// UnitIlluminanceConversion: A unit conversion.
type UnitIlluminanceConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitIlluminanceFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitIlluminanceFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitIlluminanceFormat: The valid types of illuminance unit formats.
type UnitIlluminanceFormat string

const (
	// UnitIlluminanceFormatLux represents the UnitIlluminanceFormat `"lux"`.
	UnitIlluminanceFormatLux UnitIlluminanceFormat = "lux"
	// UnitIlluminanceFormatFootcandle represents the UnitIlluminanceFormat `"footcandle"`.
	UnitIlluminanceFormatFootcandle UnitIlluminanceFormat = "footcandle"
	// UnitIlluminanceFormatLumensPerSquareInch represents the UnitIlluminanceFormat `"lumens_per_square_inch"`.
	UnitIlluminanceFormatLumensPerSquareInch UnitIlluminanceFormat = "lumens_per_square_inch"
	// UnitIlluminanceFormatPhot represents the UnitIlluminanceFormat `"phot"`.
	UnitIlluminanceFormatPhot UnitIlluminanceFormat = "phot"
)

// UnitLengthConversion: A unit conversion.
type UnitLengthConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitLengthFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitLengthFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitLengthFormat: The valid types of length unit formats.
type UnitLengthFormat string

const (
	// UnitLengthFormatMillimeter represents the UnitLengthFormat `"millimeter"`.
	UnitLengthFormatMillimeter UnitLengthFormat = "millimeter"
	// UnitLengthFormatCentimeter represents the UnitLengthFormat `"centimeter"`.
	UnitLengthFormatCentimeter UnitLengthFormat = "centimeter"
	// UnitLengthFormatMeter represents the UnitLengthFormat `"meter"`.
	UnitLengthFormatMeter UnitLengthFormat = "meter"
	// UnitLengthFormatKilomter represents the UnitLengthFormat `"kilomter"`.
	UnitLengthFormatKilomter UnitLengthFormat = "kilomter"
	// UnitLengthFormatFoot represents the UnitLengthFormat `"foot"`.
	UnitLengthFormatFoot UnitLengthFormat = "foot"
	// UnitLengthFormatInch represents the UnitLengthFormat `"inch"`.
	UnitLengthFormatInch UnitLengthFormat = "inch"
	// UnitLengthFormatMile represents the UnitLengthFormat `"mile"`.
	UnitLengthFormatMile UnitLengthFormat = "mile"
	// UnitLengthFormatNauticalMile represents the UnitLengthFormat `"nautical_mile"`.
	UnitLengthFormatNauticalMile UnitLengthFormat = "nautical_mile"
	// UnitLengthFormatAstronomicalUnit represents the UnitLengthFormat `"astronomical_unit"`.
	UnitLengthFormatAstronomicalUnit UnitLengthFormat = "astronomical_unit"
	// UnitLengthFormatCubit represents the UnitLengthFormat `"cubit"`.
	UnitLengthFormatCubit UnitLengthFormat = "cubit"
	// UnitLengthFormatFathom represents the UnitLengthFormat `"fathom"`.
	UnitLengthFormatFathom UnitLengthFormat = "fathom"
	// UnitLengthFormatChain represents the UnitLengthFormat `"chain"`.
	UnitLengthFormatChain UnitLengthFormat = "chain"
	// UnitLengthFormatFurlong represents the UnitLengthFormat `"furlong"`.
	UnitLengthFormatFurlong UnitLengthFormat = "furlong"
	// UnitLengthFormatHand represents the UnitLengthFormat `"hand"`.
	UnitLengthFormatHand UnitLengthFormat = "hand"
	// UnitLengthFormatLeague represents the UnitLengthFormat `"league"`.
	UnitLengthFormatLeague UnitLengthFormat = "league"
	// UnitLengthFormatNauticalLeague represents the UnitLengthFormat `"nautical_league"`.
	UnitLengthFormatNauticalLeague UnitLengthFormat = "nautical_league"
	// UnitLengthFormatYard represents the UnitLengthFormat `"yard"`.
	UnitLengthFormatYard UnitLengthFormat = "yard"
)

// UnitMagneticFieldStrengthConversion: A unit conversion.
type UnitMagneticFieldStrengthConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitMagneticFieldStrengthFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitMagneticFieldStrengthFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMagneticFieldStrengthFormat: The valid types of magnetic field strength unit formats.
type UnitMagneticFieldStrengthFormat string

const (
	// UnitMagneticFieldStrengthFormatTesla represents the UnitMagneticFieldStrengthFormat `"tesla"`.
	UnitMagneticFieldStrengthFormatTesla UnitMagneticFieldStrengthFormat = "tesla"
	// UnitMagneticFieldStrengthFormatGauss represents the UnitMagneticFieldStrengthFormat `"gauss"`.
	UnitMagneticFieldStrengthFormatGauss UnitMagneticFieldStrengthFormat = "gauss"
)

// UnitMagneticFluxConversion: A unit conversion.
type UnitMagneticFluxConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitMagneticFluxFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitMagneticFluxFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMagneticFluxFormat: The valid types of magnetic flux unit formats.
type UnitMagneticFluxFormat string

const (
	// UnitMagneticFluxFormatWeber represents the UnitMagneticFluxFormat `"weber"`.
	UnitMagneticFluxFormatWeber UnitMagneticFluxFormat = "weber"
	// UnitMagneticFluxFormatMaxwell represents the UnitMagneticFluxFormat `"maxwell"`.
	UnitMagneticFluxFormatMaxwell UnitMagneticFluxFormat = "maxwell"
)

// UnitMassConversion: A unit conversion.
type UnitMassConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitMassFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitMassFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMassFormat: The valid types of mass unit formats.
type UnitMassFormat string

const (
	// UnitMassFormatGram represents the UnitMassFormat `"gram"`.
	UnitMassFormatGram UnitMassFormat = "gram"
	// UnitMassFormatKilogram represents the UnitMassFormat `"kilogram"`.
	UnitMassFormatKilogram UnitMassFormat = "kilogram"
	// UnitMassFormatMetricTon represents the UnitMassFormat `"metric_ton"`.
	UnitMassFormatMetricTon UnitMassFormat = "metric_ton"
	// UnitMassFormatPound represents the UnitMassFormat `"pound"`.
	UnitMassFormatPound UnitMassFormat = "pound"
	// UnitMassFormatLongTon represents the UnitMassFormat `"long_ton"`.
	UnitMassFormatLongTon UnitMassFormat = "long_ton"
	// UnitMassFormatShortTon represents the UnitMassFormat `"short_ton"`.
	UnitMassFormatShortTon UnitMassFormat = "short_ton"
	// UnitMassFormatStone represents the UnitMassFormat `"stone"`.
	UnitMassFormatStone UnitMassFormat = "stone"
	// UnitMassFormatOunce represents the UnitMassFormat `"ounce"`.
	UnitMassFormatOunce UnitMassFormat = "ounce"
	// UnitMassFormatCarat represents the UnitMassFormat `"carat"`.
	UnitMassFormatCarat UnitMassFormat = "carat"
	// UnitMassFormatSlug represents the UnitMassFormat `"slug"`.
	UnitMassFormatSlug UnitMassFormat = "slug"
)

// UnitMetricPower: The valid types of metric unit formats.
type UnitMetricPower string

const (
	// UnitMetricPowerAtto represents the UnitMetricPower `"atto"`.
	UnitMetricPowerAtto UnitMetricPower = "atto"
	// UnitMetricPowerFemto represents the UnitMetricPower `"femto"`.
	UnitMetricPowerFemto UnitMetricPower = "femto"
	// UnitMetricPowerPico represents the UnitMetricPower `"pico"`.
	UnitMetricPowerPico UnitMetricPower = "pico"
	// UnitMetricPowerNano represents the UnitMetricPower `"nano"`.
	UnitMetricPowerNano UnitMetricPower = "nano"
	// UnitMetricPowerMicro represents the UnitMetricPower `"micro"`.
	UnitMetricPowerMicro UnitMetricPower = "micro"
	// UnitMetricPowerMilli represents the UnitMetricPower `"milli"`.
	UnitMetricPowerMilli UnitMetricPower = "milli"
	// UnitMetricPowerCenti represents the UnitMetricPower `"centi"`.
	UnitMetricPowerCenti UnitMetricPower = "centi"
	// UnitMetricPowerDeci represents the UnitMetricPower `"deci"`.
	UnitMetricPowerDeci UnitMetricPower = "deci"
	// UnitMetricPowerMetricUnit represents the UnitMetricPower `"metric_unit"`.
	UnitMetricPowerMetricUnit UnitMetricPower = "metric_unit"
	// UnitMetricPowerDeca represents the UnitMetricPower `"deca"`.
	UnitMetricPowerDeca UnitMetricPower = "deca"
	// UnitMetricPowerHecto represents the UnitMetricPower `"hecto"`.
	UnitMetricPowerHecto UnitMetricPower = "hecto"
	// UnitMetricPowerKilo represents the UnitMetricPower `"kilo"`.
	UnitMetricPowerKilo UnitMetricPower = "kilo"
	// UnitMetricPowerMega represents the UnitMetricPower `"mega"`.
	UnitMetricPowerMega UnitMetricPower = "mega"
	// UnitMetricPowerGiga represents the UnitMetricPower `"giga"`.
	UnitMetricPowerGiga UnitMetricPower = "giga"
	// UnitMetricPowerTera represents the UnitMetricPower `"tera"`.
	UnitMetricPowerTera UnitMetricPower = "tera"
	// UnitMetricPowerPeta represents the UnitMetricPower `"peta"`.
	UnitMetricPowerPeta UnitMetricPower = "peta"
	// UnitMetricPowerExa represents the UnitMetricPower `"exa"`.
	UnitMetricPowerExa UnitMetricPower = "exa"
)

// UnitMetricPowerConversion: A unit conversion.
type UnitMetricPowerConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitMetricPower `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitMetricPower `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMetricPowerCubedConversion: A unit conversion.
type UnitMetricPowerCubedConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitMetricPower `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitMetricPower `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMetricPowerSquaredConversion: A unit conversion.
type UnitMetricPowerSquaredConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitMetricPower `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitMetricPower `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPowerConversion: A unit conversion.
type UnitPowerConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitPowerFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitPowerFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPowerFormat: The valid types of power unit formats.
type UnitPowerFormat string

const (
	// UnitPowerFormatWatt represents the UnitPowerFormat `"watt"`.
	UnitPowerFormatWatt UnitPowerFormat = "watt"
	// UnitPowerFormatHorsepower represents the UnitPowerFormat `"horsepower"`.
	UnitPowerFormatHorsepower UnitPowerFormat = "horsepower"
	// UnitPowerFormatMilliwatt represents the UnitPowerFormat `"milliwatt"`.
	UnitPowerFormatMilliwatt UnitPowerFormat = "milliwatt"
)

// UnitPressureConversion: A unit conversion.
type UnitPressureConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitPressureFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitPressureFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPressureFormat: The valid types of pressure unit formats.
type UnitPressureFormat string

const (
	// UnitPressureFormatPascal represents the UnitPressureFormat `"pascal"`.
	UnitPressureFormatPascal UnitPressureFormat = "pascal"
	// UnitPressureFormatBar represents the UnitPressureFormat `"bar"`.
	UnitPressureFormatBar UnitPressureFormat = "bar"
	// UnitPressureFormatMbar represents the UnitPressureFormat `"mbar"`.
	UnitPressureFormatMbar UnitPressureFormat = "mbar"
	// UnitPressureFormatAtmosphere represents the UnitPressureFormat `"atmosphere"`.
	UnitPressureFormatAtmosphere UnitPressureFormat = "atmosphere"
	// UnitPressureFormatPoundsPerSquareInch represents the UnitPressureFormat `"pounds_per_square_inch"`.
	UnitPressureFormatPoundsPerSquareInch UnitPressureFormat = "pounds_per_square_inch"
)

// UnitRadiationConversion: A unit conversion.
type UnitRadiationConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitRadiationFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitRadiationFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitRadiationFormat: The valid types of radiation unit formats.
type UnitRadiationFormat string

const (
	// UnitRadiationFormatGray represents the UnitRadiationFormat `"gray"`.
	UnitRadiationFormatGray UnitRadiationFormat = "gray"
	// UnitRadiationFormatSievert represents the UnitRadiationFormat `"sievert"`.
	UnitRadiationFormatSievert UnitRadiationFormat = "sievert"
	// UnitRadiationFormatRad represents the UnitRadiationFormat `"rad"`.
	UnitRadiationFormatRad UnitRadiationFormat = "rad"
)

// UnitSolidAngleConversion: A unit conversion.
type UnitSolidAngleConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitSolidAngleFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitSolidAngleFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitSolidAngleFormat: The valid types of solid angle unit formats.
type UnitSolidAngleFormat string

const (
	// UnitSolidAngleFormatSteradian represents the UnitSolidAngleFormat `"steradian"`.
	UnitSolidAngleFormatSteradian UnitSolidAngleFormat = "steradian"
	// UnitSolidAngleFormatDegreeSquared represents the UnitSolidAngleFormat `"degree_squared"`.
	UnitSolidAngleFormatDegreeSquared UnitSolidAngleFormat = "degree_squared"
	// UnitSolidAngleFormatSpat represents the UnitSolidAngleFormat `"spat"`.
	UnitSolidAngleFormatSpat UnitSolidAngleFormat = "spat"
)

// UnitTemperatureConversion: A unit conversion.
type UnitTemperatureConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitTemperatureFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitTemperatureFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitTemperatureFormat: The valid types of temperature unit formats.
type UnitTemperatureFormat string

const (
	// UnitTemperatureFormatKelvin represents the UnitTemperatureFormat `"kelvin"`.
	UnitTemperatureFormatKelvin UnitTemperatureFormat = "kelvin"
	// UnitTemperatureFormatCelsius represents the UnitTemperatureFormat `"celsius"`.
	UnitTemperatureFormatCelsius UnitTemperatureFormat = "celsius"
	// UnitTemperatureFormatFahrenheit represents the UnitTemperatureFormat `"fahrenheit"`.
	UnitTemperatureFormatFahrenheit UnitTemperatureFormat = "fahrenheit"
	// UnitTemperatureFormatReaumur represents the UnitTemperatureFormat `"reaumur"`.
	UnitTemperatureFormatReaumur UnitTemperatureFormat = "reaumur"
	// UnitTemperatureFormatRankine represents the UnitTemperatureFormat `"rankine"`.
	UnitTemperatureFormatRankine UnitTemperatureFormat = "rankine"
)

// UnitTimeConversion: A unit conversion.
type UnitTimeConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitTimeFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitTimeFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitTimeFormat: The valid types of time unit formats.
type UnitTimeFormat string

const (
	// UnitTimeFormatSecond represents the UnitTimeFormat `"second"`.
	UnitTimeFormatSecond UnitTimeFormat = "second"
	// UnitTimeFormatMinute represents the UnitTimeFormat `"minute"`.
	UnitTimeFormatMinute UnitTimeFormat = "minute"
	// UnitTimeFormatHour represents the UnitTimeFormat `"hour"`.
	UnitTimeFormatHour UnitTimeFormat = "hour"
	// UnitTimeFormatDay represents the UnitTimeFormat `"day"`.
	UnitTimeFormatDay UnitTimeFormat = "day"
	// UnitTimeFormatWeek represents the UnitTimeFormat `"week"`.
	UnitTimeFormatWeek UnitTimeFormat = "week"
	// UnitTimeFormatYear represents the UnitTimeFormat `"year"`.
	UnitTimeFormatYear UnitTimeFormat = "year"
	// UnitTimeFormatJulianYear represents the UnitTimeFormat `"julian_year"`.
	UnitTimeFormatJulianYear UnitTimeFormat = "julian_year"
	// UnitTimeFormatGregorianYear represents the UnitTimeFormat `"gregorian_year"`.
	UnitTimeFormatGregorianYear UnitTimeFormat = "gregorian_year"
)

// UnitVelocityConversion: A unit conversion.
type UnitVelocityConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitVelocityFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitVelocityFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitVelocityFormat: The valid types of velocity unit formats.
type UnitVelocityFormat string

const (
	// UnitVelocityFormatMetersPerSecond represents the UnitVelocityFormat `"meters_per_second"`.
	UnitVelocityFormatMetersPerSecond UnitVelocityFormat = "meters_per_second"
	// UnitVelocityFormatFeetPerSecond represents the UnitVelocityFormat `"feet_per_second"`.
	UnitVelocityFormatFeetPerSecond UnitVelocityFormat = "feet_per_second"
	// UnitVelocityFormatMilesPerHour represents the UnitVelocityFormat `"miles_per_hour"`.
	UnitVelocityFormatMilesPerHour UnitVelocityFormat = "miles_per_hour"
	// UnitVelocityFormatKilometersPerHour represents the UnitVelocityFormat `"kilometers_per_hour"`.
	UnitVelocityFormatKilometersPerHour UnitVelocityFormat = "kilometers_per_hour"
	// UnitVelocityFormatKnot represents the UnitVelocityFormat `"knot"`.
	UnitVelocityFormatKnot UnitVelocityFormat = "knot"
)

// UnitVoltageConversion: A unit conversion.
type UnitVoltageConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitVoltageFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitVoltageFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitVoltageFormat: The valid types of voltage unit formats.
type UnitVoltageFormat string

const (
	// UnitVoltageFormatVolt represents the UnitVoltageFormat `"volt"`.
	UnitVoltageFormatVolt UnitVoltageFormat = "volt"
	// UnitVoltageFormatStatvolt represents the UnitVoltageFormat `"statvolt"`.
	UnitVoltageFormatStatvolt UnitVoltageFormat = "statvolt"
	// UnitVoltageFormatAbvolt represents the UnitVoltageFormat `"abvolt"`.
	UnitVoltageFormatAbvolt UnitVoltageFormat = "abvolt"
)

// UnitVolumeConversion: A unit conversion.
type UnitVolumeConversion struct {
	// CompletedAt: The time and date the unit conversion was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the unit conversion was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the unit conversion.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the unit conversion.
	OutputFormat UnitVolumeFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the unit conversion.
	SrcFormat UnitVolumeFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the unit conversion was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the unit conversion.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the unit conversion was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the unit conversion.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitVolumeFormat: The valid types of volume unit formats.
type UnitVolumeFormat string

const (
	// UnitVolumeFormatCubicMillimeter represents the UnitVolumeFormat `"cubic_millimeter"`.
	UnitVolumeFormatCubicMillimeter UnitVolumeFormat = "cubic_millimeter"
	// UnitVolumeFormatCubicCentimeter represents the UnitVolumeFormat `"cubic_centimeter"`.
	UnitVolumeFormatCubicCentimeter UnitVolumeFormat = "cubic_centimeter"
	// UnitVolumeFormatCubicMeter represents the UnitVolumeFormat `"cubic_meter"`.
	UnitVolumeFormatCubicMeter UnitVolumeFormat = "cubic_meter"
	// UnitVolumeFormatCubicKilometer represents the UnitVolumeFormat `"cubic_kilometer"`.
	UnitVolumeFormatCubicKilometer UnitVolumeFormat = "cubic_kilometer"
	// UnitVolumeFormatLiter represents the UnitVolumeFormat `"liter"`.
	UnitVolumeFormatLiter UnitVolumeFormat = "liter"
	// UnitVolumeFormatCubicFoot represents the UnitVolumeFormat `"cubic_foot"`.
	UnitVolumeFormatCubicFoot UnitVolumeFormat = "cubic_foot"
	// UnitVolumeFormatCubicYard represents the UnitVolumeFormat `"cubic_yard"`.
	UnitVolumeFormatCubicYard UnitVolumeFormat = "cubic_yard"
	// UnitVolumeFormatCubicMile represents the UnitVolumeFormat `"cubic_mile"`.
	UnitVolumeFormatCubicMile UnitVolumeFormat = "cubic_mile"
)

// UpdateUser: The user-modifiable parts of a User.
type UpdateUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// User: A user.
type User struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// UserResultsPage: A single page of results
type UserResultsPage struct {
	// Items: list of items on this page of results
	Items []User `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// VerificationToken: A verification token for a user.
// This is typically used to verify a user's email address.
type VerificationToken struct {
	// CreatedAt: The date and time the verification token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the verification token expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The token used for verification. This is used as the id for the table since it is unique per record.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Identifier: The identifier for the user. This is typically the user's email address since that is what we are verifying.
	Identifier string `json:"identifier" yaml:"identifier" schema:"identifier"`
	// UpdatedAt: The date and time the verification token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ResponseError: Error information from a response.
type ResponseError struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}
