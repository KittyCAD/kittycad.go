// Code generated by `generate`. DO NOT EDIT.

package kittycad

// AccountProvider: An account provider.
type AccountProvider string

const (
	// AccountProviderGoogle: The Google account provider.
	AccountProviderGoogle AccountProvider = "google"
	// AccountProviderGithub: The GitHub account provider.
	AccountProviderGithub AccountProvider = "github"
)

// AiPluginAPI: AI plugin api information.
type AiPluginAPI struct {
	// IsUserAuthenticated: If the API is authenticated.
	IsUserAuthenticated bool `json:"is_user_authenticated" yaml:"is_user_authenticated" schema:"is_user_authenticated"`
	// Type: The type of API.
	Type AiPluginAPIType `json:"type" yaml:"type" schema:"type"`
	// Url: The url to the API's schema.
	Url URL `json:"url" yaml:"url" schema:"url,required"`
}

// AiPluginAPIType: AI plugin api type.
type AiPluginAPIType string

const (
	// AiPluginAPITypeOpenapi: An OpenAPI specification.
	AiPluginAPITypeOpenapi AiPluginAPIType = "openapi"
)

// AiPluginAuth: AI plugin auth information.
type AiPluginAuth struct {
	// AuthorizationType: The type of http authorization.
	AuthorizationType AiPluginHttpAuthType `json:"authorization_type" yaml:"authorization_type" schema:"authorization_type"`
	// Type: The type of authentication.
	Type AiPluginAuthType `json:"type" yaml:"type" schema:"type"`
}

// AiPluginAuthType: AI plugin auth type.
type AiPluginAuthType string

const (
	// AiPluginAuthTypeNone: None.
	AiPluginAuthTypeNone AiPluginAuthType = "none"
	// AiPluginAuthTypeUserHttp: User http.
	AiPluginAuthTypeUserHttp AiPluginAuthType = "user_http"
	// AiPluginAuthTypeServiceHttp: Service http.
	AiPluginAuthTypeServiceHttp AiPluginAuthType = "service_http"
	// AiPluginAuthTypeOauth: OAuth.
	AiPluginAuthTypeOauth AiPluginAuthType = "oauth"
)

// AiPluginHttpAuthType: AI plugin http auth type.
type AiPluginHttpAuthType string

const (
	// AiPluginHttpAuthTypeBasic: Basic.
	AiPluginHttpAuthTypeBasic AiPluginHttpAuthType = "basic"
	// AiPluginHttpAuthTypeBearer: Bearer.
	AiPluginHttpAuthTypeBearer AiPluginHttpAuthType = "bearer"
)

// AiPluginManifest: AI plugin manifest.
// This is used for OpenAI's ChatGPT plugins. You can read more about them [here](https://platform.openai.com/docs/plugins/getting-started/plugin-manifest).
type AiPluginManifest struct {
	// API: API specification.
	API AiPluginAPI `json:"api" yaml:"api" schema:"api,required"`
	// Auth: Authentication schema.
	Auth AiPluginAuth `json:"auth" yaml:"auth" schema:"auth,required"`
	// ContactEmail: Email contact for safety/moderation reachout, support, and deactivation.
	ContactEmail string `json:"contact_email" yaml:"contact_email" schema:"contact_email"`
	// DescriptionForHuman: Human-readable description of the plugin.
	DescriptionForHuman string `json:"description_for_human" yaml:"description_for_human" schema:"description_for_human"`
	// DescriptionForModel: Description better tailored to the model, such as token context length considerations or keyword usage for improved plugin prompting.
	DescriptionForModel string `json:"description_for_model" yaml:"description_for_model" schema:"description_for_model"`
	// LegalInfoUrl: Redirect URL for users to view plugin information.
	LegalInfoUrl URL `json:"legal_info_url" yaml:"legal_info_url" schema:"legal_info_url,required"`
	// LogoUrl: URL used to fetch the plugin's logo.
	LogoUrl URL `json:"logo_url" yaml:"logo_url" schema:"logo_url,required"`
	// NameForHuman: Human-readable name, such as the full company name.
	NameForHuman string `json:"name_for_human" yaml:"name_for_human" schema:"name_for_human"`
	// NameForModel: Name the model will used to target the plugin.
	NameForModel string `json:"name_for_model" yaml:"name_for_model" schema:"name_for_model"`
	// SchemaVersion: Manifest schema version.
	SchemaVersion string `json:"schema_version" yaml:"schema_version" schema:"schema_version"`
}

// APICallQueryGroup: A response for a query on the API call table that is grouped by something.
type APICallQueryGroup struct {
	// Count:
	Count int `json:"count" yaml:"count" schema:"count,required"`
	// Query:
	Query string `json:"query" yaml:"query" schema:"query,required"`
}

// APICallQueryGroupBy: The field of an API call to group by.
type APICallQueryGroupBy string

const (
	// APICallQueryGroupByEmail: The email of the user that requested the API call.
	APICallQueryGroupByEmail APICallQueryGroupBy = "email"
	// APICallQueryGroupByMethod: The HTTP method of the API call.
	APICallQueryGroupByMethod APICallQueryGroupBy = "method"
	// APICallQueryGroupByEndpoint: The endpoint of the API call.
	APICallQueryGroupByEndpoint APICallQueryGroupBy = "endpoint"
	// APICallQueryGroupByUserID: The user ID of the user that requested the API call.
	APICallQueryGroupByUserID APICallQueryGroupBy = "user_id"
	// APICallQueryGroupByOrigin: The origin of the API call. This is parsed from the `Origin` header.
	APICallQueryGroupByOrigin APICallQueryGroupBy = "origin"
	// APICallQueryGroupByIpAddress: The IP address of the user making the API call.
	APICallQueryGroupByIpAddress APICallQueryGroupBy = "ip_address"
)

// APICallStatus: The status of an async API call.
type APICallStatus string

const (
	// APICallStatusQueued: The async API call is queued.
	APICallStatusQueued APICallStatus = "Queued"
	// APICallStatusUploaded: The async API call was uploaded to be converted.
	APICallStatusUploaded APICallStatus = "Uploaded"
	// APICallStatusInProgress: The async API call is in progress.
	APICallStatusInProgress APICallStatus = "In Progress"
	// APICallStatusCompleted: The async API call has completed.
	APICallStatusCompleted APICallStatus = "Completed"
	// APICallStatusFailed: The async API call has failed.
	APICallStatusFailed APICallStatus = "Failed"
)

// APICallWithPrice: An API call with the price.
// This is a join of the `ApiCall` and `ApiCallPrice` tables.
type APICallWithPrice struct {
	// CompletedAt: The date and time the API call completed billing.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The date and time the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Duration: The duration of the API call.
	Duration int `json:"duration" yaml:"duration" schema:"duration"`
	// Email: The user's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// Endpoint: The endpoint requested by the API call.
	Endpoint string `json:"endpoint" yaml:"endpoint" schema:"endpoint"`
	// ID: The unique identifier for the API call.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IPAddress: The ip address of the origin.
	IPAddress IP `json:"ip_address" yaml:"ip_address" schema:"ip_address"`
	// Litterbox: If the API call was spawned from the litterbox or not.
	Litterbox bool `json:"litterbox" yaml:"litterbox" schema:"litterbox"`
	// Method: The HTTP method requsted by the API call.
	Method Method `json:"method" yaml:"method" schema:"method,required"`
	// Minutes: The number of minutes the API call was billed for.
	Minutes int `json:"minutes" yaml:"minutes" schema:"minutes"`
	// Origin: The origin of the API call.
	Origin string `json:"origin" yaml:"origin" schema:"origin"`
	// Price: The price of the API call.
	Price float64 `json:"price" yaml:"price" schema:"price"`
	// RequestBody: The request body sent by the API call.
	RequestBody string `json:"request_body" yaml:"request_body" schema:"request_body"`
	// RequestQueryParams: The request query params sent by the API call.
	RequestQueryParams string `json:"request_query_params" yaml:"request_query_params" schema:"request_query_params"`
	// ResponseBody: The response body returned by the API call. We do not store this information if it is above a certain size.
	ResponseBody string `json:"response_body" yaml:"response_body" schema:"response_body"`
	// StartedAt: The date and time the API call started billing.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// StatusCode: The status code returned by the API call.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code"`
	// StripeInvoiceItemID: The Stripe invoice item ID of the API call if it is billable.
	StripeInvoiceItemID string `json:"stripe_invoice_item_id" yaml:"stripe_invoice_item_id" schema:"stripe_invoice_item_id"`
	// Token: The API token that made the API call.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserAgent: The user agent of the request.
	UserAgent string `json:"user_agent" yaml:"user_agent" schema:"user_agent,required"`
	// UserID: The ID of the user that made the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// APICallWithPriceResultsPage: A single page of results
type APICallWithPriceResultsPage struct {
	// Items: list of items on this page of results
	Items []APICallWithPrice `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// APIToken: An API token.
// These are used to authenticate users with Bearer authentication.
type APIToken struct {
	// CreatedAt: The date and time the API token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the API token.
	ID string `json:"id" yaml:"id" schema:"id"`
	// IsValid: If the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token.
	IsValid bool `json:"is_valid" yaml:"is_valid" schema:"is_valid,required"`
	// Token: The API token itself.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The ID of the user that owns the API token.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// APITokenResultsPage: A single page of results
type APITokenResultsPage struct {
	// Items: list of items on this page of results
	Items []APIToken `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AppClientInfo: Information about a third party app client.
type AppClientInfo struct {
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// AsyncAPICall: An async API call.
type AsyncAPICall struct {
	// CompletedAt: The time and date the async API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the async API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the async API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The JSON input for the API call. These are determined by the endpoint that is run.
	Input any `json:"input" yaml:"input" schema:"input"`
	// Output: The JSON output for the API call. These are determined by the endpoint that is run.
	Output any `json:"output" yaml:"output" schema:"output"`
	// StartedAt: The time and date the async API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the async API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type: The type of async API call.
	Type AsyncAPICallType `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the async API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the async API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Worker: The worker node that is performing or performed the async API call.
	Worker string `json:"worker" yaml:"worker" schema:"worker"`
}

// AsyncAPICallOutputCompletedAt: A file conversion.
type AsyncAPICallOutputCompletedAt struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Output: The converted file, if completed, base64 encoded.
	Output Base64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputCreatedAt: File center of mass.
type AsyncAPICallOutputCreatedAt struct {
	// CenterOfMass: The resulting center of mass.
	CenterOfMass []float64 `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputError: A file mass.
type AsyncAPICallOutputError struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputID: A file volume.
type AsyncAPICallOutputID struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// AsyncAPICallOutputOutput: A file density.
type AsyncAPICallOutputOutput struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputOutputFormat: A file surface area.
type AsyncAPICallOutputOutputFormat struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// SurfaceArea: The resulting surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallResultsPage: A single page of results
type AsyncAPICallResultsPage struct {
	// Items: list of items on this page of results
	Items []AsyncAPICall `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AsyncAPICallType: The type of async API call.
type AsyncAPICallType string

const (
	// AsyncAPICallTypeFileConversion: File conversion.
	AsyncAPICallTypeFileConversion AsyncAPICallType = "FileConversion"
	// AsyncAPICallTypeFileVolume: File volume.
	AsyncAPICallTypeFileVolume AsyncAPICallType = "FileVolume"
	// AsyncAPICallTypeFileCenterOfMass: File center of mass.
	AsyncAPICallTypeFileCenterOfMass AsyncAPICallType = "FileCenterOfMass"
	// AsyncAPICallTypeFileMass: File mass.
	AsyncAPICallTypeFileMass AsyncAPICallType = "FileMass"
	// AsyncAPICallTypeFileDensity: File density.
	AsyncAPICallTypeFileDensity AsyncAPICallType = "FileDensity"
	// AsyncAPICallTypeFileSurfaceArea: File surface area.
	AsyncAPICallTypeFileSurfaceArea AsyncAPICallType = "FileSurfaceArea"
)

// BillingInfo: The billing information for payments.
type BillingInfo struct {
	// Address: The address of the customer.
	Address NewAddress `json:"address" yaml:"address" schema:"address"`
	// Name: The name of the customer.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The phone for the customer.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CacheMetadata: Metadata about our cache.
// This is mostly used for internal purposes and debugging.
type CacheMetadata struct {
	// Ok: If the cache returned an ok response from ping.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// CameraDragInteractionType: The type of camera drag interaction.
type CameraDragInteractionType string

const (
	// CameraDragInteractionTypePan: Camera pan
	CameraDragInteractionTypePan CameraDragInteractionType = "pan"
	// CameraDragInteractionTypeRotate: Camera rotate (revolve/orbit)
	CameraDragInteractionTypeRotate CameraDragInteractionType = "rotate"
	// CameraDragInteractionTypeZoom: Camera zoom (increase or decrease distance to reference point center)
	CameraDragInteractionTypeZoom CameraDragInteractionType = "zoom"
)

// CardDetails: The card details of a payment method.
type CardDetails struct {
	// Brand: Card brand.
	//
	// Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
	Brand string `json:"brand" yaml:"brand" schema:"brand"`
	// Checks: Checks on Card address and CVC if provided.
	Checks PaymentMethodCardChecks `json:"checks" yaml:"checks" schema:"checks"`
	// Country: Two-letter ISO code representing the country of the card.
	Country string `json:"country" yaml:"country" schema:"country"`
	// ExpMonth: Two-digit number representing the card's expiration month.
	ExpMonth int `json:"exp_month" yaml:"exp_month" schema:"exp_month"`
	// ExpYear: Four-digit number representing the card's expiration year.
	ExpYear int `json:"exp_year" yaml:"exp_year" schema:"exp_year"`
	// Fingerprint: Uniquely identifies this particular card number.
	Fingerprint string `json:"fingerprint" yaml:"fingerprint" schema:"fingerprint"`
	// Funding: Card funding type.
	//
	// Can be `credit`, `debit`, `prepaid`, or `unknown`.
	Funding string `json:"funding" yaml:"funding" schema:"funding"`
	// Last4: The last four digits of the card.
	Last4 string `json:"last4" yaml:"last4" schema:"last4"`
}

// Cluster: Cluster information.
type Cluster struct {
	// Addr: The IP address of the cluster.
	Addr string `json:"addr" yaml:"addr" schema:"addr"`
	// AuthTimeout: The auth timeout of the cluster.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// ClusterPort: The port of the cluster.
	ClusterPort int `json:"cluster_port" yaml:"cluster_port" schema:"cluster_port"`
	// Name: The name of the cluster.
	Name string `json:"name" yaml:"name" schema:"name"`
	// TlsTimeout: The TLS timeout for the cluster.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
	// Urls: The urls of the cluster.
	Urls []string `json:"urls" yaml:"urls" schema:"urls"`
}

// CodeLanguage: The language code is written in.
type CodeLanguage string

const (
	// CodeLanguageGo: The `go` programming language.
	CodeLanguageGo CodeLanguage = "go"
	// CodeLanguagePython: The `python` programming language.
	CodeLanguagePython CodeLanguage = "python"
	// CodeLanguageNode: The `node` programming language.
	CodeLanguageNode CodeLanguage = "node"
)

// CodeOutput: Output of the code being executed.
type CodeOutput struct {
	// OutputFiles: The contents of the files requested if they were passed.
	OutputFiles []OutputFile `json:"output_files" yaml:"output_files" schema:"output_files"`
	// Stderr: The stderr of the code.
	Stderr string `json:"stderr" yaml:"stderr" schema:"stderr"`
	// Stdout: The stdout of the code.
	Stdout string `json:"stdout" yaml:"stdout" schema:"stdout"`
}

// Commit: Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`.
type Commit struct {
	// Expected: Commit ID of external tool expected by dockerd as set at build time.
	Expected string `json:"expected" yaml:"expected" schema:"expected"`
	// ID: Actual commit ID of external tool.
	ID string `json:"id" yaml:"id" schema:"id"`
}

// Connection: Metadata about a pub-sub connection.
// This is mostly used for internal purposes and debugging.
type Connection struct {
	// AuthTimeout: The auth timeout of the server.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Cluster: Information about the cluster.
	Cluster Cluster `json:"cluster" yaml:"cluster" schema:"cluster"`
	// ConfigLoadTime: The time the configuration was loaded.
	ConfigLoadTime Time `json:"config_load_time" yaml:"config_load_time" schema:"config_load_time,required"`
	// Connections: The number of connections to the server.
	Connections int `json:"connections" yaml:"connections" schema:"connections"`
	// Cores: The CPU core usage of the server.
	Cores int `json:"cores" yaml:"cores" schema:"cores"`
	// Cpu:
	Cpu float64 `json:"cpu" yaml:"cpu" schema:"cpu"`
	// Gateway: Information about the gateway.
	Gateway Gateway `json:"gateway" yaml:"gateway" schema:"gateway"`
	// GitCommit: The git commit.
	GitCommit string `json:"git_commit" yaml:"git_commit" schema:"git_commit"`
	// Go: The go version.
	Go string `json:"go" yaml:"go" schema:"go"`
	// Gomaxprocs: `GOMAXPROCS` of the server.
	Gomaxprocs int `json:"gomaxprocs" yaml:"gomaxprocs" schema:"gomaxprocs"`
	// Host: The host of the server.
	Host IP `json:"host" yaml:"host" schema:"host,required"`
	// HttpBasePath: The http base path of the server.
	HttpBasePath string `json:"http_base_path" yaml:"http_base_path" schema:"http_base_path"`
	// HttpHost: The http host of the server.
	HttpHost string `json:"http_host" yaml:"http_host" schema:"http_host"`
	// HttpPort: The http port of the server.
	HttpPort int `json:"http_port" yaml:"http_port" schema:"http_port"`
	// HttpReqStats:
	HttpReqStats map[string]int `json:"http_req_stats" yaml:"http_req_stats" schema:"http_req_stats,required"`
	// HttpsPort: The https port of the server.
	HttpsPort int `json:"https_port" yaml:"https_port" schema:"https_port"`
	// InBytes: The count of inbound bytes for the server.
	InBytes int `json:"in_bytes" yaml:"in_bytes" schema:"in_bytes"`
	// InMsgs: The number of inbound messages for the server.
	InMsgs int `json:"in_msgs" yaml:"in_msgs" schema:"in_msgs"`
	// Jetstream: Jetstream information.
	Jetstream Jetstream `json:"jetstream" yaml:"jetstream" schema:"jetstream"`
	// Leaf: Information about leaf nodes.
	Leaf LeafNode `json:"leaf" yaml:"leaf" schema:"leaf"`
	// Leafnodes: The number of leaf nodes for the server.
	Leafnodes int `json:"leafnodes" yaml:"leafnodes" schema:"leafnodes"`
	// MaxConnections: The max connections of the server.
	MaxConnections int `json:"max_connections" yaml:"max_connections" schema:"max_connections"`
	// MaxControlLine: The max control line of the server.
	MaxControlLine int `json:"max_control_line" yaml:"max_control_line" schema:"max_control_line"`
	// MaxPayload: The max payload of the server.
	MaxPayload int `json:"max_payload" yaml:"max_payload" schema:"max_payload"`
	// MaxPending: The max pending of the server.
	MaxPending int `json:"max_pending" yaml:"max_pending" schema:"max_pending"`
	// Mem: The memory usage of the server.
	Mem int `json:"mem" yaml:"mem" schema:"mem"`
	// Now: The time now.
	Now Time `json:"now" yaml:"now" schema:"now,required"`
	// OutBytes: The count of outbound bytes for the server.
	OutBytes int `json:"out_bytes" yaml:"out_bytes" schema:"out_bytes"`
	// OutMsgs: The number of outbound messages for the server.
	OutMsgs int `json:"out_msgs" yaml:"out_msgs" schema:"out_msgs"`
	// PingInterval: The ping interval of the server.
	PingInterval int `json:"ping_interval" yaml:"ping_interval" schema:"ping_interval"`
	// PingMax: The ping max of the server.
	PingMax int `json:"ping_max" yaml:"ping_max" schema:"ping_max"`
	// Port: The port of the server.
	Port int `json:"port" yaml:"port" schema:"port"`
	// Proto: The protocol version.
	Proto int `json:"proto" yaml:"proto" schema:"proto"`
	// Remotes: The number of remotes for the server.
	Remotes int `json:"remotes" yaml:"remotes" schema:"remotes"`
	// Routes: The number of routes for the server.
	Routes int `json:"routes" yaml:"routes" schema:"routes"`
	// ServerID: The server ID.
	ServerID string `json:"server_id" yaml:"server_id" schema:"server_id"`
	// ServerName: The server name.
	ServerName string `json:"server_name" yaml:"server_name" schema:"server_name"`
	// SlowConsumers: The number of slow consumers for the server.
	SlowConsumers int `json:"slow_consumers" yaml:"slow_consumers" schema:"slow_consumers"`
	// Start: When the server was started.
	Start Time `json:"start" yaml:"start" schema:"start,required"`
	// Subscriptions: The number of subscriptions for the server.
	Subscriptions int `json:"subscriptions" yaml:"subscriptions" schema:"subscriptions"`
	// SystemAccount: The system account.
	SystemAccount string `json:"system_account" yaml:"system_account" schema:"system_account"`
	// TlsTimeout: The TLS timeout of the server.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
	// TotalConnections: The total number of connections to the server.
	TotalConnections int `json:"total_connections" yaml:"total_connections" schema:"total_connections"`
	// Uptime: The uptime of the server.
	Uptime string `json:"uptime" yaml:"uptime" schema:"uptime"`
	// Version: The version of the service.
	Version string `json:"version" yaml:"version" schema:"version"`
	// WriteDeadline: The write deadline of the server.
	WriteDeadline int `json:"write_deadline" yaml:"write_deadline" schema:"write_deadline"`
}

// CountryCode: An enumeration of all ISO-3166 alpha-2 country codes.
type CountryCode string

const (
	// CountryCodeAF: Afghanistan
	CountryCodeAF CountryCode = "AF"
	// CountryCodeAX: Åland Islands
	CountryCodeAX CountryCode = "AX"
	// CountryCodeAL: Albania
	CountryCodeAL CountryCode = "AL"
	// CountryCodeDZ: Algeria
	CountryCodeDZ CountryCode = "DZ"
	// CountryCodeAS: American Samoa
	CountryCodeAS CountryCode = "AS"
	// CountryCodeAD: Andorra
	CountryCodeAD CountryCode = "AD"
	// CountryCodeAO: Angola
	CountryCodeAO CountryCode = "AO"
	// CountryCodeAI: Anguilla
	CountryCodeAI CountryCode = "AI"
	// CountryCodeAQ: Antarctica
	CountryCodeAQ CountryCode = "AQ"
	// CountryCodeAG: Antigua and Barbuda
	CountryCodeAG CountryCode = "AG"
	// CountryCodeAR: Argentina
	CountryCodeAR CountryCode = "AR"
	// CountryCodeAM: Armenia
	CountryCodeAM CountryCode = "AM"
	// CountryCodeAW: Aruba
	CountryCodeAW CountryCode = "AW"
	// CountryCodeAU: Australia
	CountryCodeAU CountryCode = "AU"
	// CountryCodeAT: Austria
	CountryCodeAT CountryCode = "AT"
	// CountryCodeAZ: Azerbaijan
	CountryCodeAZ CountryCode = "AZ"
	// CountryCodeBS: Bahamas
	CountryCodeBS CountryCode = "BS"
	// CountryCodeBH: Bahrain
	CountryCodeBH CountryCode = "BH"
	// CountryCodeBD: Bangladesh
	CountryCodeBD CountryCode = "BD"
	// CountryCodeBB: Barbados
	CountryCodeBB CountryCode = "BB"
	// CountryCodeBY: Belarus
	CountryCodeBY CountryCode = "BY"
	// CountryCodeBE: Belgium
	CountryCodeBE CountryCode = "BE"
	// CountryCodeBZ: Belize
	CountryCodeBZ CountryCode = "BZ"
	// CountryCodeBJ: Benin
	CountryCodeBJ CountryCode = "BJ"
	// CountryCodeBM: Bermuda
	CountryCodeBM CountryCode = "BM"
	// CountryCodeBT: Bhutan
	CountryCodeBT CountryCode = "BT"
	// CountryCodeBO: Bolivia (Plurinational State of)
	CountryCodeBO CountryCode = "BO"
	// CountryCodeBQ: Bonaire, Sint Eustatius and Saba
	CountryCodeBQ CountryCode = "BQ"
	// CountryCodeBA: Bosnia and Herzegovina
	CountryCodeBA CountryCode = "BA"
	// CountryCodeBW: Botswana
	CountryCodeBW CountryCode = "BW"
	// CountryCodeBV: Bouvet Island
	CountryCodeBV CountryCode = "BV"
	// CountryCodeBR: Brazil
	CountryCodeBR CountryCode = "BR"
	// CountryCodeIO: British Indian Ocean Territory
	CountryCodeIO CountryCode = "IO"
	// CountryCodeBN: Brunei Darussalam
	CountryCodeBN CountryCode = "BN"
	// CountryCodeBG: Bulgaria
	CountryCodeBG CountryCode = "BG"
	// CountryCodeBF: Burkina Faso
	CountryCodeBF CountryCode = "BF"
	// CountryCodeBI: Burundi
	CountryCodeBI CountryCode = "BI"
	// CountryCodeCV: Cabo Verde
	CountryCodeCV CountryCode = "CV"
	// CountryCodeKH: Cambodia
	CountryCodeKH CountryCode = "KH"
	// CountryCodeCM: Cameroon
	CountryCodeCM CountryCode = "CM"
	// CountryCodeCA: Canada
	CountryCodeCA CountryCode = "CA"
	// CountryCodeKY: Cayman Islands
	CountryCodeKY CountryCode = "KY"
	// CountryCodeCF: Central African Republic
	CountryCodeCF CountryCode = "CF"
	// CountryCodeTD: Chad
	CountryCodeTD CountryCode = "TD"
	// CountryCodeCL: Chile
	CountryCodeCL CountryCode = "CL"
	// CountryCodeCN: China
	CountryCodeCN CountryCode = "CN"
	// CountryCodeCX: Christmas Island
	CountryCodeCX CountryCode = "CX"
	// CountryCodeCC: Cocos (Keeling) Islands
	CountryCodeCC CountryCode = "CC"
	// CountryCodeCO: Colombia
	CountryCodeCO CountryCode = "CO"
	// CountryCodeKM: Comoros
	CountryCodeKM CountryCode = "KM"
	// CountryCodeCG: Congo
	CountryCodeCG CountryCode = "CG"
	// CountryCodeCD: Congo (Democratic Republic of the)
	CountryCodeCD CountryCode = "CD"
	// CountryCodeCK: Cook Islands
	CountryCodeCK CountryCode = "CK"
	// CountryCodeCR: Costa Rica
	CountryCodeCR CountryCode = "CR"
	// CountryCodeCI: Côte d'Ivoire
	CountryCodeCI CountryCode = "CI"
	// CountryCodeHR: Croatia
	CountryCodeHR CountryCode = "HR"
	// CountryCodeCU: Cuba
	CountryCodeCU CountryCode = "CU"
	// CountryCodeCW: Curaçao
	CountryCodeCW CountryCode = "CW"
	// CountryCodeCY: Cyprus
	CountryCodeCY CountryCode = "CY"
	// CountryCodeCZ: Czechia
	CountryCodeCZ CountryCode = "CZ"
	// CountryCodeDK: Denmark
	CountryCodeDK CountryCode = "DK"
	// CountryCodeDJ: Djibouti
	CountryCodeDJ CountryCode = "DJ"
	// CountryCodeDM: Dominica
	CountryCodeDM CountryCode = "DM"
	// CountryCodeDO: Dominican Republic
	CountryCodeDO CountryCode = "DO"
	// CountryCodeEC: Ecuador
	CountryCodeEC CountryCode = "EC"
	// CountryCodeEG: Egypt
	CountryCodeEG CountryCode = "EG"
	// CountryCodeSV: El Salvador
	CountryCodeSV CountryCode = "SV"
	// CountryCodeGQ: Equatorial Guinea
	CountryCodeGQ CountryCode = "GQ"
	// CountryCodeER: Eritrea
	CountryCodeER CountryCode = "ER"
	// CountryCodeEE: Estonia
	CountryCodeEE CountryCode = "EE"
	// CountryCodeET: Ethiopia
	CountryCodeET CountryCode = "ET"
	// CountryCodeFK: Falkland Islands (Malvinas)
	CountryCodeFK CountryCode = "FK"
	// CountryCodeFO: Faroe Islands
	CountryCodeFO CountryCode = "FO"
	// CountryCodeFJ: Fiji
	CountryCodeFJ CountryCode = "FJ"
	// CountryCodeFI: Finland
	CountryCodeFI CountryCode = "FI"
	// CountryCodeFR: France
	CountryCodeFR CountryCode = "FR"
	// CountryCodeGF: French Guiana
	CountryCodeGF CountryCode = "GF"
	// CountryCodePF: French Polynesia
	CountryCodePF CountryCode = "PF"
	// CountryCodeTF: French Southern Territories
	CountryCodeTF CountryCode = "TF"
	// CountryCodeGA: Gabon
	CountryCodeGA CountryCode = "GA"
	// CountryCodeGM: Gambia
	CountryCodeGM CountryCode = "GM"
	// CountryCodeGE: Georgia
	CountryCodeGE CountryCode = "GE"
	// CountryCodeDE: Germany
	CountryCodeDE CountryCode = "DE"
	// CountryCodeGH: Ghana
	CountryCodeGH CountryCode = "GH"
	// CountryCodeGI: Gibraltar
	CountryCodeGI CountryCode = "GI"
	// CountryCodeGR: Greece
	CountryCodeGR CountryCode = "GR"
	// CountryCodeGL: Greenland
	CountryCodeGL CountryCode = "GL"
	// CountryCodeGD: Grenada
	CountryCodeGD CountryCode = "GD"
	// CountryCodeGP: Guadeloupe
	CountryCodeGP CountryCode = "GP"
	// CountryCodeGU: Guam
	CountryCodeGU CountryCode = "GU"
	// CountryCodeGT: Guatemala
	CountryCodeGT CountryCode = "GT"
	// CountryCodeGG: Guernsey
	CountryCodeGG CountryCode = "GG"
	// CountryCodeGN: Guinea
	CountryCodeGN CountryCode = "GN"
	// CountryCodeGW: Guinea-Bissau
	CountryCodeGW CountryCode = "GW"
	// CountryCodeGY: Guyana
	CountryCodeGY CountryCode = "GY"
	// CountryCodeHT: Haiti
	CountryCodeHT CountryCode = "HT"
	// CountryCodeHM: Heard Island and McDonald Islands
	CountryCodeHM CountryCode = "HM"
	// CountryCodeVA: Holy See
	CountryCodeVA CountryCode = "VA"
	// CountryCodeHN: Honduras
	CountryCodeHN CountryCode = "HN"
	// CountryCodeHK: Hong Kong
	CountryCodeHK CountryCode = "HK"
	// CountryCodeHU: Hungary
	CountryCodeHU CountryCode = "HU"
	// CountryCodeIS: Iceland
	CountryCodeIS CountryCode = "IS"
	// CountryCodeIN: India
	CountryCodeIN CountryCode = "IN"
	// CountryCodeID: Indonesia
	CountryCodeID CountryCode = "ID"
	// CountryCodeIR: Iran (Islamic Republic of)
	CountryCodeIR CountryCode = "IR"
	// CountryCodeIQ: Iraq
	CountryCodeIQ CountryCode = "IQ"
	// CountryCodeIE: Ireland
	CountryCodeIE CountryCode = "IE"
	// CountryCodeIM: Isle of Man
	CountryCodeIM CountryCode = "IM"
	// CountryCodeIL: Israel
	CountryCodeIL CountryCode = "IL"
	// CountryCodeIT: Italy
	CountryCodeIT CountryCode = "IT"
	// CountryCodeJM: Jamaica
	CountryCodeJM CountryCode = "JM"
	// CountryCodeJP: Japan
	CountryCodeJP CountryCode = "JP"
	// CountryCodeJE: Jersey
	CountryCodeJE CountryCode = "JE"
	// CountryCodeJO: Jordan
	CountryCodeJO CountryCode = "JO"
	// CountryCodeKZ: Kazakhstan
	CountryCodeKZ CountryCode = "KZ"
	// CountryCodeKE: Kenya
	CountryCodeKE CountryCode = "KE"
	// CountryCodeKI: Kiribati
	CountryCodeKI CountryCode = "KI"
	// CountryCodeKP: Korea (Democratic People's Republic of)
	CountryCodeKP CountryCode = "KP"
	// CountryCodeKR: Korea (Republic of)
	CountryCodeKR CountryCode = "KR"
	// CountryCodeKW: Kuwait
	CountryCodeKW CountryCode = "KW"
	// CountryCodeKG: Kyrgyzstan
	CountryCodeKG CountryCode = "KG"
	// CountryCodeLA: Lao People's Democratic Republic
	CountryCodeLA CountryCode = "LA"
	// CountryCodeLV: Latvia
	CountryCodeLV CountryCode = "LV"
	// CountryCodeLB: Lebanon
	CountryCodeLB CountryCode = "LB"
	// CountryCodeLS: Lesotho
	CountryCodeLS CountryCode = "LS"
	// CountryCodeLR: Liberia
	CountryCodeLR CountryCode = "LR"
	// CountryCodeLY: Libya
	CountryCodeLY CountryCode = "LY"
	// CountryCodeLI: Liechtenstein
	CountryCodeLI CountryCode = "LI"
	// CountryCodeLT: Lithuania
	CountryCodeLT CountryCode = "LT"
	// CountryCodeLU: Luxembourg
	CountryCodeLU CountryCode = "LU"
	// CountryCodeMO: Macao
	CountryCodeMO CountryCode = "MO"
	// CountryCodeMK: Macedonia (the former Yugoslav Republic of)
	CountryCodeMK CountryCode = "MK"
	// CountryCodeMG: Madagascar
	CountryCodeMG CountryCode = "MG"
	// CountryCodeMW: Malawi
	CountryCodeMW CountryCode = "MW"
	// CountryCodeMY: Malaysia
	CountryCodeMY CountryCode = "MY"
	// CountryCodeMV: Maldives
	CountryCodeMV CountryCode = "MV"
	// CountryCodeML: Mali
	CountryCodeML CountryCode = "ML"
	// CountryCodeMT: Malta
	CountryCodeMT CountryCode = "MT"
	// CountryCodeMH: Marshall Islands
	CountryCodeMH CountryCode = "MH"
	// CountryCodeMQ: Martinique
	CountryCodeMQ CountryCode = "MQ"
	// CountryCodeMR: Mauritania
	CountryCodeMR CountryCode = "MR"
	// CountryCodeMU: Mauritius
	CountryCodeMU CountryCode = "MU"
	// CountryCodeYT: Mayotte
	CountryCodeYT CountryCode = "YT"
	// CountryCodeMX: Mexico
	CountryCodeMX CountryCode = "MX"
	// CountryCodeFM: Micronesia (Federated States of)
	CountryCodeFM CountryCode = "FM"
	// CountryCodeMD: Moldova (Republic of)
	CountryCodeMD CountryCode = "MD"
	// CountryCodeMC: Monaco
	CountryCodeMC CountryCode = "MC"
	// CountryCodeMN: Mongolia
	CountryCodeMN CountryCode = "MN"
	// CountryCodeME: Montenegro
	CountryCodeME CountryCode = "ME"
	// CountryCodeMS: Montserrat
	CountryCodeMS CountryCode = "MS"
	// CountryCodeMA: Morocco
	CountryCodeMA CountryCode = "MA"
	// CountryCodeMZ: Mozambique
	CountryCodeMZ CountryCode = "MZ"
	// CountryCodeMM: Myanmar
	CountryCodeMM CountryCode = "MM"
	// CountryCodeNA: Namibia
	CountryCodeNA CountryCode = "NA"
	// CountryCodeNR: Nauru
	CountryCodeNR CountryCode = "NR"
	// CountryCodeNP: Nepal
	CountryCodeNP CountryCode = "NP"
	// CountryCodeNL: Netherlands
	CountryCodeNL CountryCode = "NL"
	// CountryCodeNC: New Caledonia
	CountryCodeNC CountryCode = "NC"
	// CountryCodeNZ: New Zealand
	CountryCodeNZ CountryCode = "NZ"
	// CountryCodeNI: Nicaragua
	CountryCodeNI CountryCode = "NI"
	// CountryCodeNE: Niger
	CountryCodeNE CountryCode = "NE"
	// CountryCodeNG: Nigeria
	CountryCodeNG CountryCode = "NG"
	// CountryCodeNU: Niue
	CountryCodeNU CountryCode = "NU"
	// CountryCodeNF: Norfolk Island
	CountryCodeNF CountryCode = "NF"
	// CountryCodeMP: Northern Mariana Islands
	CountryCodeMP CountryCode = "MP"
	// CountryCodeNO: Norway
	CountryCodeNO CountryCode = "NO"
	// CountryCodeOM: Oman
	CountryCodeOM CountryCode = "OM"
	// CountryCodePK: Pakistan
	CountryCodePK CountryCode = "PK"
	// CountryCodePW: Palau
	CountryCodePW CountryCode = "PW"
	// CountryCodePS: Palestine, State of
	CountryCodePS CountryCode = "PS"
	// CountryCodePA: Panama
	CountryCodePA CountryCode = "PA"
	// CountryCodePG: Papua New Guinea
	CountryCodePG CountryCode = "PG"
	// CountryCodePY: Paraguay
	CountryCodePY CountryCode = "PY"
	// CountryCodePE: Peru
	CountryCodePE CountryCode = "PE"
	// CountryCodePH: Philippines
	CountryCodePH CountryCode = "PH"
	// CountryCodePN: Pitcairn
	CountryCodePN CountryCode = "PN"
	// CountryCodePL: Poland
	CountryCodePL CountryCode = "PL"
	// CountryCodePT: Portugal
	CountryCodePT CountryCode = "PT"
	// CountryCodePR: Puerto Rico
	CountryCodePR CountryCode = "PR"
	// CountryCodeQA: Qatar
	CountryCodeQA CountryCode = "QA"
	// CountryCodeRE: Réunion
	CountryCodeRE CountryCode = "RE"
	// CountryCodeRO: Romania
	CountryCodeRO CountryCode = "RO"
	// CountryCodeRU: Russian Federation
	CountryCodeRU CountryCode = "RU"
	// CountryCodeRW: Rwanda
	CountryCodeRW CountryCode = "RW"
	// CountryCodeBL: Saint Barthélemy
	CountryCodeBL CountryCode = "BL"
	// CountryCodeSH: Saint Helena, Ascension and Tristan da Cunha
	CountryCodeSH CountryCode = "SH"
	// CountryCodeKN: Saint Kitts and Nevis
	CountryCodeKN CountryCode = "KN"
	// CountryCodeLC: Saint Lucia
	CountryCodeLC CountryCode = "LC"
	// CountryCodeMF: Saint Martin (French part)
	CountryCodeMF CountryCode = "MF"
	// CountryCodePM: Saint Pierre and Miquelon
	CountryCodePM CountryCode = "PM"
	// CountryCodeVC: Saint Vincent and the Grenadines
	CountryCodeVC CountryCode = "VC"
	// CountryCodeWS: Samoa
	CountryCodeWS CountryCode = "WS"
	// CountryCodeSM: San Marino
	CountryCodeSM CountryCode = "SM"
	// CountryCodeST: Sao Tome and Principe
	CountryCodeST CountryCode = "ST"
	// CountryCodeSA: Saudi Arabia
	CountryCodeSA CountryCode = "SA"
	// CountryCodeSN: Senegal
	CountryCodeSN CountryCode = "SN"
	// CountryCodeRS: Serbia
	CountryCodeRS CountryCode = "RS"
	// CountryCodeSC: Seychelles
	CountryCodeSC CountryCode = "SC"
	// CountryCodeSL: Sierra Leone
	CountryCodeSL CountryCode = "SL"
	// CountryCodeSG: Singapore
	CountryCodeSG CountryCode = "SG"
	// CountryCodeSX: Sint Maarten (Dutch part)
	CountryCodeSX CountryCode = "SX"
	// CountryCodeSK: Slovakia
	CountryCodeSK CountryCode = "SK"
	// CountryCodeSI: Slovenia
	CountryCodeSI CountryCode = "SI"
	// CountryCodeSB: Solomon Islands
	CountryCodeSB CountryCode = "SB"
	// CountryCodeSO: Somalia
	CountryCodeSO CountryCode = "SO"
	// CountryCodeZA: South Africa
	CountryCodeZA CountryCode = "ZA"
	// CountryCodeGS: South Georgia and the South Sandwich Islands
	CountryCodeGS CountryCode = "GS"
	// CountryCodeSS: South Sudan
	CountryCodeSS CountryCode = "SS"
	// CountryCodeES: Spain
	CountryCodeES CountryCode = "ES"
	// CountryCodeLK: Sri Lanka
	CountryCodeLK CountryCode = "LK"
	// CountryCodeSD: Sudan
	CountryCodeSD CountryCode = "SD"
	// CountryCodeSR: Suriname
	CountryCodeSR CountryCode = "SR"
	// CountryCodeSJ: Svalbard and Jan Mayen
	CountryCodeSJ CountryCode = "SJ"
	// CountryCodeSZ: Swaziland
	CountryCodeSZ CountryCode = "SZ"
	// CountryCodeSE: Sweden
	CountryCodeSE CountryCode = "SE"
	// CountryCodeCH: Switzerland
	CountryCodeCH CountryCode = "CH"
	// CountryCodeSY: Syrian Arab Republic
	CountryCodeSY CountryCode = "SY"
	// CountryCodeTW: Taiwan, Province of China
	CountryCodeTW CountryCode = "TW"
	// CountryCodeTJ: Tajikistan
	CountryCodeTJ CountryCode = "TJ"
	// CountryCodeTZ: Tanzania, United Republic of
	CountryCodeTZ CountryCode = "TZ"
	// CountryCodeTH: Thailand
	CountryCodeTH CountryCode = "TH"
	// CountryCodeTL: Timor-Leste
	CountryCodeTL CountryCode = "TL"
	// CountryCodeTG: Togo
	CountryCodeTG CountryCode = "TG"
	// CountryCodeTK: Tokelau
	CountryCodeTK CountryCode = "TK"
	// CountryCodeTO: Tonga
	CountryCodeTO CountryCode = "TO"
	// CountryCodeTT: Trinidad and Tobago
	CountryCodeTT CountryCode = "TT"
	// CountryCodeTN: Tunisia
	CountryCodeTN CountryCode = "TN"
	// CountryCodeTR: Turkey
	CountryCodeTR CountryCode = "TR"
	// CountryCodeTM: Turkmenistan
	CountryCodeTM CountryCode = "TM"
	// CountryCodeTC: Turks and Caicos Islands
	CountryCodeTC CountryCode = "TC"
	// CountryCodeTV: Tuvalu
	CountryCodeTV CountryCode = "TV"
	// CountryCodeUG: Uganda
	CountryCodeUG CountryCode = "UG"
	// CountryCodeUA: Ukraine
	CountryCodeUA CountryCode = "UA"
	// CountryCodeAE: United Arab Emirates
	CountryCodeAE CountryCode = "AE"
	// CountryCodeGB: United Kingdom of Great Britain and Northern Ireland
	CountryCodeGB CountryCode = "GB"
	// CountryCodeUS: United States of America
	CountryCodeUS CountryCode = "US"
	// CountryCodeUM: United States Minor Outlying Islands
	CountryCodeUM CountryCode = "UM"
	// CountryCodeUY: Uruguay
	CountryCodeUY CountryCode = "UY"
	// CountryCodeUZ: Uzbekistan
	CountryCodeUZ CountryCode = "UZ"
	// CountryCodeVU: Vanuatu
	CountryCodeVU CountryCode = "VU"
	// CountryCodeVE: Venezuela (Bolivarian Republic of)
	CountryCodeVE CountryCode = "VE"
	// CountryCodeVN: Viet Nam
	CountryCodeVN CountryCode = "VN"
	// CountryCodeVG: Virgin Islands (British)
	CountryCodeVG CountryCode = "VG"
	// CountryCodeVI: Virgin Islands (U.S.)
	CountryCodeVI CountryCode = "VI"
	// CountryCodeWF: Wallis and Futuna
	CountryCodeWF CountryCode = "WF"
	// CountryCodeEH: Western Sahara
	CountryCodeEH CountryCode = "EH"
	// CountryCodeYE: Yemen
	CountryCodeYE CountryCode = "YE"
	// CountryCodeZM: Zambia
	CountryCodeZM CountryCode = "ZM"
	// CountryCodeZW: Zimbabwe
	CountryCodeZW CountryCode = "ZW"
)

// Coupon: The resource representing a Coupon.
type Coupon struct {
	// AmountOff: Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
	AmountOff float64 `json:"amount_off" yaml:"amount_off" schema:"amount_off"`
	// Deleted: Always true for a deleted object.
	Deleted bool `json:"deleted" yaml:"deleted" schema:"deleted"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// PercentOff: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.
	//
	// For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
	PercentOff float64 `json:"percent_off" yaml:"percent_off" schema:"percent_off"`
}

// CreatedAtSortMode: Supported set of sort modes for scanning by created_at only.
// Currently, we only support scanning in ascending order.
type CreatedAtSortMode string

const (
	// CreatedAtSortModeCreatedAtAscending: sort in increasing order of "created_at"
	CreatedAtSortModeCreatedAtAscending CreatedAtSortMode = "created-at-ascending"
	// CreatedAtSortModeCreatedAtDescending: sort in decreasing order of "created_at"
	CreatedAtSortModeCreatedAtDescending CreatedAtSortMode = "created-at-descending"
)

// Currency: Currency is the list of supported currencies.
// This comes from the Stripe API docs: For more details see <https://support.stripe.com/questions/which-currencies-does-stripe-support>.
type Currency string

const (
	// CurrencyAed: United Arab Emirates Dirham
	CurrencyAed Currency = "aed"
	// CurrencyAfn: Afghan Afghani
	CurrencyAfn Currency = "afn"
	// CurrencyAll: Albanian Lek
	CurrencyAll Currency = "all"
	// CurrencyAmd: Armenian Dram
	CurrencyAmd Currency = "amd"
	// CurrencyAng: Netherlands Antillean Gulden
	CurrencyAng Currency = "ang"
	// CurrencyAoa: Angolan Kwanza
	CurrencyAoa Currency = "aoa"
	// CurrencyArs: Argentine Peso
	CurrencyArs Currency = "ars"
	// CurrencyAud: Australian Dollar
	CurrencyAud Currency = "aud"
	// CurrencyAwg: Aruban Florin
	CurrencyAwg Currency = "awg"
	// CurrencyAzn: Azerbaijani Manat
	CurrencyAzn Currency = "azn"
	// CurrencyBam: Bosnia & Herzegovina Convertible Mark
	CurrencyBam Currency = "bam"
	// CurrencyBbd: Barbadian Dollar
	CurrencyBbd Currency = "bbd"
	// CurrencyBdt: Bangladeshi Taka
	CurrencyBdt Currency = "bdt"
	// CurrencyBgn: Bulgarian Lev
	CurrencyBgn Currency = "bgn"
	// CurrencyBif: Burundian Franc
	CurrencyBif Currency = "bif"
	// CurrencyBmd: Bermudian Dollar
	CurrencyBmd Currency = "bmd"
	// CurrencyBnd: Brunei Dollar
	CurrencyBnd Currency = "bnd"
	// CurrencyBob: Bolivian Boliviano
	CurrencyBob Currency = "bob"
	// CurrencyBrl: Brazilian Real
	CurrencyBrl Currency = "brl"
	// CurrencyBsd: Bahamian Dollar
	CurrencyBsd Currency = "bsd"
	// CurrencyBwp: Botswana Pula
	CurrencyBwp Currency = "bwp"
	// CurrencyBzd: Belize Dollar
	CurrencyBzd Currency = "bzd"
	// CurrencyCad: Canadian Dollar
	CurrencyCad Currency = "cad"
	// CurrencyCdf: Congolese Franc
	CurrencyCdf Currency = "cdf"
	// CurrencyChf: Swiss Franc
	CurrencyChf Currency = "chf"
	// CurrencyClp: Chilean Peso
	CurrencyClp Currency = "clp"
	// CurrencyCny: Chinese Renminbi Yuan
	CurrencyCny Currency = "cny"
	// CurrencyCop: Colombian Peso
	CurrencyCop Currency = "cop"
	// CurrencyCrc: Costa Rican Colón
	CurrencyCrc Currency = "crc"
	// CurrencyCve: Cape Verdean Escudo
	CurrencyCve Currency = "cve"
	// CurrencyCzk: Czech Koruna
	CurrencyCzk Currency = "czk"
	// CurrencyDjf: Djiboutian Franc
	CurrencyDjf Currency = "djf"
	// CurrencyDkk: Danish Krone
	CurrencyDkk Currency = "dkk"
	// CurrencyDop: Dominican Peso
	CurrencyDop Currency = "dop"
	// CurrencyDzd: Algerian Dinar
	CurrencyDzd Currency = "dzd"
	// CurrencyEek: Estonian Kroon
	CurrencyEek Currency = "eek"
	// CurrencyEgp: Egyptian Pound
	CurrencyEgp Currency = "egp"
	// CurrencyEtb: Ethiopian Birr
	CurrencyEtb Currency = "etb"
	// CurrencyEur: Euro
	CurrencyEur Currency = "eur"
	// CurrencyFjd: Fijian Dollar
	CurrencyFjd Currency = "fjd"
	// CurrencyFkp: Falkland Islands Pound
	CurrencyFkp Currency = "fkp"
	// CurrencyGbp: British Pound
	CurrencyGbp Currency = "gbp"
	// CurrencyGel: Georgian Lari
	CurrencyGel Currency = "gel"
	// CurrencyGip: Gibraltar Pound
	CurrencyGip Currency = "gip"
	// CurrencyGmd: Gambian Dalasi
	CurrencyGmd Currency = "gmd"
	// CurrencyGnf: Guinean Franc
	CurrencyGnf Currency = "gnf"
	// CurrencyGtq: Guatemalan Quetzal
	CurrencyGtq Currency = "gtq"
	// CurrencyGyd: Guyanese Dollar
	CurrencyGyd Currency = "gyd"
	// CurrencyHkd: Hong Kong Dollar
	CurrencyHkd Currency = "hkd"
	// CurrencyHnl: Honduran Lempira
	CurrencyHnl Currency = "hnl"
	// CurrencyHrk: Croatian Kuna
	CurrencyHrk Currency = "hrk"
	// CurrencyHtg: Haitian Gourde
	CurrencyHtg Currency = "htg"
	// CurrencyHuf: Hungarian Forint
	CurrencyHuf Currency = "huf"
	// CurrencyIdr: Indonesian Rupiah
	CurrencyIdr Currency = "idr"
	// CurrencyIls: Israeli New Sheqel
	CurrencyIls Currency = "ils"
	// CurrencyInr: Indian Rupee
	CurrencyInr Currency = "inr"
	// CurrencyIsk: Icelandic Króna
	CurrencyIsk Currency = "isk"
	// CurrencyJmd: Jamaican Dollar
	CurrencyJmd Currency = "jmd"
	// CurrencyJpy: Japanese Yen
	CurrencyJpy Currency = "jpy"
	// CurrencyKes: Kenyan Shilling
	CurrencyKes Currency = "kes"
	// CurrencyKgs: Kyrgyzstani Som
	CurrencyKgs Currency = "kgs"
	// CurrencyKhr: Cambodian Riel
	CurrencyKhr Currency = "khr"
	// CurrencyKmf: Comorian Franc
	CurrencyKmf Currency = "kmf"
	// CurrencyKrw: South Korean Won
	CurrencyKrw Currency = "krw"
	// CurrencyKyd: Cayman Islands Dollar
	CurrencyKyd Currency = "kyd"
	// CurrencyKzt: Kazakhstani Tenge
	CurrencyKzt Currency = "kzt"
	// CurrencyLak: Lao Kip
	CurrencyLak Currency = "lak"
	// CurrencyLbp: Lebanese Pound
	CurrencyLbp Currency = "lbp"
	// CurrencyLkr: Sri Lankan Rupee
	CurrencyLkr Currency = "lkr"
	// CurrencyLrd: Liberian Dollar
	CurrencyLrd Currency = "lrd"
	// CurrencyLsl: Lesotho Loti
	CurrencyLsl Currency = "lsl"
	// CurrencyLtl: Lithuanian Litas
	CurrencyLtl Currency = "ltl"
	// CurrencyLvl: Latvian Lats
	CurrencyLvl Currency = "lvl"
	// CurrencyMad: Moroccan Dirham
	CurrencyMad Currency = "mad"
	// CurrencyMdl: Moldovan Leu
	CurrencyMdl Currency = "mdl"
	// CurrencyMga: Malagasy Ariary
	CurrencyMga Currency = "mga"
	// CurrencyMkd: Macedonian Denar
	CurrencyMkd Currency = "mkd"
	// CurrencyMnt: Mongolian Tögrög
	CurrencyMnt Currency = "mnt"
	// CurrencyMop: Macanese Pataca
	CurrencyMop Currency = "mop"
	// CurrencyMro: Mauritanian Ouguiya
	CurrencyMro Currency = "mro"
	// CurrencyMur: Mauritian Rupee
	CurrencyMur Currency = "mur"
	// CurrencyMvr: Maldivian Rufiyaa
	CurrencyMvr Currency = "mvr"
	// CurrencyMwk: Malawian Kwacha
	CurrencyMwk Currency = "mwk"
	// CurrencyMxn: Mexican Peso
	CurrencyMxn Currency = "mxn"
	// CurrencyMyr: Malaysian Ringgit
	CurrencyMyr Currency = "myr"
	// CurrencyMzn: Mozambican Metical
	CurrencyMzn Currency = "mzn"
	// CurrencyNad: Namibian Dollar
	CurrencyNad Currency = "nad"
	// CurrencyNgn: Nigerian Naira
	CurrencyNgn Currency = "ngn"
	// CurrencyNio: Nicaraguan Córdoba
	CurrencyNio Currency = "nio"
	// CurrencyNok: Norwegian Krone
	CurrencyNok Currency = "nok"
	// CurrencyNpr: Nepalese Rupee
	CurrencyNpr Currency = "npr"
	// CurrencyNzd: New Zealand Dollar
	CurrencyNzd Currency = "nzd"
	// CurrencyPab: Panamanian Balboa
	CurrencyPab Currency = "pab"
	// CurrencyPen: Peruvian Nuevo Sol
	CurrencyPen Currency = "pen"
	// CurrencyPgk: Papua New Guinean Kina
	CurrencyPgk Currency = "pgk"
	// CurrencyPhp: Philippine Peso
	CurrencyPhp Currency = "php"
	// CurrencyPkr: Pakistani Rupee
	CurrencyPkr Currency = "pkr"
	// CurrencyPln: Polish Złoty
	CurrencyPln Currency = "pln"
	// CurrencyPyg: Paraguayan Guaraní
	CurrencyPyg Currency = "pyg"
	// CurrencyQar: Qatari Riyal
	CurrencyQar Currency = "qar"
	// CurrencyRon: Romanian Leu
	CurrencyRon Currency = "ron"
	// CurrencyRsd: Serbian Dinar
	CurrencyRsd Currency = "rsd"
	// CurrencyRub: Russian Ruble
	CurrencyRub Currency = "rub"
	// CurrencyRwf: Rwandan Franc
	CurrencyRwf Currency = "rwf"
	// CurrencySar: Saudi Riyal
	CurrencySar Currency = "sar"
	// CurrencySbd: Solomon Islands Dollar
	CurrencySbd Currency = "sbd"
	// CurrencyScr: Seychellois Rupee
	CurrencyScr Currency = "scr"
	// CurrencySek: Swedish Krona
	CurrencySek Currency = "sek"
	// CurrencySgd: Singapore Dollar
	CurrencySgd Currency = "sgd"
	// CurrencyShp: Saint Helenian Pound
	CurrencyShp Currency = "shp"
	// CurrencySll: Sierra Leonean Leone
	CurrencySll Currency = "sll"
	// CurrencySos: Somali Shilling
	CurrencySos Currency = "sos"
	// CurrencySrd: Surinamese Dollar
	CurrencySrd Currency = "srd"
	// CurrencyStd: São Tomé and Príncipe Dobra
	CurrencyStd Currency = "std"
	// CurrencySvc: Salvadoran Colón
	CurrencySvc Currency = "svc"
	// CurrencySzl: Swazi Lilangeni
	CurrencySzl Currency = "szl"
	// CurrencyThb: Thai Baht
	CurrencyThb Currency = "thb"
	// CurrencyTjs: Tajikistani Somoni
	CurrencyTjs Currency = "tjs"
	// CurrencyTop: Tongan Paʻanga
	CurrencyTop Currency = "top"
	// CurrencyTry: Turkish Lira
	CurrencyTry Currency = "try"
	// CurrencyTtd: Trinidad and Tobago Dollar
	CurrencyTtd Currency = "ttd"
	// CurrencyTwd: New Taiwan Dollar
	CurrencyTwd Currency = "twd"
	// CurrencyTzs: Tanzanian Shilling
	CurrencyTzs Currency = "tzs"
	// CurrencyUah: Ukrainian Hryvnia
	CurrencyUah Currency = "uah"
	// CurrencyUgx: Ugandan Shilling
	CurrencyUgx Currency = "ugx"
	// CurrencyUsd: United States Dollar
	CurrencyUsd Currency = "usd"
	// CurrencyUyu: Uruguayan Peso
	CurrencyUyu Currency = "uyu"
	// CurrencyUzs: Uzbekistani Som
	CurrencyUzs Currency = "uzs"
	// CurrencyVef: Venezuelan Bolívar
	CurrencyVef Currency = "vef"
	// CurrencyVnd: Vietnamese Đồng
	CurrencyVnd Currency = "vnd"
	// CurrencyVuv: Vanuatu Vatu
	CurrencyVuv Currency = "vuv"
	// CurrencyWst: Samoan Tala
	CurrencyWst Currency = "wst"
	// CurrencyXaf: Central African Cfa Franc
	CurrencyXaf Currency = "xaf"
	// CurrencyXcd: East Caribbean Dollar
	CurrencyXcd Currency = "xcd"
	// CurrencyXof: West African Cfa Franc
	CurrencyXof Currency = "xof"
	// CurrencyXpf: Cfp Franc
	CurrencyXpf Currency = "xpf"
	// CurrencyYer: Yemeni Rial
	CurrencyYer Currency = "yer"
	// CurrencyZar: South African Rand
	CurrencyZar Currency = "zar"
	// CurrencyZmw: Zambian Kwacha
	CurrencyZmw Currency = "zmw"
)

// Customer: The resource representing a payment "Customer".
type Customer struct {
	// Address: The customer's address.
	Address NewAddress `json:"address" yaml:"address" schema:"address"`
	// Balance: Current balance, if any, being stored on the customer in the payments service.
	//
	// If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
	Balance float64 `json:"balance" yaml:"balance" schema:"balance"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency"`
	// Delinquent: When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed.
	//
	// When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by dunning, `delinquent` doesn't get reset to `false`.
	Delinquent bool `json:"delinquent" yaml:"delinquent" schema:"delinquent"`
	// Email: The customer's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Name: The customer's full name or business name.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The customer's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CustomerBalance: A balance for a user.
// This holds information about the financial balance for the user.
type CustomerBalance struct {
	// CreatedAt: The date and time the balance was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the balance.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MonthlyCreditsRemaining: The monthy credits remaining in the balance. This gets re-upped every month, but if the credits are not used for a month they do not carry over to the next month. It is a stable amount granted to the user per month.
	MonthlyCreditsRemaining float64 `json:"monthly_credits_remaining" yaml:"monthly_credits_remaining" schema:"monthly_credits_remaining,required"`
	// PrePayCashRemaining: The amount of pre-pay cash remaining in the balance. This number goes down as the user uses their pre-paid credits. The reason we track this amount is if a user ever wants to withdraw their pre-pay cash, we can use this amount to determine how much to give them. Say a user has $100 in pre-paid cash, their bill is worth, $50 after subtracting any other credits (like monthly etc.) Their bill is $50, their pre-pay cash remaining will be subtracted by 50 to pay the bill and their `pre_pay_credits_remaining` will be subtracted by 50 to pay the bill. This way if they want to withdraw money after, they can only withdraw $50 since that is the amount of cash they have remaining.
	PrePayCashRemaining float64 `json:"pre_pay_cash_remaining" yaml:"pre_pay_cash_remaining" schema:"pre_pay_cash_remaining,required"`
	// PrePayCreditsRemaining: The amount of credits remaining in the balance. This is typically the amount of cash * some multiplier they get for pre-paying their account. This number lowers every time a bill is paid with the balance. This number increases every time a user adds funds to their balance. This may be through a subscription or a one off payment.
	PrePayCreditsRemaining float64 `json:"pre_pay_credits_remaining" yaml:"pre_pay_credits_remaining" schema:"pre_pay_credits_remaining,required"`
	// TotalDue: This includes any outstanding, draft, or open invoices and any pending invoice items. This does not include any credits the user has on their account.
	TotalDue float64 `json:"total_due" yaml:"total_due" schema:"total_due,required"`
	// UpdatedAt: The date and time the balance was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID the balance belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// DeviceAccessTokenRequestForm: The form for a device access token request.
type DeviceAccessTokenRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
	// DeviceCode: The device code.
	DeviceCode UUID `json:"device_code" yaml:"device_code" schema:"device_code,required"`
	// GrantType: The grant type.
	GrantType OAuth2GrantType `json:"grant_type" yaml:"grant_type" schema:"grant_type,required"`
}

// DeviceAuthRequestForm: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
type DeviceAuthRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
}

// DeviceAuthVerifyParams: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.
type DeviceAuthVerifyParams struct {
	// UserCode: The user code.
	UserCode string `json:"user_code" yaml:"user_code" schema:"user_code,required"`
}

// Discount: The resource representing a Discount.
type Discount struct {
	// Coupon: The coupon that applied to create this discount.
	Coupon Coupon `json:"coupon" yaml:"coupon" schema:"coupon,required"`
}

// DockerSystemInfo: Docker system info.
type DockerSystemInfo struct {
	// Architecture: Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
	Architecture string `json:"architecture" yaml:"architecture" schema:"architecture"`
	// BridgeNfIp6Tables: Indicates if `bridge-nf-call-ip6tables` is available on the host.
	BridgeNfIp6Tables bool `json:"bridge_nf_ip6tables" yaml:"bridge_nf_ip6tables" schema:"bridge_nf_ip6tables"`
	// BridgeNfIptables: Indicates if `bridge-nf-call-iptables` is available on the host.
	BridgeNfIptables bool `json:"bridge_nf_iptables" yaml:"bridge_nf_iptables" schema:"bridge_nf_iptables"`
	// CgroupDriver: The driver to use for managing cgroups.
	CgroupDriver SystemInfoCgroupDriverEnum `json:"cgroup_driver" yaml:"cgroup_driver" schema:"cgroup_driver"`
	// CgroupVersion: The version of the cgroup.
	CgroupVersion SystemInfoCgroupVersionEnum `json:"cgroup_version" yaml:"cgroup_version" schema:"cgroup_version"`
	// ClusterAdvertise: The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.
	//
	// **Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty.
	ClusterAdvertise string `json:"cluster_advertise" yaml:"cluster_advertise" schema:"cluster_advertise"`
	// ClusterStore: URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.
	//
	// **Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty.
	ClusterStore string `json:"cluster_store" yaml:"cluster_store" schema:"cluster_store"`
	// ContainerdCommit:
	ContainerdCommit Commit `json:"containerd_commit" yaml:"containerd_commit" schema:"containerd_commit"`
	// Containers: Total number of containers on the host.
	Containers int `json:"containers" yaml:"containers" schema:"containers"`
	// ContainersPaused: Number of containers with status `\"paused\"`.
	ContainersPaused int `json:"containers_paused" yaml:"containers_paused" schema:"containers_paused"`
	// ContainersRunning: Number of containers with status `\"running\"`.
	ContainersRunning int `json:"containers_running" yaml:"containers_running" schema:"containers_running"`
	// ContainersStopped: Number of containers with status `\"stopped\"`.
	ContainersStopped int `json:"containers_stopped" yaml:"containers_stopped" schema:"containers_stopped"`
	// CpuCfsPeriod: Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
	CpuCfsPeriod bool `json:"cpu_cfs_period" yaml:"cpu_cfs_period" schema:"cpu_cfs_period"`
	// CpuCfsQuota: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
	CpuCfsQuota bool `json:"cpu_cfs_quota" yaml:"cpu_cfs_quota" schema:"cpu_cfs_quota"`
	// CpuSet: Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
	CpuSet bool `json:"cpu_set" yaml:"cpu_set" schema:"cpu_set"`
	// CpuShares: Indicates if CPU Shares limiting is supported by the host.
	CpuShares bool `json:"cpu_shares" yaml:"cpu_shares" schema:"cpu_shares"`
	// Debug: Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
	Debug bool `json:"debug" yaml:"debug" schema:"debug"`
	// DefaultAddressPools: List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools.
	DefaultAddressPools []SystemInfoDefaultAddressPools `json:"default_address_pools" yaml:"default_address_pools" schema:"default_address_pools"`
	// DefaultRuntime: Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.
	DefaultRuntime string `json:"default_runtime" yaml:"default_runtime" schema:"default_runtime"`
	// DockerRootDir: Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.
	DockerRootDir string `json:"docker_root_dir" yaml:"docker_root_dir" schema:"docker_root_dir"`
	// Driver: Name of the storage driver in use.
	Driver string `json:"driver" yaml:"driver" schema:"driver"`
	// DriverStatus: Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.
	//
	// **Note**: The information returned in this field, including the formatting of values and labels, should not be considered stable, and may change without notice.
	DriverStatus [][]string `json:"driver_status" yaml:"driver_status" schema:"driver_status"`
	// ExperimentalBuild: Indicates if experimental features are enabled on the daemon.
	ExperimentalBuild bool `json:"experimental_build" yaml:"experimental_build" schema:"experimental_build"`
	// HttpProxy: HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
	HttpProxy string `json:"http_proxy" yaml:"http_proxy" schema:"http_proxy"`
	// HttpsProxy: HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
	HttpsProxy string `json:"https_proxy" yaml:"https_proxy" schema:"https_proxy"`
	// ID: Unique identifier of the daemon.
	//
	// **Note**: The format of the ID itself is not part of the API, and should not be considered stable.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Images: Total number of images on the host. Both _tagged_ and _untagged_ (dangling) images are counted.
	Images int `json:"images" yaml:"images" schema:"images"`
	// IndexServerAddress: Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.
	IndexServerAddress string `json:"index_server_address" yaml:"index_server_address" schema:"index_server_address"`
	// InitBinary: Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
	InitBinary string `json:"init_binary" yaml:"init_binary" schema:"init_binary"`
	// InitCommit:
	InitCommit Commit `json:"init_commit" yaml:"init_commit" schema:"init_commit"`
	// Ipv4Forwarding: Indicates IPv4 forwarding is enabled.
	Ipv4Forwarding bool `json:"ipv4_forwarding" yaml:"ipv4_forwarding" schema:"ipv4_forwarding"`
	// Isolation: Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.
	Isolation SystemInfoIsolationEnum `json:"isolation" yaml:"isolation" schema:"isolation"`
	// KernelMemory: Indicates if the host has kernel memory limit support enabled.
	//
	// **Deprecated**: This field is deprecated as the kernel 5.4 deprecated `kmem.limit_in_bytes`.
	KernelMemory bool `json:"kernel_memory" yaml:"kernel_memory" schema:"kernel_memory"`
	// KernelMemoryTcp: Indicates if the host has kernel memory TCP limit support enabled.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
	KernelMemoryTcp bool `json:"kernel_memory_tcp" yaml:"kernel_memory_tcp" schema:"kernel_memory_tcp"`
	// KernelVersion: Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.
	KernelVersion string `json:"kernel_version" yaml:"kernel_version" schema:"kernel_version"`
	// Labels: User-defined labels (key/value metadata) as set on the daemon.
	//
	// **Note**: When part of a Swarm, nodes can both have _daemon_ labels, set through the daemon configuration, and _node_ labels, set from a manager node in the Swarm. Node labels are not included in this field. Node labels can be retrieved using the `/nodes/(id)` endpoint on a manager node in the Swarm.
	Labels []string `json:"labels" yaml:"labels" schema:"labels"`
	// LiveRestoreEnabled: Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.
	LiveRestoreEnabled bool `json:"live_restore_enabled" yaml:"live_restore_enabled" schema:"live_restore_enabled"`
	// LoggingDriver: The logging driver to use as a default for new containers.
	LoggingDriver string `json:"logging_driver" yaml:"logging_driver" schema:"logging_driver"`
	// MemTotal: Total amount of physical memory available on the host, in bytes.
	MemTotal int `json:"mem_total" yaml:"mem_total" schema:"mem_total"`
	// MemoryLimit: Indicates if the host has memory limit support enabled.
	MemoryLimit bool `json:"memory_limit" yaml:"memory_limit" schema:"memory_limit"`
	// NEventsListener: Number of event listeners subscribed.
	NEventsListener int `json:"n_events_listener" yaml:"n_events_listener" schema:"n_events_listener"`
	// NFd: The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.
	NFd int `json:"n_fd" yaml:"n_fd" schema:"n_fd"`
	// Name: Hostname of the host.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Ncpu: The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.
	Ncpu int `json:"ncpu" yaml:"ncpu" schema:"ncpu"`
	// NoProxy: Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.
	NoProxy string `json:"no_proxy" yaml:"no_proxy" schema:"no_proxy"`
	// OomKillDisable: Indicates if OOM killer disable is supported on the host.
	OomKillDisable bool `json:"oom_kill_disable" yaml:"oom_kill_disable" schema:"oom_kill_disable"`
	// OperatingSystem: Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"
	OperatingSystem string `json:"operating_system" yaml:"operating_system" schema:"operating_system"`
	// OsType: Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
	OsType string `json:"os_type" yaml:"os_type" schema:"os_type"`
	// OsVersion: Version of the host's operating system
	//
	// **Note**: The information returned in this field, including its very existence, and the formatting of values, should not be considered stable, and may change without notice.
	OsVersion string `json:"os_version" yaml:"os_version" schema:"os_version"`
	// PidsLimit: Indicates if the host kernel has PID limit support enabled.
	PidsLimit bool `json:"pids_limit" yaml:"pids_limit" schema:"pids_limit"`
	// Plugins:
	Plugins PluginsInfo `json:"plugins" yaml:"plugins" schema:"plugins"`
	// ProductLicense: Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included.
	ProductLicense string `json:"product_license" yaml:"product_license" schema:"product_license"`
	// RegistryConfig:
	RegistryConfig RegistryServiceConfig `json:"registry_config" yaml:"registry_config" schema:"registry_config"`
	// RuncCommit:
	RuncCommit Commit `json:"runc_commit" yaml:"runc_commit" schema:"runc_commit"`
	// Runtimes:
	Runtimes map[string]Runtime `json:"runtimes" yaml:"runtimes" schema:"runtimes"`
	// SecurityOptions: List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.
	SecurityOptions []string `json:"security_options" yaml:"security_options" schema:"security_options"`
	// ServerVersion: Version string of the daemon. **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) returns the Swarm version instead of the daemon  version, for example `swarm/1.2.8`.
	ServerVersion string `json:"server_version" yaml:"server_version" schema:"server_version"`
	// SwapLimit: Indicates if the host has memory swap limit support enabled.
	SwapLimit bool `json:"swap_limit" yaml:"swap_limit" schema:"swap_limit"`
	// SystemTime: The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.
	SystemTime string `json:"system_time" yaml:"system_time" schema:"system_time"`
	// Warnings: List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user.
	Warnings []string `json:"warnings" yaml:"warnings" schema:"warnings"`
}

// EmailAuthenticationForm: The body of the form for email authentication.
type EmailAuthenticationForm struct {
	// CallbackUrl: The URL to redirect back to after we have authenticated.
	CallbackUrl URL `json:"callback_url" yaml:"callback_url" schema:"callback_url"`
	// Email: The user's email.
	Email string `json:"email" yaml:"email" schema:"email,required"`
}

// EngineMetadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type EngineMetadata struct {
	// AsyncJobsRunning: If any async job is currently running.
	AsyncJobsRunning bool `json:"async_jobs_running" yaml:"async_jobs_running" schema:"async_jobs_running,required"`
	// Cache: Metadata about our cache.
	Cache CacheMetadata `json:"cache" yaml:"cache" schema:"cache,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// Fs: Metadata about our file system.
	Fs FileSystemMetadata `json:"fs" yaml:"fs" schema:"fs,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
	// Pubsub: Metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub" yaml:"pubsub" schema:"pubsub,required"`
}

// Environment: The environment the server is running in.
type Environment string

const (
	// EnvironmentDEVELOPMENT: The development environment. This is for running locally.
	EnvironmentDEVELOPMENT Environment = "DEVELOPMENT"
	// EnvironmentPREVIEW: The preview environment. This is when PRs are created and a service is deployed for testing.
	EnvironmentPREVIEW Environment = "PREVIEW"
	// EnvironmentPRODUCTION: The production environment.
	EnvironmentPRODUCTION Environment = "PRODUCTION"
)

// Error: Error information from a response.
type Error struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}

// ExecutorMetadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type ExecutorMetadata struct {
	// DockerInfo: Information about the docker daemon.
	DockerInfo DockerSystemInfo `json:"docker_info" yaml:"docker_info" schema:"docker_info,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
}

// ExtendedUser: Extended user information.
// This is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: MailChimp, Stripe, and Front
type ExtendedUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// FrontID: The user's Front ID. This is mostly used for internal mapping.
	FrontID string `json:"front_id" yaml:"front_id" schema:"front_id"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// MailchimpID: The user's MailChimp ID. This is mostly used for internal mapping.
	MailchimpID string `json:"mailchimp_id" yaml:"mailchimp_id" schema:"mailchimp_id"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// StripeID: The user's Stripe ID. This is mostly used for internal mapping.
	StripeID string `json:"stripe_id" yaml:"stripe_id" schema:"stripe_id"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ExtendedUserResultsPage: A single page of results
type ExtendedUserResultsPage struct {
	// Items: list of items on this page of results
	Items []ExtendedUser `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// Extrude: Command for extruding a solid.
type Extrude struct {
	// Cap: Whether to cap the extrusion with a face, or not. If true, the resulting solid will be closed on all sides, like a dice. If false, it will be open on one side, like a drinking glass.
	Cap bool `json:"cap" yaml:"cap" schema:"cap,required"`
	// Distance: How far off the plane to extrude
	Distance float64 `json:"distance" yaml:"distance" schema:"distance,required"`
	// Target: Which sketch to extrude. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
}

// FileCenterOfMass: A file center of mass result.
type FileCenterOfMass struct {
	// CenterOfMass: The resulting center of mass.
	CenterOfMass []float64 `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileConversion: A file conversion.
type FileConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Output: The converted file, if completed, base64 encoded.
	Output Base64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileDensity: A file density result.
type FileDensity struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileExportFormat: The valid types of output file formats.
type FileExportFormat string

const (
	// FileExportFormatDae: The COLLADA/DAE file format. <https://en.wikipedia.org/wiki/COLLADA>
	FileExportFormatDae FileExportFormat = "dae"
	// FileExportFormatDxf: The DXF file format. <https://en.wikipedia.org/wiki/AutoCAD_DXF>
	FileExportFormatDxf FileExportFormat = "dxf"
	// FileExportFormatFbx: The FBX file format. <https://en.wikipedia.org/wiki/FBX>
	FileExportFormatFbx FileExportFormat = "fbx"
	// FileExportFormatFbxb: The FBX file format (in binary). <https://en.wikipedia.org/wiki/FBX>
	FileExportFormatFbxb FileExportFormat = "fbxb"
	// FileExportFormatObj: The OBJ file format. A zip file containing both the obj file itself and its associated mtl file for full processing. <https://en.wikipedia.org/wiki/Wavefront_.obj_file>> The OBJ file format. <https://en.wikipedia.org/wiki/Wavefront_.obj_file> It may or may not have an an attached material (mtl // mtllib) within the file, but we interact with it as if it does not.
	FileExportFormatObj FileExportFormat = "obj"
	// FileExportFormatPly: The PLY file format. <https://en.wikipedia.org/wiki/PLY_(file_format)>
	FileExportFormatPly FileExportFormat = "ply"
	// FileExportFormatStep: The STEP file format. <https://en.wikipedia.org/wiki/ISO_10303-21>
	FileExportFormatStep FileExportFormat = "step"
	// FileExportFormatStl: The STL file format. <https://en.wikipedia.org/wiki/STL_(file_format)>
	FileExportFormatStl FileExportFormat = "stl"
)

// FileImportFormat: The valid types of source file formats.
type FileImportFormat string

const (
	// FileImportFormatDae: The COLLADA/DAE file format. <https://en.wikipedia.org/wiki/COLLADA>
	FileImportFormatDae FileImportFormat = "dae"
	// FileImportFormatDxf: The DXF file format. <https://en.wikipedia.org/wiki/AutoCAD_DXF>
	FileImportFormatDxf FileImportFormat = "dxf"
	// FileImportFormatFbx: The FBX file format. <https://en.wikipedia.org/wiki/FBX>
	FileImportFormatFbx FileImportFormat = "fbx"
	// FileImportFormatObjZip: The OBJ file format. A zip file containing both the obj file itself and its associated mtl file for full processing. <https://en.wikipedia.org/wiki/Wavefront_.obj_file>>
	FileImportFormatObjZip FileImportFormat = "obj_zip"
	// FileImportFormatObj: The OBJ file format. <https://en.wikipedia.org/wiki/Wavefront_.obj_file> It may or may not have an an attached material (mtl // mtllib) within the file, but we interact with it as if it does not.
	FileImportFormatObj FileImportFormat = "obj"
	// FileImportFormatPly: The PLY file format. <https://en.wikipedia.org/wiki/PLY_(file_format)>
	FileImportFormatPly FileImportFormat = "ply"
	// FileImportFormatStep: The STEP file format. <https://en.wikipedia.org/wiki/ISO_10303-21>
	FileImportFormatStep FileImportFormat = "step"
	// FileImportFormatStl: The STL file format. <https://en.wikipedia.org/wiki/STL_(file_format)>
	FileImportFormatStl FileImportFormat = "stl"
)

// FileMass: A file mass result.
type FileMass struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileSurfaceArea: A file surface area result.
type FileSurfaceArea struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// SurfaceArea: The resulting surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileSystemMetadata: Metadata about our file system.
// This is mostly used for internal purposes and debugging.
type FileSystemMetadata struct {
	// Ok: If the file system passed a sanity check.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// FileVolume: A file volume result.
type FileVolume struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// Gateway: Gateway information.
type Gateway struct {
	// AuthTimeout: The auth timeout of the gateway.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Host: The host of the gateway.
	Host string `json:"host" yaml:"host" schema:"host"`
	// Name: The name of the gateway.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Port: The port of the gateway.
	Port int `json:"port" yaml:"port" schema:"port"`
	// TlsTimeout: The TLS timeout for the gateway.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
}

// ImageType: An enumeration.
type ImageType string

const (
	// ImageTypePng represents the ImageType `"png"`.
	ImageTypePng ImageType = "png"
	// ImageTypeJpg represents the ImageType `"jpg"`.
	ImageTypeJpg ImageType = "jpg"
)

// IndexInfo: IndexInfo contains information about a registry.
type IndexInfo struct {
	// Mirrors: List of mirrors, expressed as URIs.
	Mirrors []string `json:"mirrors" yaml:"mirrors" schema:"mirrors"`
	// Name: Name of the registry, such as \"docker.io\".
	Name string `json:"name" yaml:"name" schema:"name"`
	// Official: Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
	Official bool `json:"official" yaml:"official" schema:"official"`
	// Secure: Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.
	//
	// **Warning**: Insecure registries can be useful when running a local registry. However, because its use creates security vulnerabilities it should ONLY be enabled for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option.
	Secure bool `json:"secure" yaml:"secure" schema:"secure"`
}

// Invoice: An invoice.
type Invoice struct {
	// AmountDue: Final amount due at this time for this invoice.
	//
	// If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
	AmountDue float64 `json:"amount_due" yaml:"amount_due" schema:"amount_due"`
	// AmountPaid: The amount, in USD, that was paid.
	AmountPaid float64 `json:"amount_paid" yaml:"amount_paid" schema:"amount_paid"`
	// AmountRemaining: The amount remaining, in USD, that is due.
	AmountRemaining float64 `json:"amount_remaining" yaml:"amount_remaining" schema:"amount_remaining"`
	// AttemptCount: Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.
	//
	// Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
	AttemptCount int `json:"attempt_count" yaml:"attempt_count" schema:"attempt_count"`
	// Attempted: Whether an attempt has been made to pay the invoice.
	//
	// An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
	Attempted bool `json:"attempted" yaml:"attempted" schema:"attempted"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency"`
	// CustomerEmail: The email address for the customer. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.
	CustomerEmail string `json:"customer_email" yaml:"customer_email" schema:"customer_email"`
	// CustomerID: Customer ID. The unique identifier for the customer this invoice belongs to. This is the customer ID in the payments service, not our database customer ID.
	CustomerID string `json:"customer_id" yaml:"customer_id" schema:"customer_id"`
	// DefaultPaymentMethod: Default payment method.
	DefaultPaymentMethod string `json:"default_payment_method" yaml:"default_payment_method" schema:"default_payment_method"`
	// Description: Description of the invoice.
	Description string `json:"description" yaml:"description" schema:"description"`
	// Discounts: The discounts applied to the invoice. This is an array of discount objects.
	Discounts []Discount `json:"discounts" yaml:"discounts" schema:"discounts"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Lines: The individual line items that make up the invoice.
	//
	// `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
	Lines []InvoiceLineItem `json:"lines" yaml:"lines" schema:"lines"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Number: A unique, identifying string that appears on emails sent to the customer for this invoice.
	Number string `json:"number" yaml:"number" schema:"number"`
	// Paid: Whether payment was successfully collected for this invoice.
	//
	// An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	Paid bool `json:"paid" yaml:"paid" schema:"paid"`
	// Pdf: The link to download the PDF for the invoice.
	Pdf URL `json:"pdf" yaml:"pdf" schema:"pdf"`
	// ReceiptNumber: This is the transaction number that appears on email receipts sent for this invoice.
	ReceiptNumber string `json:"receipt_number" yaml:"receipt_number" schema:"receipt_number"`
	// StatementDescriptor: Extra information about an invoice for the customer's credit card statement.
	StatementDescriptor string `json:"statement_descriptor" yaml:"statement_descriptor" schema:"statement_descriptor"`
	// Status: The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
	//
	// [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview).
	Status InvoiceStatus `json:"status" yaml:"status" schema:"status"`
	// Subtotal: Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied.
	//
	// Item discounts are already incorporated.
	Subtotal float64 `json:"subtotal" yaml:"subtotal" schema:"subtotal"`
	// Tax: The amount of tax on this invoice.
	//
	// This is the sum of all the tax amounts on this invoice.
	Tax float64 `json:"tax" yaml:"tax" schema:"tax"`
	// Total: Total after discounts and taxes.
	Total float64 `json:"total" yaml:"total" schema:"total"`
	// Url: The URL for the hosted invoice page, which allows customers to view and pay an invoice.
	Url URL `json:"url" yaml:"url" schema:"url"`
}

// InvoiceLineItem: An invoice line item.
type InvoiceLineItem struct {
	// Amount: The amount, in USD.
	Amount float64 `json:"amount" yaml:"amount" schema:"amount"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency"`
	// Description: The description.
	Description string `json:"description" yaml:"description" schema:"description"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// InvoiceItem: The ID of the invoice item associated with this line item if any.
	InvoiceItem string `json:"invoice_item" yaml:"invoice_item" schema:"invoice_item"`
	// Metadata: Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
	//
	// Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
}

// InvoiceStatus: An enum representing the possible values of an `Invoice`'s `status` field.
type InvoiceStatus string

const (
	// InvoiceStatusDeleted: Deleted.
	InvoiceStatusDeleted InvoiceStatus = "deleted"
	// InvoiceStatusDraft: Draft.
	InvoiceStatusDraft InvoiceStatus = "draft"
	// InvoiceStatusOpen: Open.
	InvoiceStatusOpen InvoiceStatus = "open"
	// InvoiceStatusPaid: Paid.
	InvoiceStatusPaid InvoiceStatus = "paid"
	// InvoiceStatusUncollectible: Uncollectible.
	InvoiceStatusUncollectible InvoiceStatus = "uncollectible"
	// InvoiceStatusVoid: Void.
	InvoiceStatusVoid InvoiceStatus = "void"
)

// Jetstream: Jetstream information.
type Jetstream struct {
	// Config: The Jetstream config.
	Config JetstreamConfig `json:"config" yaml:"config" schema:"config"`
	// Meta: Meta information about the cluster.
	Meta MetaClusterInfo `json:"meta" yaml:"meta" schema:"meta"`
	// Stats: Jetstream statistics.
	Stats JetstreamStats `json:"stats" yaml:"stats" schema:"stats"`
}

// JetstreamAPIStats: Jetstream API statistics.
type JetstreamAPIStats struct {
	// Errors: The number of errors.
	Errors int `json:"errors" yaml:"errors" schema:"errors"`
	// Inflight: The number of inflight requests.
	Inflight int `json:"inflight" yaml:"inflight" schema:"inflight"`
	// Total: The number of requests.
	Total int `json:"total" yaml:"total" schema:"total"`
}

// JetstreamConfig: Jetstream configuration.
type JetstreamConfig struct {
	// Domain: The domain.
	Domain string `json:"domain" yaml:"domain" schema:"domain"`
	// MaxMemory: The max memory.
	MaxMemory int `json:"max_memory" yaml:"max_memory" schema:"max_memory"`
	// MaxStorage: The max storage.
	MaxStorage int `json:"max_storage" yaml:"max_storage" schema:"max_storage"`
	// StoreDir: The store directory.
	StoreDir string `json:"store_dir" yaml:"store_dir" schema:"store_dir"`
}

// JetstreamStats: Jetstream statistics.
type JetstreamStats struct {
	// Accounts: The number of accounts.
	Accounts int `json:"accounts" yaml:"accounts" schema:"accounts"`
	// API: API stats.
	API JetstreamAPIStats `json:"api" yaml:"api" schema:"api"`
	// HaAssets: The number of HA assets.
	HaAssets int `json:"ha_assets" yaml:"ha_assets" schema:"ha_assets"`
	// Memory: The memory used by the Jetstream server.
	Memory int `json:"memory" yaml:"memory" schema:"memory"`
	// ReservedMemory: The reserved memory for the Jetstream server.
	ReservedMemory int `json:"reserved_memory" yaml:"reserved_memory" schema:"reserved_memory"`
	// ReservedStore: The reserved storage for the Jetstream server.
	ReservedStore int `json:"reserved_store" yaml:"reserved_store" schema:"reserved_store"`
	// Store: The storage used by the Jetstream server.
	Store int `json:"store" yaml:"store" schema:"store"`
}

// LeafNode: Leaf node information.
type LeafNode struct {
	// AuthTimeout: The auth timeout of the leaf node.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Host: The host of the leaf node.
	Host string `json:"host" yaml:"host" schema:"host"`
	// Port: The port of the leaf node.
	Port int `json:"port" yaml:"port" schema:"port"`
	// TlsTimeout: The TLS timeout for the leaf node.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
}

// Mesh is the type definition for a Mesh.
type Mesh struct {
	// Mesh:
	Mesh string `json:"mesh" yaml:"mesh" schema:"mesh,required"`
}

// MetaClusterInfo: Jetstream statistics.
type MetaClusterInfo struct {
	// ClusterSize: The size of the cluster.
	ClusterSize int `json:"cluster_size" yaml:"cluster_size" schema:"cluster_size"`
	// Leader: The leader of the cluster.
	Leader string `json:"leader" yaml:"leader" schema:"leader"`
	// Name: The name of the cluster.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// Metadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type Metadata struct {
	// Cache: Metadata about our cache.
	Cache CacheMetadata `json:"cache" yaml:"cache" schema:"cache,required"`
	// Engine: Metadata about our engine API connection.
	Engine EngineMetadata `json:"engine" yaml:"engine" schema:"engine,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// Executor: Metadata about our executor API connection.
	Executor ExecutorMetadata `json:"executor" yaml:"executor" schema:"executor,required"`
	// Fs: Metadata about our file system.
	Fs FileSystemMetadata `json:"fs" yaml:"fs" schema:"fs,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
	// PointE: Metadata about our point-e instance.
	PointE PointEMetadata `json:"point_e" yaml:"point_e" schema:"point_e,required"`
	// Pubsub: Metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub" yaml:"pubsub" schema:"pubsub,required"`
}

// Method: The Request Method (VERB)
// This type also contains constants for a number of common HTTP methods such as GET, POST, etc.
//
// Currently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions.
type Method string

const (
	// MethodOPTIONS: The `OPTIONS` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.2.1).
	MethodOPTIONS Method = "OPTIONS"
	// MethodGET: The `GET` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodGET Method = "GET"
	// MethodPOST: The `POST` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodPOST Method = "POST"
	// MethodPUT: The `PUT` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodPUT Method = "PUT"
	// MethodDELETE: The `DELETE` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.5).
	MethodDELETE Method = "DELETE"
	// MethodHEAD: The `HEAD` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.2).
	MethodHEAD Method = "HEAD"
	// MethodTRACE: The `TRACE` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3).
	MethodTRACE Method = "TRACE"
	// MethodCONNECT: The `CONNECT` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.6).
	MethodCONNECT Method = "CONNECT"
	// MethodPATCH: The `PATCH` method as defined in [RFC 5789](https://tools.ietf.org/html/rfc5789).
	MethodPATCH Method = "PATCH"
	// MethodEXTENSION: A catch all.
	MethodEXTENSION Method = "EXTENSION"
)

// StartPath: Start a path.
type StartPath string

const (
	// StartPathStartPath represents the StartPath `"StartPath"`.
	StartPathStartPath StartPath = "StartPath"
)

// MovePathPen is the type definition for a MovePathPen.
type MovePathPen struct {
	// Path: The ID of the command which created the path.
	Path UUID `json:"path" yaml:"path" schema:"path,required"`
	// To: Where the path's pen should be.
	To Point3D `json:"to" yaml:"to" schema:"to,required"`
}

// ModelingCmdMovePathPen: Move the path's "pen".
type ModelingCmdMovePathPen struct {
	// MovePathPen:
	MovePathPen MovePathPen `json:"MovePathPen" yaml:"MovePathPen" schema:"MovePathPen,required"`
}

// ExtendPath is the type definition for a ExtendPath.
type ExtendPath struct {
	// Path: The ID of the command which created the path.
	Path UUID `json:"path" yaml:"path" schema:"path,required"`
	// Segment: Segment to append to the path. This segment will implicitly begin at the current "pen" location.
	Segment any `json:"segment" yaml:"segment" schema:"segment,required"`
}

// ModelingCmdExtendPath: Extend a path by adding a new segment which starts at the path's "pen". If no "pen" location has been set before (via `MovePen`), then the pen is at the origin.
type ModelingCmdExtendPath struct {
	// ExtendPath:
	ExtendPath ExtendPath `json:"ExtendPath" yaml:"ExtendPath" schema:"ExtendPath,required"`
}

// ModelingCmdExtrude: Extrude a 2D solid.
type ModelingCmdExtrude struct {
	// Extrude: Command for extruding a solid.
	Extrude Extrude `json:"Extrude" yaml:"Extrude" schema:"Extrude,required"`
}

// ClosePath is the type definition for a ClosePath.
type ClosePath struct {
	// PathID: Which path to close.
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
}

// ModelingCmdClosePath: Closes a path, converting it to a 2D solid.
type ModelingCmdClosePath struct {
	// ClosePath:
	ClosePath ClosePath `json:"ClosePath" yaml:"ClosePath" schema:"ClosePath,required"`
}

// CameraDragStart is the type definition for a CameraDragStart.
type CameraDragStart struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Window: The initial mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdCameraDragStart: Camera drag started.
type ModelingCmdCameraDragStart struct {
	// CameraDragStart:
	CameraDragStart CameraDragStart `json:"CameraDragStart" yaml:"CameraDragStart" schema:"CameraDragStart,required"`
}

// CameraDragMove is the type definition for a CameraDragMove.
type CameraDragMove struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Window: The current mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdCameraDragMove: Camera drag continued.
type ModelingCmdCameraDragMove struct {
	// CameraDragMove:
	CameraDragMove CameraDragMove `json:"CameraDragMove" yaml:"CameraDragMove" schema:"CameraDragMove,required"`
}

// CameraDragEnd is the type definition for a CameraDragEnd.
type CameraDragEnd struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Window: The final mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdCameraDragEnd: Camera drag ended.
type ModelingCmdCameraDragEnd struct {
	// CameraDragEnd:
	CameraDragEnd CameraDragEnd `json:"CameraDragEnd" yaml:"CameraDragEnd" schema:"CameraDragEnd,required"`
}

// ModelingCmdReq: A graphics command submitted to the KittyCAD engine via the Modeling API.
type ModelingCmdReq struct {
	// Cmd: Which command to submit to the Kittycad engine.
	Cmd any `json:"cmd" yaml:"cmd" schema:"cmd,required"`
	// CmdID: ID of command being submitted.
	CmdID UUID `json:"cmd_id" yaml:"cmd_id" schema:"cmd_id,required"`
	// FileID: ID of the model's file.
	FileID string `json:"file_id" yaml:"file_id" schema:"file_id,required"`
}

// ModelingCmdReqBatch: A batch set of graphics commands submitted to the KittyCAD engine via the Modeling API.
type ModelingCmdReqBatch struct {
	// Cmds: A set of commands to submit to the KittyCAD engine in a batch.
	Cmds map[string]ModelingCmdReq `json:"cmds" yaml:"cmds" schema:"cmds,required"`
	// FileID: Which file is being drawn in.
	FileID string `json:"file_id" yaml:"file_id" schema:"file_id,required"`
}

// ModelingError: Why a command submitted to the Modeling API failed.
type ModelingError struct {
	// ErrorCode: A string error code which refers to a family of errors. E.g. "InvalidInput".
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code,required"`
	// ExternalMessage: Describe the specific error which occurred. Will be shown to users, not logged.
	ExternalMessage string `json:"external_message" yaml:"external_message" schema:"external_message,required"`
	// InternalMessage: Describe the specific error which occurred. Will be logged, not shown to users.
	InternalMessage string `json:"internal_message" yaml:"internal_message" schema:"internal_message,required"`
	// StatusCode: A HTTP status code.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code,required"`
}

// ModelingOutcomeSuccess: Each successful command has some result. Unfortunately this isn't strongly typed, because the result depends on the command. This means the OpenAPI schema for this won't be very useful.
type ModelingOutcomeSuccess struct {
	// Success:
	Success any `json:"Success" yaml:"Success" schema:"Success,required"`
}

// ModelingOutcomeError: It failed. Why? See 'struct Error' above.
type ModelingOutcomeError struct {
	// Error: Why a command submitted to the Modeling API failed.
	Error ModelingError `json:"Error" yaml:"Error" schema:"Error,required"`
}

// Cancelled is the type definition for a Cancelled.
type Cancelled struct {
	// WhatFailed: The ID of the command that failed, cancelling this command.
	WhatFailed UUID `json:"what_failed" yaml:"what_failed" schema:"what_failed,required"`
}

// ModelingOutcomeCancelled: Cancelled because it required the output of a previous command, which failed.
type ModelingOutcomeCancelled struct {
	// Cancelled:
	Cancelled Cancelled `json:"Cancelled" yaml:"Cancelled" schema:"Cancelled,required"`
}

// ModelingOutcomes: The result from a batch of modeling commands.
type ModelingOutcomes struct {
	// Outcomes: The results from each command in the batch.
	Outcomes map[string]any `json:"outcomes" yaml:"outcomes" schema:"outcomes,required"`
}

// NewAddress: The struct that is used to create a new record. This is automatically generated and has all the same fields as the main struct only it is missing the `id`.
type NewAddress struct {
	// City: The city component.
	City string `json:"city" yaml:"city" schema:"city"`
	// Country: The country component. This is a two-letter ISO country code.
	Country CountryCode `json:"country" yaml:"country" schema:"country,required"`
	// State: The state component.
	State string `json:"state" yaml:"state" schema:"state"`
	// Street1: The first street component.
	Street1 string `json:"street1" yaml:"street1" schema:"street1"`
	// Street2: The second street component.
	Street2 string `json:"street2" yaml:"street2" schema:"street2"`
	// UserID: The user ID that this address belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Zip: The zip component.
	Zip string `json:"zip" yaml:"zip" schema:"zip"`
}

// OAuth2ClientInfo: Information about an OAuth 2.0 client.
type OAuth2ClientInfo struct {
	// CsrfToken: Value used for [CSRF](https://tools.ietf.org/html/rfc6749#section-10.12) protection via the `state` parameter.
	CsrfToken string `json:"csrf_token" yaml:"csrf_token" schema:"csrf_token"`
	// PkceCodeVerifier: Code Verifier used for [PKCE]((https://tools.ietf.org/html/rfc7636)) protection via the `code_verifier` parameter. The value must have a minimum length of 43 characters and a maximum length of 128 characters.  Each character must be ASCII alphanumeric or one of the characters "-" / "." / "_" / "~".
	PkceCodeVerifier string `json:"pkce_code_verifier" yaml:"pkce_code_verifier" schema:"pkce_code_verifier"`
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// OAuth2GrantType: An OAuth 2.0 Grant Type. These are documented here: <https://oauth.net/2/grant-types/>.
type OAuth2GrantType string

const (
	// OAuth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode: An OAuth 2.0 Device Authorization Grant.
	OAuth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode OAuth2GrantType = "urn:ietf:params:oauth:grant-type:device_code"
)

// Onboarding: Onboarding details
type Onboarding struct {
	// FirstCallFromTheirMachineDate: When the user first called an endpoint from their machine (i.e. not a litterbox execution)
	FirstCallFromTheirMachineDate string `json:"first_call_from_their_machine_date" yaml:"first_call_from_their_machine_date" schema:"first_call_from_their_machine_date"`
	// FirstLitterboxExecuteDate: When the user first used the litterbox
	FirstLitterboxExecuteDate string `json:"first_litterbox_execute_date" yaml:"first_litterbox_execute_date" schema:"first_litterbox_execute_date"`
	// FirstTokenDate: When the user created their first token
	FirstTokenDate string `json:"first_token_date" yaml:"first_token_date" schema:"first_token_date"`
}

// OutputFile: Output file contents.
type OutputFile struct {
	// Contents: The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON.
	Contents string `json:"contents" yaml:"contents" schema:"contents"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// Line is the type definition for a Line.
type Line struct {
	// End: End point of the line.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
}

// PathSegmentLine: A straight line segment. Goes from the current path "pen" to the given endpoint.
type PathSegmentLine struct {
	// Line:
	Line Line `json:"Line" yaml:"Line" schema:"Line,required"`
}

// Arc is the type definition for a Arc.
type Arc struct {
	// AngleEnd: Start of the arc along circle's perimeter.
	AngleEnd float64 `json:"angle_end" yaml:"angle_end" schema:"angle_end,required"`
	// AngleStart: Start of the arc along circle's perimeter.
	AngleStart float64 `json:"angle_start" yaml:"angle_start" schema:"angle_start,required"`
	// Center: Center of the circle
	Center Point2D `json:"center" yaml:"center" schema:"center,required"`
	// Radius: Radius of the circle
	Radius float64 `json:"radius" yaml:"radius" schema:"radius,required"`
}

// PathSegmentArc: A circular arc segment.
type PathSegmentArc struct {
	// Arc:
	Arc Arc `json:"Arc" yaml:"Arc" schema:"Arc,required"`
}

// Bezier is the type definition for a Bezier.
type Bezier struct {
	// Control1: First control point.
	Control1 Point3D `json:"control1" yaml:"control1" schema:"control1,required"`
	// Control2: Second control point.
	Control2 Point3D `json:"control2" yaml:"control2" schema:"control2,required"`
	// End: Final control point.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
}

// PathSegmentBezier: A cubic bezier curve segment. Start at the end of the current line, go through control point 1 and 2, then end at a given point.
type PathSegmentBezier struct {
	// Bezier:
	Bezier Bezier `json:"Bezier" yaml:"Bezier" schema:"Bezier,required"`
}

// PaymentIntent: A payment intent response.
type PaymentIntent struct {
	// ClientSecret: The client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
	ClientSecret string `json:"client_secret" yaml:"client_secret" schema:"client_secret,required"`
}

// PaymentMethod: A payment method.
type PaymentMethod struct {
	// BillingInfo: The billing info for the payment method.
	BillingInfo BillingInfo `json:"billing_info" yaml:"billing_info" schema:"billing_info,required"`
	// Card: The card, if it is one. For our purposes, this is the only type of payment method that we support.
	Card CardDetails `json:"card" yaml:"card" schema:"card"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Type: The type of payment method.
	Type PaymentMethodType `json:"type" yaml:"type" schema:"type,required"`
}

// PaymentMethodCardChecks: Card checks.
type PaymentMethodCardChecks struct {
	// AddressLine1Check: If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressLine1Check string `json:"address_line1_check" yaml:"address_line1_check" schema:"address_line1_check"`
	// AddressPostalCodeCheck: If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressPostalCodeCheck string `json:"address_postal_code_check" yaml:"address_postal_code_check" schema:"address_postal_code_check"`
	// CvcCheck: If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	CvcCheck string `json:"cvc_check" yaml:"cvc_check" schema:"cvc_check"`
}

// PaymentMethodType: An enum representing the possible values of an `PaymentMethod`'s `type` field.
type PaymentMethodType string

const (
	// PaymentMethodTypeCard: A card payment method.
	PaymentMethodTypeCard PaymentMethodType = "card"
)

// PhysicsConstant: A physics constant.
type PhysicsConstant struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// Constant: The constant we are returning.
	Constant PhysicsConstantName `json:"constant" yaml:"constant" schema:"constant,required"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Value: The resulting value of the constant.
	Value float64 `json:"value" yaml:"value" schema:"value"`
}

// PhysicsConstantName: The valid types of phys constant names.
type PhysicsConstantName string

const (
	// PhysicsConstantNamePi: pi - Ratio of a circle's circumference to its diameter. <https://en.wikipedia.org/wiki/Pi>
	PhysicsConstantNamePi PhysicsConstantName = "pi"
	// PhysicsConstantNameC: c - Speed of light in vacuum. <https://en.wikipedia.org/wiki//Speed_of_light>
	PhysicsConstantNameC PhysicsConstantName = "c"
	// PhysicsConstantNameSpeedOfLight: Speed of light in a vacuum. <https://en.wikipedia.org/wiki//Speed_of_light>
	PhysicsConstantNameSpeedOfLight PhysicsConstantName = "speed_of_light"
	// PhysicsConstantNameG: G - Newtonian constant of gravitation. <https://en.wikipedia.org/wiki/Gravitational_constant>
	PhysicsConstantNameG PhysicsConstantName = "G"
	// PhysicsConstantNameNewtonianGravitation: Newtonian constant of gravitation. <https://en.wikipedia.org/wiki/Gravitational_constant>
	PhysicsConstantNameNewtonianGravitation PhysicsConstantName = "newtonian_gravitation"
	// PhysicsConstantNameH: h - Planck constant. <https://en.wikipedia.org/wiki/Planck_constant>
	PhysicsConstantNameH PhysicsConstantName = "h"
	// PhysicsConstantNamePlanckConst: Planck constant. <https://en.wikipedia.org/wiki/Planck_constant>
	PhysicsConstantNamePlanckConst PhysicsConstantName = "planck_const"
	// PhysicsConstantNameMu0: mu_0 - vacuum permeability. <https://en.wikipedia.org/wiki/Vacuum_permeability>
	PhysicsConstantNameMu0 PhysicsConstantName = "mu_0"
	// PhysicsConstantNameVacuumPermeability: vacuum permeability. <https://en.wikipedia.org/wiki/Vacuum_permeability>
	PhysicsConstantNameVacuumPermeability PhysicsConstantName = "vacuum_permeability"
	// PhysicsConstantNameE0: ε_0 - vacuum permitivity. <https://en.wikipedia.org/wiki/Vacuum_permittivity>
	PhysicsConstantNameE0 PhysicsConstantName = "E_0"
	// PhysicsConstantNameVacuumPermitivity: vacuum permitivity. <https://en.wikipedia.org/wiki/Vacuum_permittivity>]
	PhysicsConstantNameVacuumPermitivity PhysicsConstantName = "vacuum_permitivity"
	// PhysicsConstantNameZ0: Z_0 - characteristic impedance of vacuum. <https://en.wikipedia.org/wiki/Impedance_of_free_space>
	PhysicsConstantNameZ0 PhysicsConstantName = "Z_0"
	// PhysicsConstantNameVacuumImpedance: characteristic impedance of vacuum. <https://en.wikipedia.org/wiki/Impedance_of_free_space>
	PhysicsConstantNameVacuumImpedance PhysicsConstantName = "vacuum_impedance"
	// PhysicsConstantNameKE: k_e - Coulomb's constant. <https://en.wikipedia.org/wiki/Coulomb_constant>
	PhysicsConstantNameKE PhysicsConstantName = "k_e"
	// PhysicsConstantNameCoulombConst: Coulomb's constant. <https://en.wikipedia.org/wiki/Coulomb_constant>
	PhysicsConstantNameCoulombConst PhysicsConstantName = "coulomb_const"
	// PhysicsConstantNameE: e - elementary charge. <https://en.wikipedia.org/wiki/Elementary_charge>
	PhysicsConstantNameE PhysicsConstantName = "e"
	// PhysicsConstantNameElementaryCharge: elementary charge. <https://en.wikipedia.org/wiki/Elementary_charge>
	PhysicsConstantNameElementaryCharge PhysicsConstantName = "elementary_charge"
	// PhysicsConstantNameME: m_e - electron mass. <https://en.wikipedia.org/wiki/Electron_mass>
	PhysicsConstantNameME PhysicsConstantName = "m_e"
	// PhysicsConstantNameElectronMass: electron mass. <https://en.wikipedia.org/wiki/Electron_mass>
	PhysicsConstantNameElectronMass PhysicsConstantName = "electron_mass"
	// PhysicsConstantNameMP: m_p - proton mass. <https://en.wikipedia.org/wiki/Proton>
	PhysicsConstantNameMP PhysicsConstantName = "m_p"
	// PhysicsConstantNameProtonMass: proton mass. <https://en.wikipedia.org/wiki/Proton>
	PhysicsConstantNameProtonMass PhysicsConstantName = "proton_mass"
	// PhysicsConstantNameMuB: mu_B - Bohr magneton. <https://en.wikipedia.org/wiki/Bohr_magneton>
	PhysicsConstantNameMuB PhysicsConstantName = "mu_B"
	// PhysicsConstantNameBohrMagneton: Bohr magneton. <https://en.wikipedia.org/wiki/Bohr_magneton>
	PhysicsConstantNameBohrMagneton PhysicsConstantName = "bohr_magneton"
	// PhysicsConstantNameNA: NA - Avogadro's Number. <https://en.wikipedia.org/wiki/Avogadro_constant>
	PhysicsConstantNameNA PhysicsConstantName = "NA"
	// PhysicsConstantNameAvogadroNum: Avogadro's Number. <https://en.wikipedia.org/wiki/Avogadro_constant>
	PhysicsConstantNameAvogadroNum PhysicsConstantName = "avogadro_num"
	// PhysicsConstantNameR: R - Molar Gas constant. <https://en.wikipedia.org/wiki/Gas_constant>
	PhysicsConstantNameR PhysicsConstantName = "R"
	// PhysicsConstantNameMolarGasConst: Molar Gas constant. <https://en.wikipedia.org/wiki/Gas_constant>
	PhysicsConstantNameMolarGasConst PhysicsConstantName = "molar_gas_const"
	// PhysicsConstantNameKB: K_B - Boltzmann constant. <https://en.wikipedia.org/wiki/Boltzmann_constant>
	PhysicsConstantNameKB PhysicsConstantName = "K_B"
	// PhysicsConstantNameBoltzmannConst: Boltzmann constant. <https://en.wikipedia.org/wiki/Boltzmann_constant>
	PhysicsConstantNameBoltzmannConst PhysicsConstantName = "boltzmann_const"
	// PhysicsConstantNameF: F - Faraday constant. <https://en.wikipedia.org/wiki/Faraday_constant>
	PhysicsConstantNameF PhysicsConstantName = "F"
	// PhysicsConstantNameFaradayConst: Faraday constant. <https://en.wikipedia.org/wiki/Faraday_constant>
	PhysicsConstantNameFaradayConst PhysicsConstantName = "faraday_const"
	// PhysicsConstantNameSigma: Sigma - Stefan-Boltzmann constant. <https://en.wikipedia.org/wiki/Stefan%E2%80%93Boltzmann_constant>
	PhysicsConstantNameSigma PhysicsConstantName = "sigma"
	// PhysicsConstantNameStefanBoltzmannConst: Stefan-Boltzmann constant. <https://en.wikipedia.org/wiki/Stefan%E2%80%93Boltzmann_constant>
	PhysicsConstantNameStefanBoltzmannConst PhysicsConstantName = "stefan_boltzmann_const"
)

// PluginsInfo: Available plugins per type.
// **Note**: Only unmanaged (V1) plugins are included in this list. V1 plugins are \"lazily\" loaded, and are not returned in this list if there is no resource using the plugin.
type PluginsInfo struct {
	// Authorization: Names of available authorization plugins.
	Authorization []string `json:"authorization" yaml:"authorization" schema:"authorization"`
	// Log: Names of available logging-drivers, and logging-driver plugins.
	Log []string `json:"log" yaml:"log" schema:"log"`
	// Network: Names of available network-drivers, and network-driver plugins.
	Network []string `json:"network" yaml:"network" schema:"network"`
	// Volume: Names of available volume-drivers, and network-driver plugins.
	Volume []string `json:"volume" yaml:"volume" schema:"volume"`
}

// Point2D: A point in 2D space
type Point2D struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
}

// Point3D: A point in 3D space
type Point3D struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
	// Z:
	Z float64 `json:"z" yaml:"z" schema:"z,required"`
}

// PointEMetadata: Metadata about our point-e instance.
// This is mostly used for internal purposes and debugging.
type PointEMetadata struct {
	// Ok: If the point-e service returned an ok response from ping.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// Pong: The response from the `/ping` endpoint.
type Pong struct {
	// Message: The pong response.
	Message string `json:"message" yaml:"message" schema:"message,required"`
}

// RegistryServiceConfig: RegistryServiceConfig stores daemon registry services configuration.
type RegistryServiceConfig struct {
	// AllowNondistributableArtifactsCidRs: List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.
	//
	// **Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts.
	AllowNondistributableArtifactsCidRs []string `json:"allow_nondistributable_artifacts_cid_rs" yaml:"allow_nondistributable_artifacts_cid_rs" schema:"allow_nondistributable_artifacts_cid_rs"`
	// AllowNondistributableArtifactsHostnames: List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.
	//
	// **Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts.
	AllowNondistributableArtifactsHostnames []string `json:"allow_nondistributable_artifacts_hostnames" yaml:"allow_nondistributable_artifacts_hostnames" schema:"allow_nondistributable_artifacts_hostnames"`
	// IndexConfigs:
	IndexConfigs map[string]IndexInfo `json:"index_configs" yaml:"index_configs" schema:"index_configs"`
	// InsecureRegistryCidRs: List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.
	//
	// **Warning**: Using this option can be useful when running a local  registry, but introduces security vulnerabilities. This option should therefore ONLY be used for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option.
	InsecureRegistryCidRs []string `json:"insecure_registry_cid_rs" yaml:"insecure_registry_cid_rs" schema:"insecure_registry_cid_rs"`
	// Mirrors: List of registry URLs that act as a mirror for the official (`docker.io`) registry.
	Mirrors []string `json:"mirrors" yaml:"mirrors" schema:"mirrors"`
}

// Runtime: Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux.
type Runtime struct {
	// Path: Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
	Path string `json:"path" yaml:"path" schema:"path"`
	// RuntimeArgs: List of command-line arguments to pass to the runtime when invoked.
	RuntimeArgs []string `json:"runtime_args" yaml:"runtime_args" schema:"runtime_args"`
}

// Session: An authentication session.
// For our UIs, these are automatically created by Next.js.
type Session struct {
	// CreatedAt: The date and time the session was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the session expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The unique identifier for the session.
	ID string `json:"id" yaml:"id" schema:"id"`
	// SessionToken: The session token.
	SessionToken UUID `json:"session_token" yaml:"session_token" schema:"session_token,required"`
	// UpdatedAt: The date and time the session was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user that the session belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// SystemInfoCgroupDriverEnum is the type definition for a SystemInfoCgroupDriverEnum.
type SystemInfoCgroupDriverEnum string

const (
	// SystemInfoCgroupDriverEnumEmpty represents the SystemInfoCgroupDriverEnum `""`.
	SystemInfoCgroupDriverEnumEmpty SystemInfoCgroupDriverEnum = ""
	// SystemInfoCgroupDriverEnumCgroupfs represents the SystemInfoCgroupDriverEnum `"cgroupfs"`.
	SystemInfoCgroupDriverEnumCgroupfs SystemInfoCgroupDriverEnum = "cgroupfs"
	// SystemInfoCgroupDriverEnumSystemd represents the SystemInfoCgroupDriverEnum `"systemd"`.
	SystemInfoCgroupDriverEnumSystemd SystemInfoCgroupDriverEnum = "systemd"
	// SystemInfoCgroupDriverEnumNone represents the SystemInfoCgroupDriverEnum `"none"`.
	SystemInfoCgroupDriverEnumNone SystemInfoCgroupDriverEnum = "none"
)

// SystemInfoCgroupVersionEnum is the type definition for a SystemInfoCgroupVersionEnum.
type SystemInfoCgroupVersionEnum string

const (
	// SystemInfoCgroupVersionEnumEmpty represents the SystemInfoCgroupVersionEnum `""`.
	SystemInfoCgroupVersionEnumEmpty SystemInfoCgroupVersionEnum = ""
	// SystemInfoCgroupVersionEnum1 represents the SystemInfoCgroupVersionEnum `"1"`.
	SystemInfoCgroupVersionEnum1 SystemInfoCgroupVersionEnum = "1"
	// SystemInfoCgroupVersionEnum2 represents the SystemInfoCgroupVersionEnum `"2"`.
	SystemInfoCgroupVersionEnum2 SystemInfoCgroupVersionEnum = "2"
)

// SystemInfoDefaultAddressPools is the type definition for a SystemInfoDefaultAddressPools.
type SystemInfoDefaultAddressPools struct {
	// Base: The network address in CIDR format
	Base string `json:"base" yaml:"base" schema:"base"`
	// Size: The network pool size
	Size int `json:"size" yaml:"size" schema:"size"`
}

// SystemInfoIsolationEnum is the type definition for a SystemInfoIsolationEnum.
type SystemInfoIsolationEnum string

const (
	// SystemInfoIsolationEnumEmpty represents the SystemInfoIsolationEnum `""`.
	SystemInfoIsolationEnumEmpty SystemInfoIsolationEnum = ""
	// SystemInfoIsolationEnumDefault represents the SystemInfoIsolationEnum `"default"`.
	SystemInfoIsolationEnumDefault SystemInfoIsolationEnum = "default"
	// SystemInfoIsolationEnumHyperv represents the SystemInfoIsolationEnum `"hyperv"`.
	SystemInfoIsolationEnumHyperv SystemInfoIsolationEnum = "hyperv"
	// SystemInfoIsolationEnumProcess represents the SystemInfoIsolationEnum `"process"`.
	SystemInfoIsolationEnumProcess SystemInfoIsolationEnum = "process"
)

// UnitAngle: The valid types of angle formats.
type UnitAngle string

const (
	// UnitAngleDegrees: Degrees <https://en.wikipedia.org/wiki/Degree_(angle)>
	UnitAngleDegrees UnitAngle = "degrees"
	// UnitAngleRadians: Radians <https://en.wikipedia.org/wiki/Radian>
	UnitAngleRadians UnitAngle = "radians"
)

// UnitAngleConversion: Result of converting between units.
type UnitAngleConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitAngle `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitAngle `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitArea: The valid types of area units.
type UnitArea string

const (
	// UnitAreaAcres: Acres <https://en.wikipedia.org/wiki/Acre>
	UnitAreaAcres UnitArea = "acres"
	// UnitAreaHectares: Hectares <https://en.wikipedia.org/wiki/Hectare>
	UnitAreaHectares UnitArea = "hectares"
	// UnitAreaSquareCentimetres: Square centimetres <https://en.wikipedia.org/wiki/Square_centimetre>
	UnitAreaSquareCentimetres UnitArea = "square_centimetres"
	// UnitAreaSquareDecimetres: Square decimetres <https://en.wikipedia.org/wiki/Square_decimetre>
	UnitAreaSquareDecimetres UnitArea = "square_decimetres"
	// UnitAreaSquareFeet: Square feet <https://en.wikipedia.org/wiki/Square_foot>
	UnitAreaSquareFeet UnitArea = "square_feet"
	// UnitAreaSquareHectometres: Square hectometres <https://en.wikipedia.org/wiki/Square_hectometre>
	UnitAreaSquareHectometres UnitArea = "square_hectometres"
	// UnitAreaSquareInches: Square inches <https://en.wikipedia.org/wiki/Square_inch>
	UnitAreaSquareInches UnitArea = "square_inches"
	// UnitAreaSquareKilometres: Square kilometres <https://en.wikipedia.org/wiki/Square_kilometre>
	UnitAreaSquareKilometres UnitArea = "square_kilometres"
	// UnitAreaSquareMetres: Square metres <https://en.wikipedia.org/wiki/Square_metre>
	UnitAreaSquareMetres UnitArea = "square_metres"
	// UnitAreaSquareMicrometres: Square micrometres <https://en.wikipedia.org/wiki/Square_micrometre>
	UnitAreaSquareMicrometres UnitArea = "square_micrometres"
	// UnitAreaSquareMiles: Square miles <https://en.wikipedia.org/wiki/Square_mile>
	UnitAreaSquareMiles UnitArea = "square_miles"
	// UnitAreaSquareMillimetres: Square millimetres <https://en.wikipedia.org/wiki/Square_millimetre>
	UnitAreaSquareMillimetres UnitArea = "square_millimetres"
	// UnitAreaSquareNanometres: Square nanometres <https://en.wikipedia.org/wiki/Square_nanometre>
	UnitAreaSquareNanometres UnitArea = "square_nanometres"
	// UnitAreaSquareYards: Square yards <https://en.wikipedia.org/wiki/Square_mile>
	UnitAreaSquareYards UnitArea = "square_yards"
)

// UnitAreaConversion: Result of converting between units.
type UnitAreaConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitArea `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitCurrent: The valid types of current units.
type UnitCurrent string

const (
	// UnitCurrentAmperes: Amperes <https://en.wikipedia.org/wiki/Ampere>
	UnitCurrentAmperes UnitCurrent = "amperes"
	// UnitCurrentMicroamperes: Microamperes <https://en.wikipedia.org/wiki/Microampere>
	UnitCurrentMicroamperes UnitCurrent = "microamperes"
	// UnitCurrentMilliamperes: Milliamperes <https://en.wikipedia.org/wiki/Milliampere>
	UnitCurrentMilliamperes UnitCurrent = "milliamperes"
	// UnitCurrentNanoamperes: Nanoamperes <https://en.wikipedia.org/wiki/Nanoampere>
	UnitCurrentNanoamperes UnitCurrent = "nanoamperes"
)

// UnitCurrentConversion: Result of converting between units.
type UnitCurrentConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitCurrent `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitCurrent `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitEnergy: The valid types of energy units.
type UnitEnergy string

const (
	// UnitEnergyBtu: British Thermal Unit (BTU) <https://en.wikipedia.org/wiki/British_thermal_unit>
	UnitEnergyBtu UnitEnergy = "btu"
	// UnitEnergyElectronvolts: Electron Volts (eV) <https://en.wikipedia.org/wiki/Electronvolt>
	UnitEnergyElectronvolts UnitEnergy = "electronvolts"
	// UnitEnergyJoules: Joules (or watt-seconds) <https://en.wikipedia.org/wiki/Joule>
	UnitEnergyJoules UnitEnergy = "joules"
	// UnitEnergyKilocalories: Kilocalories (often just called calories) <https://en.wikipedia.org/wiki/Kilocalorie>
	UnitEnergyKilocalories UnitEnergy = "kilocalories"
	// UnitEnergyKilowattHours: Kilowatt hours (kWh) <https://en.wikipedia.org/wiki/Kilowatt-hour>
	UnitEnergyKilowattHours UnitEnergy = "kilowatt_hours"
	// UnitEnergyWattHours: Watt hours (Wh) <https://en.wikipedia.org/wiki/Kilowatt-hour>
	UnitEnergyWattHours UnitEnergy = "watt_hours"
)

// UnitEnergyConversion: Result of converting between units.
type UnitEnergyConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitEnergy `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitEnergy `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitForce: The valid types of force units.
type UnitForce string

const (
	// UnitForceDynes: Dynes <https://en.wikipedia.org/wiki/Dyne>
	UnitForceDynes UnitForce = "dynes"
	// UnitForceKiloponds: Kiloponds <https://en.wikipedia.org/wiki/Kilopond>
	UnitForceKiloponds UnitForce = "kiloponds"
	// UnitForceMicronewtons: Micronewtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceMicronewtons UnitForce = "micronewtons"
	// UnitForceMillinewtons: Millinewtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceMillinewtons UnitForce = "millinewtons"
	// UnitForceNewtons: Newtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceNewtons UnitForce = "newtons"
	// UnitForcePoundals: Poundals <https://en.wikipedia.org/wiki/Poundal>
	UnitForcePoundals UnitForce = "poundals"
	// UnitForcePounds: Pounds <https://en.wikipedia.org/wiki/Pound_(force)>
	UnitForcePounds UnitForce = "pounds"
)

// UnitForceConversion: Result of converting between units.
type UnitForceConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitForce `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitForce `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitFrequency: The valid types of frequency units.
type UnitFrequency string

const (
	// UnitFrequencyGigahertz: Gigahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyGigahertz UnitFrequency = "gigahertz"
	// UnitFrequencyHertz: Hertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyHertz UnitFrequency = "hertz"
	// UnitFrequencyKilohertz: Kilohertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyKilohertz UnitFrequency = "kilohertz"
	// UnitFrequencyMegahertz: Megahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMegahertz UnitFrequency = "megahertz"
	// UnitFrequencyMicrohertz: Microhertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMicrohertz UnitFrequency = "microhertz"
	// UnitFrequencyMillihertz: Millihertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMillihertz UnitFrequency = "millihertz"
	// UnitFrequencyNanohertz: Nanohertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyNanohertz UnitFrequency = "nanohertz"
	// UnitFrequencyTerahertz: Terahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyTerahertz UnitFrequency = "terahertz"
)

// UnitFrequencyConversion: Result of converting between units.
type UnitFrequencyConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitFrequency `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitFrequency `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitLength: The valid types of length units.
type UnitLength string

const (
	// UnitLengthCentimetres: Centimetres <https://en.wikipedia.org/wiki/Centimetre>
	UnitLengthCentimetres UnitLength = "centimetres"
	// UnitLengthDecimetres: Decimetres <https://en.wikipedia.org/wiki/Decimetre>
	UnitLengthDecimetres UnitLength = "decimetres"
	// UnitLengthFeet: Feet <https://en.wikipedia.org/wiki/Foot_(unit)>
	UnitLengthFeet UnitLength = "feet"
	// UnitLengthFurlongs: Furlongs <https://en.wikipedia.org/wiki/Furlong>
	UnitLengthFurlongs UnitLength = "furlongs"
	// UnitLengthHectometres: Hectometres <https://en.wikipedia.org/wiki/Hectometre>
	UnitLengthHectometres UnitLength = "hectometres"
	// UnitLengthInches: Inches <https://en.wikipedia.org/wiki/Inch>
	UnitLengthInches UnitLength = "inches"
	// UnitLengthKilometres: Kilometres <https://en.wikipedia.org/wiki/Kilometre>
	UnitLengthKilometres UnitLength = "kilometres"
	// UnitLengthMetres: Metres <https://en.wikipedia.org/wiki/Metre>
	UnitLengthMetres UnitLength = "metres"
	// UnitLengthMicrometres: Micrometres <https://en.wikipedia.org/wiki/Micrometre>
	UnitLengthMicrometres UnitLength = "micrometres"
	// UnitLengthMiles: Miles <https://en.wikipedia.org/wiki/Mile>
	UnitLengthMiles UnitLength = "miles"
	// UnitLengthMillimetres: Millimetres <https://en.wikipedia.org/wiki/Millimetre>
	UnitLengthMillimetres UnitLength = "millimetres"
	// UnitLengthNanometres: Nanometres <https://en.wikipedia.org/wiki/Nanometre>
	UnitLengthNanometres UnitLength = "nanometres"
	// UnitLengthYards: Yards <https://en.wikipedia.org/wiki/Yard>
	UnitLengthYards UnitLength = "yards"
)

// UnitLengthConversion: Result of converting between units.
type UnitLengthConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitLength `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMas: The valid types of mass units.
type UnitMas string

const (
	// UnitMasCarats: Carats <https://en.wikipedia.org/wiki/Carat_(mass)>
	UnitMasCarats UnitMas = "carats"
	// UnitMasGrains: Grains <https://en.wikipedia.org/wiki/Grain_(unit)>
	UnitMasGrains UnitMas = "grains"
	// UnitMasGrams: Grams <https://en.wikipedia.org/wiki/Gram>
	UnitMasGrams UnitMas = "grams"
	// UnitMasKilograms: Kilograms <https://en.wikipedia.org/wiki/Kilogram>
	UnitMasKilograms UnitMas = "kilograms"
	// UnitMasLongTons: Long tons <https://en.wikipedia.org/wiki/Long_ton>
	UnitMasLongTons UnitMas = "long_tons"
	// UnitMasMetricTons: Metric tons <https://en.wikipedia.org/wiki/Tonne>
	UnitMasMetricTons UnitMas = "metric_tons"
	// UnitMasMicrograms: Micrograms <https://en.wikipedia.org/wiki/Microgram>
	UnitMasMicrograms UnitMas = "micrograms"
	// UnitMasMilligrams: Milligrams <https://en.wikipedia.org/wiki/Milligram>
	UnitMasMilligrams UnitMas = "milligrams"
	// UnitMasOunces: Ounces <https://en.wikipedia.org/wiki/Ounce>
	UnitMasOunces UnitMas = "ounces"
	// UnitMasPennyweights: Pennyweights <https://en.wikipedia.org/wiki/Pennyweight>
	UnitMasPennyweights UnitMas = "pennyweights"
	// UnitMasPounds: Pounds <https://en.wikipedia.org/wiki/Pound_(mass)>
	UnitMasPounds UnitMas = "pounds"
	// UnitMasShortTons: Short tons <https://en.wikipedia.org/wiki/Short_ton>
	UnitMasShortTons UnitMas = "short_tons"
	// UnitMasStones: Stones <https://en.wikipedia.org/wiki/Stone_(unit)>
	UnitMasStones UnitMas = "stones"
	// UnitMasTroyOunces: Troy ounces <https://en.wikipedia.org/wiki/Troy_ounce>
	UnitMasTroyOunces UnitMas = "troy_ounces"
	// UnitMasTroyPounds: Troy pounds <https://en.wikipedia.org/wiki/Troy_pound>
	UnitMasTroyPounds UnitMas = "troy_pounds"
)

// UnitMassConversion: Result of converting between units.
type UnitMassConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitMas `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPower: The valid types of power units.
type UnitPower string

const (
	// UnitPowerBtuPerMinute: British thermal units (BTU) per minute <https://en.wikipedia.org/wiki/British_thermal_unit>
	UnitPowerBtuPerMinute UnitPower = "btu_per_minute"
	// UnitPowerHorsepower: Horsepower (hp) <https://en.wikipedia.org/wiki/Horsepower>
	UnitPowerHorsepower UnitPower = "horsepower"
	// UnitPowerKilowatts: Kilowatts <https://en.wikipedia.org/wiki/Kilowatt>
	UnitPowerKilowatts UnitPower = "kilowatts"
	// UnitPowerMetricHorsepower: Metric horsepower (PS) <https://en.wikipedia.org/wiki/Horsepower#Metric_horsepower>
	UnitPowerMetricHorsepower UnitPower = "metric_horsepower"
	// UnitPowerMicrowatts: Microwatts <https://en.wikipedia.org/wiki/Microwatt>
	UnitPowerMicrowatts UnitPower = "microwatts"
	// UnitPowerMilliwatts: Millwatts <https://en.wikipedia.org/wiki/Milliwatt>
	UnitPowerMilliwatts UnitPower = "milliwatts"
	// UnitPowerWatts: Watts <https://en.wikipedia.org/wiki/Watt>
	UnitPowerWatts UnitPower = "watts"
)

// UnitPowerConversion: Result of converting between units.
type UnitPowerConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitPower `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitPower `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPressure: The valid types of pressure units.
type UnitPressure string

const (
	// UnitPressureAtmospheres: Atmospheres <https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)>
	UnitPressureAtmospheres UnitPressure = "atmospheres"
	// UnitPressureBars: Bars <https://en.wikipedia.org/wiki/Bar_(unit)>
	UnitPressureBars UnitPressure = "bars"
	// UnitPressureHectopascals: Hectopascals <https://en.wikipedia.org/wiki/Hectopascal>
	UnitPressureHectopascals UnitPressure = "hectopascals"
	// UnitPressureKilopascals: Kilopascals <https://en.wikipedia.org/wiki/Kilopascal>
	UnitPressureKilopascals UnitPressure = "kilopascals"
	// UnitPressureMillibars: Millibars <https://en.wikipedia.org/wiki/Bar_(unit)>
	UnitPressureMillibars UnitPressure = "millibars"
	// UnitPressurePascals: Pascals <https://en.wikipedia.org/wiki/Pascal_(unit)>
	UnitPressurePascals UnitPressure = "pascals"
	// UnitPressurePsi: Pounds per square inch (PSI) - <https://en.wikipedia.org/wiki/Pound_per_square_inch>
	UnitPressurePsi UnitPressure = "psi"
)

// UnitPressureConversion: Result of converting between units.
type UnitPressureConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitPressure `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitPressure `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitTemperature: The valid types of temperature units.
type UnitTemperature string

const (
	// UnitTemperatureCelsius: Celsius <https://en.wikipedia.org/wiki/Celsius>
	UnitTemperatureCelsius UnitTemperature = "celsius"
	// UnitTemperatureFahrenheit: Fahrenheit <https://en.wikipedia.org/wiki/Fahrenheit>
	UnitTemperatureFahrenheit UnitTemperature = "fahrenheit"
	// UnitTemperatureKelvin: Kelvin <https://en.wikipedia.org/wiki/Kelvin>
	UnitTemperatureKelvin UnitTemperature = "kelvin"
	// UnitTemperatureRankine: Rankine <https://en.wikipedia.org/wiki/Rankine_scale>
	UnitTemperatureRankine UnitTemperature = "rankine"
)

// UnitTemperatureConversion: Result of converting between units.
type UnitTemperatureConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitTemperature `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitTemperature `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitTorque: The valid types of torque units.
type UnitTorque string

const (
	// UnitTorqueNewtonMetres: Newton metres <https://en.wikipedia.org/wiki/Newton_metre>
	UnitTorqueNewtonMetres UnitTorque = "newton_metres"
	// UnitTorquePoundFoot: Pound foot <https://en.wikipedia.org/wiki/Pound-foot_(torque)>
	UnitTorquePoundFoot UnitTorque = "pound_foot"
)

// UnitTorqueConversion: Result of converting between units.
type UnitTorqueConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitTorque `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitTorque `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitVolume: The valid types of volume units.
type UnitVolume string

const (
	// UnitVolumeCubicCentimetres: Cubic centimeters (cc or cm³) <https://en.wikipedia.org/wiki/Cubic_centimetre>
	UnitVolumeCubicCentimetres UnitVolume = "cubic_centimetres"
	// UnitVolumeCubicFeet: Cubic feet (ft³) <https://en.wikipedia.org/wiki/Cubic_foot>
	UnitVolumeCubicFeet UnitVolume = "cubic_feet"
	// UnitVolumeCubicInches: Cubic inches (cu in or in³) <https://en.wikipedia.org/wiki/Cubic_inch>
	UnitVolumeCubicInches UnitVolume = "cubic_inches"
	// UnitVolumeCubicMetres: Cubic metres (m³) <https://en.wikipedia.org/wiki/Cubic_metre>
	UnitVolumeCubicMetres UnitVolume = "cubic_metres"
	// UnitVolumeCubicYards: Cubic yards (yd³) <https://en.wikipedia.org/wiki/Cubic_yard>
	UnitVolumeCubicYards UnitVolume = "cubic_yards"
	// UnitVolumeCups: Cups <https://en.wikipedia.org/wiki/Cup_(unit)>
	UnitVolumeCups UnitVolume = "cups"
	// UnitVolumeDrams: Drams <https://en.wikipedia.org/wiki/Fluid_dram>
	UnitVolumeDrams UnitVolume = "drams"
	// UnitVolumeDrops: Drops <https://en.wikipedia.org/wiki/Minim_(unit)>
	UnitVolumeDrops UnitVolume = "drops"
	// UnitVolumeFluidOunces: US Fluid Ounces (fl oz) <https://en.wikipedia.org/wiki/Fluid_ounce>
	UnitVolumeFluidOunces UnitVolume = "fluid_ounces"
	// UnitVolumeFluidOuncesUk: UK Fluid Ounces (fl oz) <https://en.wikipedia.org/wiki/Fluid_ounce>
	UnitVolumeFluidOuncesUk UnitVolume = "fluid_ounces_uk"
	// UnitVolumeGallons: US Gallons (gal US) <https://en.wikipedia.org/wiki/Gallon>
	UnitVolumeGallons UnitVolume = "gallons"
	// UnitVolumeGallonsUk: UK/Imperial Gallons (gal) <https://en.wikipedia.org/wiki/Gallon>
	UnitVolumeGallonsUk UnitVolume = "gallons_uk"
	// UnitVolumeLitres: Liters (l) <https://en.wikipedia.org/wiki/Litre>
	UnitVolumeLitres UnitVolume = "litres"
	// UnitVolumeMillilitres: Milliliters (ml) <https://en.wikipedia.org/wiki/Litre>
	UnitVolumeMillilitres UnitVolume = "millilitres"
	// UnitVolumePints: Pints <https://en.wikipedia.org/wiki/Pint>
	UnitVolumePints UnitVolume = "pints"
	// UnitVolumePintsUk: Pints in the United Kingdom (UK) <https://en.wikipedia.org/wiki/Pint>
	UnitVolumePintsUk UnitVolume = "pints_uk"
	// UnitVolumeQuarts: Quarts <https://en.wikipedia.org/wiki/Quart>
	UnitVolumeQuarts UnitVolume = "quarts"
	// UnitVolumeTablespoons: Tablespoons (tbsp) <https://en.wikipedia.org/wiki/Tablespoon>
	UnitVolumeTablespoons UnitVolume = "tablespoons"
	// UnitVolumeTeaspoons: Teaspoons (tsp) <https://en.wikipedia.org/wiki/Teaspoon>
	UnitVolumeTeaspoons UnitVolume = "teaspoons"
)

// UnitVolumeConversion: Result of converting between units.
type UnitVolumeConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitVolume `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UpdateUser: The user-modifiable parts of a User.
type UpdateUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// User: A user.
type User struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// UserResultsPage: A single page of results
type UserResultsPage struct {
	// Items: list of items on this page of results
	Items []User `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// VerificationToken: A verification token for a user.
// This is typically used to verify a user's email address.
type VerificationToken struct {
	// CreatedAt: The date and time the verification token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the verification token expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The token used for verification. This is used as the id for the table since it is unique per record.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Identifier: The identifier for the user. This is typically the user's email address since that is what we are verifying.
	Identifier string `json:"identifier" yaml:"identifier" schema:"identifier"`
	// UpdatedAt: The date and time the verification token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ResponseError: Error information from a response.
type ResponseError struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}
