// Code generated by `generate`. DO NOT EDIT.

package kittycad

// APICallQueryGroup: A response for a query on the API call table that is grouped by something.
type APICallQueryGroup struct {
	// Count:
	Count int `json:"count" yaml:"count" schema:"count,required"`
	// Query:
	Query string `json:"query" yaml:"query" schema:"query,required"`
}

// APICallQueryGroupBy: The field of an API call to group by.
type APICallQueryGroupBy string

const (
	// APICallQueryGroupByEmail: The email of the user that requested the API call.
	APICallQueryGroupByEmail APICallQueryGroupBy = "email"
	// APICallQueryGroupByMethod: The HTTP method of the API call.
	APICallQueryGroupByMethod APICallQueryGroupBy = "method"
	// APICallQueryGroupByEndpoint: The endpoint of the API call.
	APICallQueryGroupByEndpoint APICallQueryGroupBy = "endpoint"
	// APICallQueryGroupByUserID: The user ID of the user that requested the API call.
	APICallQueryGroupByUserID APICallQueryGroupBy = "user_id"
	// APICallQueryGroupByOrigin: The origin of the API call. This is parsed from the `Origin` header.
	APICallQueryGroupByOrigin APICallQueryGroupBy = "origin"
	// APICallQueryGroupByIpAddress: The IP address of the user making the API call.
	APICallQueryGroupByIpAddress APICallQueryGroupBy = "ip_address"
)

// APICallStatus: The status of an async API call.
type APICallStatus string

const (
	// APICallStatusQueued: The async API call is queued.
	APICallStatusQueued APICallStatus = "queued"
	// APICallStatusUploaded: The async API call was uploaded to be converted.
	APICallStatusUploaded APICallStatus = "uploaded"
	// APICallStatusInProgress: The async API call is in progress.
	APICallStatusInProgress APICallStatus = "in_progress"
	// APICallStatusCompleted: The async API call has completed.
	APICallStatusCompleted APICallStatus = "completed"
	// APICallStatusFailed: The async API call has failed.
	APICallStatusFailed APICallStatus = "failed"
)

// APICallWithPrice: An API call with the price.
// This is a join of the `ApiCall` and `ApiCallPrice` tables.
type APICallWithPrice struct {
	// CompletedAt: The date and time the API call completed billing.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The date and time the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Duration: The duration of the API call.
	Duration int `json:"duration" yaml:"duration" schema:"duration"`
	// Email: The user's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// Endpoint: The endpoint requested by the API call.
	Endpoint string `json:"endpoint" yaml:"endpoint" schema:"endpoint"`
	// ID: The unique identifier for the API call.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IPAddress: The ip address of the origin.
	IPAddress IP `json:"ip_address" yaml:"ip_address" schema:"ip_address"`
	// Litterbox: If the API call was spawned from the litterbox or not.
	Litterbox bool `json:"litterbox" yaml:"litterbox" schema:"litterbox"`
	// Method: The HTTP method requsted by the API call.
	Method Method `json:"method" yaml:"method" schema:"method,required"`
	// Minutes: The number of minutes the API call was billed for.
	Minutes int `json:"minutes" yaml:"minutes" schema:"minutes"`
	// Origin: The origin of the API call.
	Origin string `json:"origin" yaml:"origin" schema:"origin"`
	// Price: The price of the API call.
	Price float64 `json:"price" yaml:"price" schema:"price"`
	// RequestBody: The request body sent by the API call.
	RequestBody string `json:"request_body" yaml:"request_body" schema:"request_body"`
	// RequestQueryParams: The request query params sent by the API call.
	RequestQueryParams string `json:"request_query_params" yaml:"request_query_params" schema:"request_query_params"`
	// ResponseBody: The response body returned by the API call. We do not store this information if it is above a certain size.
	ResponseBody string `json:"response_body" yaml:"response_body" schema:"response_body"`
	// StartedAt: The date and time the API call started billing.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// StatusCode: The status code returned by the API call.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code"`
	// StripeInvoiceItemID: The Stripe invoice item ID of the API call if it is billable.
	StripeInvoiceItemID string `json:"stripe_invoice_item_id" yaml:"stripe_invoice_item_id" schema:"stripe_invoice_item_id"`
	// Token: The API token that made the API call.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserAgent: The user agent of the request.
	UserAgent string `json:"user_agent" yaml:"user_agent" schema:"user_agent,required"`
	// UserID: The ID of the user that made the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// APICallWithPriceResultsPage: A single page of results
type APICallWithPriceResultsPage struct {
	// Items: list of items on this page of results
	Items []APICallWithPrice `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// APIError: An error.
type APIError struct {
	// ErrorCode: The error code.
	ErrorCode ErrorCode `json:"error_code" yaml:"error_code" schema:"error_code,required"`
	// Message: The error message.
	Message string `json:"message" yaml:"message" schema:"message,required"`
}

// APIToken: An API token.
// These are used to authenticate users with Bearer authentication.
type APIToken struct {
	// CreatedAt: The date and time the API token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the API token.
	ID string `json:"id" yaml:"id" schema:"id"`
	// IsValid: If the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token.
	IsValid bool `json:"is_valid" yaml:"is_valid" schema:"is_valid,required"`
	// Token: The API token itself.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The ID of the user that owns the API token.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// APITokenResultsPage: A single page of results
type APITokenResultsPage struct {
	// Items: list of items on this page of results
	Items []APIToken `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AccountProvider: An account provider.
type AccountProvider string

const (
	// AccountProviderGoogle: The Google account provider.
	AccountProviderGoogle AccountProvider = "google"
	// AccountProviderGithub: The GitHub account provider.
	AccountProviderGithub AccountProvider = "github"
)

// AiPluginAPI: AI plugin api information.
type AiPluginAPI struct {
	// IsUserAuthenticated: If the API is authenticated.
	IsUserAuthenticated bool `json:"is_user_authenticated" yaml:"is_user_authenticated" schema:"is_user_authenticated"`
	// Type: The type of API.
	Type AiPluginAPIType `json:"type" yaml:"type" schema:"type"`
	// Url: The url to the API's schema.
	Url URL `json:"url" yaml:"url" schema:"url,required"`
}

// AiPluginAPIType: AI plugin api type.
type AiPluginAPIType string

const (
	// AiPluginAPItypeOpenapi: An OpenAPI specification.
	AiPluginAPItypeOpenapi AiPluginAPIType = "openapi"
)

// AiPluginAuth: AI plugin auth information.
type AiPluginAuth struct {
	// AuthorizationType: The type of http authorization.
	AuthorizationType AiPluginHttpAuthType `json:"authorization_type" yaml:"authorization_type" schema:"authorization_type"`
	// Type: The type of authentication.
	Type AiPluginAuthType `json:"type" yaml:"type" schema:"type"`
}

// AiPluginAuthType: AI plugin auth type.
type AiPluginAuthType string

const (
	// AiPluginAuthTypeNone: None.
	AiPluginAuthTypeNone AiPluginAuthType = "none"
	// AiPluginAuthTypeUserHttp: User http.
	AiPluginAuthTypeUserHttp AiPluginAuthType = "user_http"
	// AiPluginAuthTypeServiceHttp: Service http.
	AiPluginAuthTypeServiceHttp AiPluginAuthType = "service_http"
	// AiPluginAuthTypeOauth: OAuth.
	AiPluginAuthTypeOauth AiPluginAuthType = "oauth"
)

// AiPluginHttpAuthType: AI plugin http auth type.
type AiPluginHttpAuthType string

const (
	// AiPluginHttpAuthTypeBasic: Basic.
	AiPluginHttpAuthTypeBasic AiPluginHttpAuthType = "basic"
	// AiPluginHttpAuthTypeBearer: Bearer.
	AiPluginHttpAuthTypeBearer AiPluginHttpAuthType = "bearer"
)

// AiPluginManifest: AI plugin manifest.
// This is used for OpenAI's ChatGPT plugins. You can read more about them [here](https://platform.openai.com/docs/plugins/getting-started/plugin-manifest).
type AiPluginManifest struct {
	// API: API specification.
	API AiPluginAPI `json:"api" yaml:"api" schema:"api,required"`
	// Auth: Authentication schema.
	Auth AiPluginAuth `json:"auth" yaml:"auth" schema:"auth,required"`
	// ContactEmail: Email contact for safety/moderation reachout, support, and deactivation.
	ContactEmail string `json:"contact_email" yaml:"contact_email" schema:"contact_email"`
	// DescriptionForHuman: Human-readable description of the plugin.
	DescriptionForHuman string `json:"description_for_human" yaml:"description_for_human" schema:"description_for_human"`
	// DescriptionForModel: Description better tailored to the model, such as token context length considerations or keyword usage for improved plugin prompting.
	DescriptionForModel string `json:"description_for_model" yaml:"description_for_model" schema:"description_for_model"`
	// LegalInfoUrl: Redirect URL for users to view plugin information.
	LegalInfoUrl URL `json:"legal_info_url" yaml:"legal_info_url" schema:"legal_info_url,required"`
	// LogoUrl: URL used to fetch the plugin's logo.
	LogoUrl URL `json:"logo_url" yaml:"logo_url" schema:"logo_url,required"`
	// NameForHuman: Human-readable name, such as the full company name.
	NameForHuman string `json:"name_for_human" yaml:"name_for_human" schema:"name_for_human"`
	// NameForModel: Name the model will used to target the plugin.
	NameForModel string `json:"name_for_model" yaml:"name_for_model" schema:"name_for_model"`
	// SchemaVersion: Manifest schema version.
	SchemaVersion string `json:"schema_version" yaml:"schema_version" schema:"schema_version"`
}

// AnnotationLineEnd: Annotation line end type
type AnnotationLineEnd string

const (
	// AnnotationLineEndNone represents the AnnotationLineEnd `"none"`.
	AnnotationLineEndNone AnnotationLineEnd = "none"
	// AnnotationLineEndArrow represents the AnnotationLineEnd `"arrow"`.
	AnnotationLineEndArrow AnnotationLineEnd = "arrow"
)

// AnnotationLineEndOptions: Options for annotation text
type AnnotationLineEndOptions struct {
	// End: How to style the end of the annotation line.
	End AnnotationLineEnd `json:"end" yaml:"end" schema:"end,required"`
	// Start: How to style the start of the annotation line.
	Start AnnotationLineEnd `json:"start" yaml:"start" schema:"start,required"`
}

// AnnotationOptions: Options for annotations
type AnnotationOptions struct {
	// Color: Color to render the annotation
	Color Color `json:"color" yaml:"color" schema:"color"`
	// LineEnds: How to style the start and end of the line
	LineEnds AnnotationLineEndOptions `json:"line_ends" yaml:"line_ends" schema:"line_ends"`
	// LineWidth: Width of the annotation's line
	LineWidth float64 `json:"line_width" yaml:"line_width" schema:"line_width"`
	// Position: Position to put the annotation
	Position Point3D `json:"position" yaml:"position" schema:"position"`
	// Text: Text displayed on the annotation
	Text AnnotationTextOptions `json:"text" yaml:"text" schema:"text"`
}

// AnnotationTextAlignmentX: Horizontal Text aligment
type AnnotationTextAlignmentX string

const (
	// AnnotationTextAlignmentXLeft represents the AnnotationTextAlignmentX `"left"`.
	AnnotationTextAlignmentXLeft AnnotationTextAlignmentX = "left"
	// AnnotationTextAlignmentXCenter represents the AnnotationTextAlignmentX `"center"`.
	AnnotationTextAlignmentXCenter AnnotationTextAlignmentX = "center"
	// AnnotationTextAlignmentXRight represents the AnnotationTextAlignmentX `"right"`.
	AnnotationTextAlignmentXRight AnnotationTextAlignmentX = "right"
)

// AnnotationTextAlignmentY: Vertical Text aligment
type AnnotationTextAlignmentY string

const (
	// AnnotationTextAlignmentYBottom represents the AnnotationTextAlignmentY `"bottom"`.
	AnnotationTextAlignmentYBottom AnnotationTextAlignmentY = "bottom"
	// AnnotationTextAlignmentYCenter represents the AnnotationTextAlignmentY `"center"`.
	AnnotationTextAlignmentYCenter AnnotationTextAlignmentY = "center"
	// AnnotationTextAlignmentYTop represents the AnnotationTextAlignmentY `"top"`.
	AnnotationTextAlignmentYTop AnnotationTextAlignmentY = "top"
)

// AnnotationTextOptions: Options for annotation text
type AnnotationTextOptions struct {
	// PointSize: Text font's point size
	PointSize int `json:"point_size" yaml:"point_size" schema:"point_size,required"`
	// Text: Text displayed on the annotation
	Text string `json:"text" yaml:"text" schema:"text,required"`
	// X: Alignment along the X axis
	X AnnotationTextAlignmentX `json:"x" yaml:"x" schema:"x,required"`
	// Y: Alignment along the Y axis
	Y AnnotationTextAlignmentY `json:"y" yaml:"y" schema:"y,required"`
}

// AnnotationType: The type of annotation
type AnnotationType string

const (
	// AnnotationTypeT2D: 2D annotation type (screen or planar space)
	AnnotationTypeT2D AnnotationType = "t2d"
	// AnnotationTypeT3D: 3D annotation type
	AnnotationTypeT3D AnnotationType = "t3d"
)

// AppClientInfo: Information about a third party app client.
type AppClientInfo struct {
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// AsyncAPICall: An async API call.
type AsyncAPICall struct {
	// CompletedAt: The time and date the async API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the async API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the async API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The JSON input for the API call. These are determined by the endpoint that is run.
	Input any `json:"input" yaml:"input" schema:"input"`
	// Output: The JSON output for the API call. These are determined by the endpoint that is run.
	Output any `json:"output" yaml:"output" schema:"output"`
	// StartedAt: The time and date the async API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the async API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type: The type of async API call.
	Type AsyncAPICallType `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the async API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the async API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Worker: The worker node that is performing or performed the async API call.
	Worker string `json:"worker" yaml:"worker" schema:"worker"`
}

// AsyncAPICallOutputCompletedAt: A file conversion.
type AsyncAPICallOutputCompletedAt struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Output: The converted file (if single file conversion), if completed, base64 encoded. This field is deprecated, and will be removed in a future release. Use `outputs` instead.
	//
	// Deprecated: Output is deprecated.
	Output Base64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// OutputFormatOptions: The output format options of the file conversion.
	OutputFormatOptions any `json:"output_format_options" yaml:"output_format_options" schema:"output_format_options"`
	// Outputs: The converted files (if multiple file conversion), if completed, base64 encoded. The key of the map is the path of the output file.
	Outputs map[string]Base64 `json:"outputs" yaml:"outputs" schema:"outputs"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// SrcFormatOptions: The source format options of the file conversion.
	SrcFormatOptions any `json:"src_format_options" yaml:"src_format_options" schema:"src_format_options"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputCreatedAt: File center of mass.
type AsyncAPICallOutputCreatedAt struct {
	// CenterOfMass: The resulting center of mass.
	CenterOfMass Point3D `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the center of mass.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputError: A file mass.
type AsyncAPICallOutputError struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// MaterialDensityUnit: The material density unit.
	MaterialDensityUnit UnitDensity `json:"material_density_unit" yaml:"material_density_unit" schema:"material_density_unit,required"`
	// OutputUnit: The output unit for the mass.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputID: A file volume.
type AsyncAPICallOutputID struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the volume.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// AsyncAPICallOutputOutput: A file density.
type AsyncAPICallOutputOutput struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// MaterialMassUnit: The material mass unit.
	MaterialMassUnit UnitMas `json:"material_mass_unit" yaml:"material_mass_unit" schema:"material_mass_unit,required"`
	// OutputUnit: The output unit for the density.
	OutputUnit UnitDensity `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallOutputOutputFormat: A file surface area.
type AsyncAPICallOutputOutputFormat struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the surface area.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// SurfaceArea: The resulting surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// AsyncAPICallResultsPage: A single page of results
type AsyncAPICallResultsPage struct {
	// Items: list of items on this page of results
	Items []AsyncAPICall `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AsyncAPICallType: The type of async API call.
type AsyncAPICallType string

const (
	// AsyncAPICallTypeFileConversion: File conversion.
	AsyncAPICallTypeFileConversion AsyncAPICallType = "file_conversion"
	// AsyncAPICallTypeFileVolume: File volume.
	AsyncAPICallTypeFileVolume AsyncAPICallType = "file_volume"
	// AsyncAPICallTypeFileCenterOfMass: File center of mass.
	AsyncAPICallTypeFileCenterOfMass AsyncAPICallType = "file_center_of_mass"
	// AsyncAPICallTypeFileMass: File mass.
	AsyncAPICallTypeFileMass AsyncAPICallType = "file_mass"
	// AsyncAPICallTypeFileDensity: File density.
	AsyncAPICallTypeFileDensity AsyncAPICallType = "file_density"
	// AsyncAPICallTypeFileSurfaceArea: File surface area.
	AsyncAPICallTypeFileSurfaceArea AsyncAPICallType = "file_surface_area"
)

// Axi: Co-ordinate axis specifier.
// See [cglearn.eu] for background reading.
//
// [cglearn.eu]: https://cglearn.eu/pub/computer-graphics/introduction-to-geometry#material-coordinate-systems-1
type Axi string

const (
	// AxiY: 'Y' axis.
	AxiY Axi = "y"
	// AxiZ: 'Z' axis.
	AxiZ Axi = "z"
)

// AxisDirectionPair: An [`Axis`] paired with a [`Direction`].
type AxisDirectionPair struct {
	// Axis: Axis specifier.
	Axis Axi `json:"axis" yaml:"axis" schema:"axis,required"`
	// Direction: Specifies which direction the axis is pointing.
	Direction Direction `json:"direction" yaml:"direction" schema:"direction,required"`
}

// BillingInfo: The billing information for payments.
type BillingInfo struct {
	// Address: The address of the customer.
	Address NewAddress `json:"address" yaml:"address" schema:"address"`
	// Name: The name of the customer.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The phone for the customer.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CacheMetadata: Metadata about our cache.
// This is mostly used for internal purposes and debugging.
type CacheMetadata struct {
	// Ok: If the cache returned an ok response from ping.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// CameraDragInteractionType: The type of camera drag interaction.
type CameraDragInteractionType string

const (
	// CameraDragInteractionTypePan: Camera pan
	CameraDragInteractionTypePan CameraDragInteractionType = "pan"
	// CameraDragInteractionTypeRotate: Camera rotate (revolve/orbit)
	CameraDragInteractionTypeRotate CameraDragInteractionType = "rotate"
	// CameraDragInteractionTypeZoom: Camera zoom (increase or decrease distance to reference point center)
	CameraDragInteractionTypeZoom CameraDragInteractionType = "zoom"
)

// Cancelled is the type definition for a Cancelled.
type Cancelled struct {
	// WhatFailed: The ID of the command that failed, cancelling this command.
	WhatFailed UUID `json:"what_failed" yaml:"what_failed" schema:"what_failed,required"`
}

// CardDetails: The card details of a payment method.
type CardDetails struct {
	// Brand: Card brand.
	//
	// Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
	Brand string `json:"brand" yaml:"brand" schema:"brand"`
	// Checks: Checks on Card address and CVC if provided.
	Checks PaymentMethodCardChecks `json:"checks" yaml:"checks" schema:"checks"`
	// Country: Two-letter ISO code representing the country of the card.
	Country string `json:"country" yaml:"country" schema:"country"`
	// ExpMonth: Two-digit number representing the card's expiration month.
	ExpMonth int `json:"exp_month" yaml:"exp_month" schema:"exp_month"`
	// ExpYear: Four-digit number representing the card's expiration year.
	ExpYear int `json:"exp_year" yaml:"exp_year" schema:"exp_year"`
	// Fingerprint: Uniquely identifies this particular card number.
	Fingerprint string `json:"fingerprint" yaml:"fingerprint" schema:"fingerprint"`
	// Funding: Card funding type.
	//
	// Can be `credit`, `debit`, `prepaid`, or `unknown`.
	Funding string `json:"funding" yaml:"funding" schema:"funding"`
	// Last4: The last four digits of the card.
	Last4 string `json:"last4" yaml:"last4" schema:"last4"`
}

// Cluster: Cluster information.
type Cluster struct {
	// Addr: The IP address of the cluster.
	Addr string `json:"addr" yaml:"addr" schema:"addr"`
	// AuthTimeout: The auth timeout of the cluster.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// ClusterPort: The port of the cluster.
	ClusterPort int `json:"cluster_port" yaml:"cluster_port" schema:"cluster_port"`
	// Name: The name of the cluster.
	Name string `json:"name" yaml:"name" schema:"name"`
	// TlsTimeout: The TLS timeout for the cluster.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
	// Urls: The urls of the cluster.
	Urls []string `json:"urls" yaml:"urls" schema:"urls"`
}

// CodeLanguage: The language code is written in.
type CodeLanguage string

const (
	// CodeLanguageGo: The `go` programming language.
	CodeLanguageGo CodeLanguage = "go"
	// CodeLanguagePython: The `python` programming language.
	CodeLanguagePython CodeLanguage = "python"
	// CodeLanguageNode: The `node` programming language.
	CodeLanguageNode CodeLanguage = "node"
)

// CodeOutput: Output of the code being executed.
type CodeOutput struct {
	// OutputFiles: The contents of the files requested if they were passed.
	OutputFiles []OutputFile `json:"output_files" yaml:"output_files" schema:"output_files"`
	// Stderr: The stderr of the code.
	Stderr string `json:"stderr" yaml:"stderr" schema:"stderr"`
	// Stdout: The stdout of the code.
	Stdout string `json:"stdout" yaml:"stdout" schema:"stdout"`
}

// Color: An RGBA color
type Color struct {
	// A: Alpha
	A float64 `json:"a" yaml:"a" schema:"a,required"`
	// B: Blue
	B float64 `json:"b" yaml:"b" schema:"b,required"`
	// G: Green
	G float64 `json:"g" yaml:"g" schema:"g,required"`
	// R: Red
	R float64 `json:"r" yaml:"r" schema:"r,required"`
}

// Commit: Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`.
type Commit struct {
	// Expected: Commit ID of external tool expected by dockerd as set at build time.
	Expected string `json:"expected" yaml:"expected" schema:"expected"`
	// ID: Actual commit ID of external tool.
	ID string `json:"id" yaml:"id" schema:"id"`
}

// Connection: Metadata about a pub-sub connection.
// This is mostly used for internal purposes and debugging.
type Connection struct {
	// AuthTimeout: The auth timeout of the server.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Cluster: Information about the cluster.
	Cluster Cluster `json:"cluster" yaml:"cluster" schema:"cluster"`
	// ConfigLoadTime: The time the configuration was loaded.
	ConfigLoadTime Time `json:"config_load_time" yaml:"config_load_time" schema:"config_load_time,required"`
	// Connections: The number of connections to the server.
	Connections int `json:"connections" yaml:"connections" schema:"connections"`
	// Cores: The CPU core usage of the server.
	Cores int `json:"cores" yaml:"cores" schema:"cores"`
	// Cpu:
	Cpu float64 `json:"cpu" yaml:"cpu" schema:"cpu"`
	// Gateway: Information about the gateway.
	Gateway Gateway `json:"gateway" yaml:"gateway" schema:"gateway"`
	// GitCommit: The git commit.
	GitCommit string `json:"git_commit" yaml:"git_commit" schema:"git_commit"`
	// Go: The go version.
	Go string `json:"go" yaml:"go" schema:"go"`
	// Gomaxprocs: `GOMAXPROCS` of the server.
	Gomaxprocs int `json:"gomaxprocs" yaml:"gomaxprocs" schema:"gomaxprocs"`
	// Host: The host of the server.
	Host IP `json:"host" yaml:"host" schema:"host,required"`
	// HttpBasePath: The http base path of the server.
	HttpBasePath string `json:"http_base_path" yaml:"http_base_path" schema:"http_base_path"`
	// HttpHost: The http host of the server.
	HttpHost string `json:"http_host" yaml:"http_host" schema:"http_host"`
	// HttpPort: The http port of the server.
	HttpPort int `json:"http_port" yaml:"http_port" schema:"http_port"`
	// HttpReqStats:
	HttpReqStats map[string]int `json:"http_req_stats" yaml:"http_req_stats" schema:"http_req_stats,required"`
	// HttpsPort: The https port of the server.
	HttpsPort int `json:"https_port" yaml:"https_port" schema:"https_port"`
	// InBytes: The count of inbound bytes for the server.
	InBytes int `json:"in_bytes" yaml:"in_bytes" schema:"in_bytes"`
	// InMsgs: The number of inbound messages for the server.
	InMsgs int `json:"in_msgs" yaml:"in_msgs" schema:"in_msgs"`
	// Jetstream: Jetstream information.
	Jetstream Jetstream `json:"jetstream" yaml:"jetstream" schema:"jetstream"`
	// Leaf: Information about leaf nodes.
	Leaf LeafNode `json:"leaf" yaml:"leaf" schema:"leaf"`
	// Leafnodes: The number of leaf nodes for the server.
	Leafnodes int `json:"leafnodes" yaml:"leafnodes" schema:"leafnodes"`
	// MaxConnections: The max connections of the server.
	MaxConnections int `json:"max_connections" yaml:"max_connections" schema:"max_connections"`
	// MaxControlLine: The max control line of the server.
	MaxControlLine int `json:"max_control_line" yaml:"max_control_line" schema:"max_control_line"`
	// MaxPayload: The max payload of the server.
	MaxPayload int `json:"max_payload" yaml:"max_payload" schema:"max_payload"`
	// MaxPending: The max pending of the server.
	MaxPending int `json:"max_pending" yaml:"max_pending" schema:"max_pending"`
	// Mem: The memory usage of the server.
	Mem int `json:"mem" yaml:"mem" schema:"mem"`
	// Now: The time now.
	Now Time `json:"now" yaml:"now" schema:"now,required"`
	// OutBytes: The count of outbound bytes for the server.
	OutBytes int `json:"out_bytes" yaml:"out_bytes" schema:"out_bytes"`
	// OutMsgs: The number of outbound messages for the server.
	OutMsgs int `json:"out_msgs" yaml:"out_msgs" schema:"out_msgs"`
	// PingInterval: The ping interval of the server.
	PingInterval int `json:"ping_interval" yaml:"ping_interval" schema:"ping_interval"`
	// PingMax: The ping max of the server.
	PingMax int `json:"ping_max" yaml:"ping_max" schema:"ping_max"`
	// Port: The port of the server.
	Port int `json:"port" yaml:"port" schema:"port"`
	// Proto: The protocol version.
	Proto int `json:"proto" yaml:"proto" schema:"proto"`
	// Remotes: The number of remotes for the server.
	Remotes int `json:"remotes" yaml:"remotes" schema:"remotes"`
	// Routes: The number of routes for the server.
	Routes int `json:"routes" yaml:"routes" schema:"routes"`
	// ServerID: The server ID.
	ServerID string `json:"server_id" yaml:"server_id" schema:"server_id"`
	// ServerName: The server name.
	ServerName string `json:"server_name" yaml:"server_name" schema:"server_name"`
	// SlowConsumers: The number of slow consumers for the server.
	SlowConsumers int `json:"slow_consumers" yaml:"slow_consumers" schema:"slow_consumers"`
	// Start: When the server was started.
	Start Time `json:"start" yaml:"start" schema:"start,required"`
	// Subscriptions: The number of subscriptions for the server.
	Subscriptions int `json:"subscriptions" yaml:"subscriptions" schema:"subscriptions"`
	// SystemAccount: The system account.
	SystemAccount string `json:"system_account" yaml:"system_account" schema:"system_account"`
	// TlsTimeout: The TLS timeout of the server.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
	// TotalConnections: The total number of connections to the server.
	TotalConnections int `json:"total_connections" yaml:"total_connections" schema:"total_connections"`
	// Uptime: The uptime of the server.
	Uptime string `json:"uptime" yaml:"uptime" schema:"uptime"`
	// Version: The version of the service.
	Version string `json:"version" yaml:"version" schema:"version"`
	// WriteDeadline: The write deadline of the server.
	WriteDeadline int `json:"write_deadline" yaml:"write_deadline" schema:"write_deadline"`
}

// CountryCode: An enumeration of all ISO-3166 alpha-2 country codes.
type CountryCode string

const (
	// CountryCodeAf: Afghanistan
	CountryCodeAf CountryCode = "AF"
	// CountryCodeAx: Åland Islands
	CountryCodeAx CountryCode = "AX"
	// CountryCodeAl: Albania
	CountryCodeAl CountryCode = "AL"
	// CountryCodeDz: Algeria
	CountryCodeDz CountryCode = "DZ"
	// CountryCodeAs: American Samoa
	CountryCodeAs CountryCode = "AS"
	// CountryCodeAd: Andorra
	CountryCodeAd CountryCode = "AD"
	// CountryCodeAo: Angola
	CountryCodeAo CountryCode = "AO"
	// CountryCodeAi: Anguilla
	CountryCodeAi CountryCode = "AI"
	// CountryCodeAq: Antarctica
	CountryCodeAq CountryCode = "AQ"
	// CountryCodeAg: Antigua and Barbuda
	CountryCodeAg CountryCode = "AG"
	// CountryCodeAr: Argentina
	CountryCodeAr CountryCode = "AR"
	// CountryCodeAm: Armenia
	CountryCodeAm CountryCode = "AM"
	// CountryCodeAw: Aruba
	CountryCodeAw CountryCode = "AW"
	// CountryCodeAu: Australia
	CountryCodeAu CountryCode = "AU"
	// CountryCodeAt: Austria
	CountryCodeAt CountryCode = "AT"
	// CountryCodeAz: Azerbaijan
	CountryCodeAz CountryCode = "AZ"
	// CountryCodeBs: Bahamas
	CountryCodeBs CountryCode = "BS"
	// CountryCodeBh: Bahrain
	CountryCodeBh CountryCode = "BH"
	// CountryCodeBd: Bangladesh
	CountryCodeBd CountryCode = "BD"
	// CountryCodeBb: Barbados
	CountryCodeBb CountryCode = "BB"
	// CountryCodeBy: Belarus
	CountryCodeBy CountryCode = "BY"
	// CountryCodeBe: Belgium
	CountryCodeBe CountryCode = "BE"
	// CountryCodeBz: Belize
	CountryCodeBz CountryCode = "BZ"
	// CountryCodeBj: Benin
	CountryCodeBj CountryCode = "BJ"
	// CountryCodeBm: Bermuda
	CountryCodeBm CountryCode = "BM"
	// CountryCodeBt: Bhutan
	CountryCodeBt CountryCode = "BT"
	// CountryCodeBo: Bolivia (Plurinational State of)
	CountryCodeBo CountryCode = "BO"
	// CountryCodeBq: Bonaire, Sint Eustatius and Saba
	CountryCodeBq CountryCode = "BQ"
	// CountryCodeBa: Bosnia and Herzegovina
	CountryCodeBa CountryCode = "BA"
	// CountryCodeBw: Botswana
	CountryCodeBw CountryCode = "BW"
	// CountryCodeBv: Bouvet Island
	CountryCodeBv CountryCode = "BV"
	// CountryCodeBr: Brazil
	CountryCodeBr CountryCode = "BR"
	// CountryCodeIo: British Indian Ocean Territory
	CountryCodeIo CountryCode = "IO"
	// CountryCodeBn: Brunei Darussalam
	CountryCodeBn CountryCode = "BN"
	// CountryCodeBg: Bulgaria
	CountryCodeBg CountryCode = "BG"
	// CountryCodeBf: Burkina Faso
	CountryCodeBf CountryCode = "BF"
	// CountryCodeBi: Burundi
	CountryCodeBi CountryCode = "BI"
	// CountryCodeCv: Cabo Verde
	CountryCodeCv CountryCode = "CV"
	// CountryCodeKh: Cambodia
	CountryCodeKh CountryCode = "KH"
	// CountryCodeCm: Cameroon
	CountryCodeCm CountryCode = "CM"
	// CountryCodeCa: Canada
	CountryCodeCa CountryCode = "CA"
	// CountryCodeKy: Cayman Islands
	CountryCodeKy CountryCode = "KY"
	// CountryCodeCf: Central African Republic
	CountryCodeCf CountryCode = "CF"
	// CountryCodeTd: Chad
	CountryCodeTd CountryCode = "TD"
	// CountryCodeCl: Chile
	CountryCodeCl CountryCode = "CL"
	// CountryCodeCn: China
	CountryCodeCn CountryCode = "CN"
	// CountryCodeCx: Christmas Island
	CountryCodeCx CountryCode = "CX"
	// CountryCodeCc: Cocos (Keeling) Islands
	CountryCodeCc CountryCode = "CC"
	// CountryCodeCo: Colombia
	CountryCodeCo CountryCode = "CO"
	// CountryCodeKm: Comoros
	CountryCodeKm CountryCode = "KM"
	// CountryCodeCg: Congo
	CountryCodeCg CountryCode = "CG"
	// CountryCodeCd: Congo (Democratic Republic of the)
	CountryCodeCd CountryCode = "CD"
	// CountryCodeCk: Cook Islands
	CountryCodeCk CountryCode = "CK"
	// CountryCodeCr: Costa Rica
	CountryCodeCr CountryCode = "CR"
	// CountryCodeCi: Côte d'Ivoire
	CountryCodeCi CountryCode = "CI"
	// CountryCodeHr: Croatia
	CountryCodeHr CountryCode = "HR"
	// CountryCodeCu: Cuba
	CountryCodeCu CountryCode = "CU"
	// CountryCodeCw: Curaçao
	CountryCodeCw CountryCode = "CW"
	// CountryCodeCy: Cyprus
	CountryCodeCy CountryCode = "CY"
	// CountryCodeCz: Czechia
	CountryCodeCz CountryCode = "CZ"
	// CountryCodeDk: Denmark
	CountryCodeDk CountryCode = "DK"
	// CountryCodeDj: Djibouti
	CountryCodeDj CountryCode = "DJ"
	// CountryCodeDm: Dominica
	CountryCodeDm CountryCode = "DM"
	// CountryCodeDo: Dominican Republic
	CountryCodeDo CountryCode = "DO"
	// CountryCodeEc: Ecuador
	CountryCodeEc CountryCode = "EC"
	// CountryCodeEg: Egypt
	CountryCodeEg CountryCode = "EG"
	// CountryCodeSv: El Salvador
	CountryCodeSv CountryCode = "SV"
	// CountryCodeGq: Equatorial Guinea
	CountryCodeGq CountryCode = "GQ"
	// CountryCodeEr: Eritrea
	CountryCodeEr CountryCode = "ER"
	// CountryCodeEe: Estonia
	CountryCodeEe CountryCode = "EE"
	// CountryCodeEt: Ethiopia
	CountryCodeEt CountryCode = "ET"
	// CountryCodeFk: Falkland Islands (Malvinas)
	CountryCodeFk CountryCode = "FK"
	// CountryCodeFo: Faroe Islands
	CountryCodeFo CountryCode = "FO"
	// CountryCodeFj: Fiji
	CountryCodeFj CountryCode = "FJ"
	// CountryCodeFi: Finland
	CountryCodeFi CountryCode = "FI"
	// CountryCodeFr: France
	CountryCodeFr CountryCode = "FR"
	// CountryCodeGf: French Guiana
	CountryCodeGf CountryCode = "GF"
	// CountryCodePf: French Polynesia
	CountryCodePf CountryCode = "PF"
	// CountryCodeTf: French Southern Territories
	CountryCodeTf CountryCode = "TF"
	// CountryCodeGa: Gabon
	CountryCodeGa CountryCode = "GA"
	// CountryCodeGm: Gambia
	CountryCodeGm CountryCode = "GM"
	// CountryCodeGe: Georgia
	CountryCodeGe CountryCode = "GE"
	// CountryCodeDe: Germany
	CountryCodeDe CountryCode = "DE"
	// CountryCodeGh: Ghana
	CountryCodeGh CountryCode = "GH"
	// CountryCodeGi: Gibraltar
	CountryCodeGi CountryCode = "GI"
	// CountryCodeGr: Greece
	CountryCodeGr CountryCode = "GR"
	// CountryCodeGl: Greenland
	CountryCodeGl CountryCode = "GL"
	// CountryCodeGd: Grenada
	CountryCodeGd CountryCode = "GD"
	// CountryCodeGp: Guadeloupe
	CountryCodeGp CountryCode = "GP"
	// CountryCodeGu: Guam
	CountryCodeGu CountryCode = "GU"
	// CountryCodeGt: Guatemala
	CountryCodeGt CountryCode = "GT"
	// CountryCodeGg: Guernsey
	CountryCodeGg CountryCode = "GG"
	// CountryCodeGn: Guinea
	CountryCodeGn CountryCode = "GN"
	// CountryCodeGw: Guinea-Bissau
	CountryCodeGw CountryCode = "GW"
	// CountryCodeGy: Guyana
	CountryCodeGy CountryCode = "GY"
	// CountryCodeHt: Haiti
	CountryCodeHt CountryCode = "HT"
	// CountryCodeHm: Heard Island and McDonald Islands
	CountryCodeHm CountryCode = "HM"
	// CountryCodeVa: Holy See
	CountryCodeVa CountryCode = "VA"
	// CountryCodeHn: Honduras
	CountryCodeHn CountryCode = "HN"
	// CountryCodeHk: Hong Kong
	CountryCodeHk CountryCode = "HK"
	// CountryCodeHu: Hungary
	CountryCodeHu CountryCode = "HU"
	// CountryCodeIs: Iceland
	CountryCodeIs CountryCode = "IS"
	// CountryCodeIn: India
	CountryCodeIn CountryCode = "IN"
	// CountryCodeID: Indonesia
	CountryCodeID CountryCode = "ID"
	// CountryCodeIr: Iran (Islamic Republic of)
	CountryCodeIr CountryCode = "IR"
	// CountryCodeIq: Iraq
	CountryCodeIq CountryCode = "IQ"
	// CountryCodeIe: Ireland
	CountryCodeIe CountryCode = "IE"
	// CountryCodeIm: Isle of Man
	CountryCodeIm CountryCode = "IM"
	// CountryCodeIl: Israel
	CountryCodeIl CountryCode = "IL"
	// CountryCodeIt: Italy
	CountryCodeIt CountryCode = "IT"
	// CountryCodeJm: Jamaica
	CountryCodeJm CountryCode = "JM"
	// CountryCodeJp: Japan
	CountryCodeJp CountryCode = "JP"
	// CountryCodeJe: Jersey
	CountryCodeJe CountryCode = "JE"
	// CountryCodeJo: Jordan
	CountryCodeJo CountryCode = "JO"
	// CountryCodeKz: Kazakhstan
	CountryCodeKz CountryCode = "KZ"
	// CountryCodeKe: Kenya
	CountryCodeKe CountryCode = "KE"
	// CountryCodeKi: Kiribati
	CountryCodeKi CountryCode = "KI"
	// CountryCodeKp: Korea (Democratic People's Republic of)
	CountryCodeKp CountryCode = "KP"
	// CountryCodeKr: Korea (Republic of)
	CountryCodeKr CountryCode = "KR"
	// CountryCodeKw: Kuwait
	CountryCodeKw CountryCode = "KW"
	// CountryCodeKg: Kyrgyzstan
	CountryCodeKg CountryCode = "KG"
	// CountryCodeLa: Lao People's Democratic Republic
	CountryCodeLa CountryCode = "LA"
	// CountryCodeLv: Latvia
	CountryCodeLv CountryCode = "LV"
	// CountryCodeLb: Lebanon
	CountryCodeLb CountryCode = "LB"
	// CountryCodeLs: Lesotho
	CountryCodeLs CountryCode = "LS"
	// CountryCodeLr: Liberia
	CountryCodeLr CountryCode = "LR"
	// CountryCodeLy: Libya
	CountryCodeLy CountryCode = "LY"
	// CountryCodeLi: Liechtenstein
	CountryCodeLi CountryCode = "LI"
	// CountryCodeLt: Lithuania
	CountryCodeLt CountryCode = "LT"
	// CountryCodeLu: Luxembourg
	CountryCodeLu CountryCode = "LU"
	// CountryCodeMo: Macao
	CountryCodeMo CountryCode = "MO"
	// CountryCodeMk: Macedonia (the former Yugoslav Republic of)
	CountryCodeMk CountryCode = "MK"
	// CountryCodeMg: Madagascar
	CountryCodeMg CountryCode = "MG"
	// CountryCodeMw: Malawi
	CountryCodeMw CountryCode = "MW"
	// CountryCodeMy: Malaysia
	CountryCodeMy CountryCode = "MY"
	// CountryCodeMv: Maldives
	CountryCodeMv CountryCode = "MV"
	// CountryCodeMl: Mali
	CountryCodeMl CountryCode = "ML"
	// CountryCodeMt: Malta
	CountryCodeMt CountryCode = "MT"
	// CountryCodeMh: Marshall Islands
	CountryCodeMh CountryCode = "MH"
	// CountryCodeMq: Martinique
	CountryCodeMq CountryCode = "MQ"
	// CountryCodeMr: Mauritania
	CountryCodeMr CountryCode = "MR"
	// CountryCodeMu: Mauritius
	CountryCodeMu CountryCode = "MU"
	// CountryCodeYt: Mayotte
	CountryCodeYt CountryCode = "YT"
	// CountryCodeMx: Mexico
	CountryCodeMx CountryCode = "MX"
	// CountryCodeFm: Micronesia (Federated States of)
	CountryCodeFm CountryCode = "FM"
	// CountryCodeMd: Moldova (Republic of)
	CountryCodeMd CountryCode = "MD"
	// CountryCodeMc: Monaco
	CountryCodeMc CountryCode = "MC"
	// CountryCodeMn: Mongolia
	CountryCodeMn CountryCode = "MN"
	// CountryCodeMe: Montenegro
	CountryCodeMe CountryCode = "ME"
	// CountryCodeMs: Montserrat
	CountryCodeMs CountryCode = "MS"
	// CountryCodeMa: Morocco
	CountryCodeMa CountryCode = "MA"
	// CountryCodeMz: Mozambique
	CountryCodeMz CountryCode = "MZ"
	// CountryCodeMm: Myanmar
	CountryCodeMm CountryCode = "MM"
	// CountryCodeNa: Namibia
	CountryCodeNa CountryCode = "NA"
	// CountryCodeNr: Nauru
	CountryCodeNr CountryCode = "NR"
	// CountryCodeNp: Nepal
	CountryCodeNp CountryCode = "NP"
	// CountryCodeNl: Netherlands
	CountryCodeNl CountryCode = "NL"
	// CountryCodeNc: New Caledonia
	CountryCodeNc CountryCode = "NC"
	// CountryCodeNz: New Zealand
	CountryCodeNz CountryCode = "NZ"
	// CountryCodeNi: Nicaragua
	CountryCodeNi CountryCode = "NI"
	// CountryCodeNe: Niger
	CountryCodeNe CountryCode = "NE"
	// CountryCodeNg: Nigeria
	CountryCodeNg CountryCode = "NG"
	// CountryCodeNu: Niue
	CountryCodeNu CountryCode = "NU"
	// CountryCodeNf: Norfolk Island
	CountryCodeNf CountryCode = "NF"
	// CountryCodeMp: Northern Mariana Islands
	CountryCodeMp CountryCode = "MP"
	// CountryCodeNo: Norway
	CountryCodeNo CountryCode = "NO"
	// CountryCodeOm: Oman
	CountryCodeOm CountryCode = "OM"
	// CountryCodePk: Pakistan
	CountryCodePk CountryCode = "PK"
	// CountryCodePw: Palau
	CountryCodePw CountryCode = "PW"
	// CountryCodePs: Palestine, State of
	CountryCodePs CountryCode = "PS"
	// CountryCodePa: Panama
	CountryCodePa CountryCode = "PA"
	// CountryCodePg: Papua New Guinea
	CountryCodePg CountryCode = "PG"
	// CountryCodePy: Paraguay
	CountryCodePy CountryCode = "PY"
	// CountryCodePe: Peru
	CountryCodePe CountryCode = "PE"
	// CountryCodePh: Philippines
	CountryCodePh CountryCode = "PH"
	// CountryCodePn: Pitcairn
	CountryCodePn CountryCode = "PN"
	// CountryCodePl: Poland
	CountryCodePl CountryCode = "PL"
	// CountryCodePt: Portugal
	CountryCodePt CountryCode = "PT"
	// CountryCodePr: Puerto Rico
	CountryCodePr CountryCode = "PR"
	// CountryCodeQa: Qatar
	CountryCodeQa CountryCode = "QA"
	// CountryCodeRe: Réunion
	CountryCodeRe CountryCode = "RE"
	// CountryCodeRo: Romania
	CountryCodeRo CountryCode = "RO"
	// CountryCodeRu: Russian Federation
	CountryCodeRu CountryCode = "RU"
	// CountryCodeRw: Rwanda
	CountryCodeRw CountryCode = "RW"
	// CountryCodeBl: Saint Barthélemy
	CountryCodeBl CountryCode = "BL"
	// CountryCodeSh: Saint Helena, Ascension and Tristan da Cunha
	CountryCodeSh CountryCode = "SH"
	// CountryCodeKn: Saint Kitts and Nevis
	CountryCodeKn CountryCode = "KN"
	// CountryCodeLc: Saint Lucia
	CountryCodeLc CountryCode = "LC"
	// CountryCodeMf: Saint Martin (French part)
	CountryCodeMf CountryCode = "MF"
	// CountryCodePm: Saint Pierre and Miquelon
	CountryCodePm CountryCode = "PM"
	// CountryCodeVc: Saint Vincent and the Grenadines
	CountryCodeVc CountryCode = "VC"
	// CountryCodeWs: Samoa
	CountryCodeWs CountryCode = "WS"
	// CountryCodeSm: San Marino
	CountryCodeSm CountryCode = "SM"
	// CountryCodeSt: Sao Tome and Principe
	CountryCodeSt CountryCode = "ST"
	// CountryCodeSa: Saudi Arabia
	CountryCodeSa CountryCode = "SA"
	// CountryCodeSn: Senegal
	CountryCodeSn CountryCode = "SN"
	// CountryCodeRs: Serbia
	CountryCodeRs CountryCode = "RS"
	// CountryCodeSc: Seychelles
	CountryCodeSc CountryCode = "SC"
	// CountryCodeSl: Sierra Leone
	CountryCodeSl CountryCode = "SL"
	// CountryCodeSg: Singapore
	CountryCodeSg CountryCode = "SG"
	// CountryCodeSx: Sint Maarten (Dutch part)
	CountryCodeSx CountryCode = "SX"
	// CountryCodeSk: Slovakia
	CountryCodeSk CountryCode = "SK"
	// CountryCodeSi: Slovenia
	CountryCodeSi CountryCode = "SI"
	// CountryCodeSb: Solomon Islands
	CountryCodeSb CountryCode = "SB"
	// CountryCodeSo: Somalia
	CountryCodeSo CountryCode = "SO"
	// CountryCodeZa: South Africa
	CountryCodeZa CountryCode = "ZA"
	// CountryCodeGs: South Georgia and the South Sandwich Islands
	CountryCodeGs CountryCode = "GS"
	// CountryCodeSs: South Sudan
	CountryCodeSs CountryCode = "SS"
	// CountryCodeEs: Spain
	CountryCodeEs CountryCode = "ES"
	// CountryCodeLk: Sri Lanka
	CountryCodeLk CountryCode = "LK"
	// CountryCodeSd: Sudan
	CountryCodeSd CountryCode = "SD"
	// CountryCodeSr: Suriname
	CountryCodeSr CountryCode = "SR"
	// CountryCodeSj: Svalbard and Jan Mayen
	CountryCodeSj CountryCode = "SJ"
	// CountryCodeSz: Swaziland
	CountryCodeSz CountryCode = "SZ"
	// CountryCodeSe: Sweden
	CountryCodeSe CountryCode = "SE"
	// CountryCodeCh: Switzerland
	CountryCodeCh CountryCode = "CH"
	// CountryCodeSy: Syrian Arab Republic
	CountryCodeSy CountryCode = "SY"
	// CountryCodeTw: Taiwan, Province of China
	CountryCodeTw CountryCode = "TW"
	// CountryCodeTj: Tajikistan
	CountryCodeTj CountryCode = "TJ"
	// CountryCodeTz: Tanzania, United Republic of
	CountryCodeTz CountryCode = "TZ"
	// CountryCodeTh: Thailand
	CountryCodeTh CountryCode = "TH"
	// CountryCodeTl: Timor-Leste
	CountryCodeTl CountryCode = "TL"
	// CountryCodeTg: Togo
	CountryCodeTg CountryCode = "TG"
	// CountryCodeTk: Tokelau
	CountryCodeTk CountryCode = "TK"
	// CountryCodeTo: Tonga
	CountryCodeTo CountryCode = "TO"
	// CountryCodeTt: Trinidad and Tobago
	CountryCodeTt CountryCode = "TT"
	// CountryCodeTn: Tunisia
	CountryCodeTn CountryCode = "TN"
	// CountryCodeTr: Turkey
	CountryCodeTr CountryCode = "TR"
	// CountryCodeTm: Turkmenistan
	CountryCodeTm CountryCode = "TM"
	// CountryCodeTc: Turks and Caicos Islands
	CountryCodeTc CountryCode = "TC"
	// CountryCodeTv: Tuvalu
	CountryCodeTv CountryCode = "TV"
	// CountryCodeUg: Uganda
	CountryCodeUg CountryCode = "UG"
	// CountryCodeUa: Ukraine
	CountryCodeUa CountryCode = "UA"
	// CountryCodeAe: United Arab Emirates
	CountryCodeAe CountryCode = "AE"
	// CountryCodeGb: United Kingdom of Great Britain and Northern Ireland
	CountryCodeGb CountryCode = "GB"
	// CountryCodeUs: United States of America
	CountryCodeUs CountryCode = "US"
	// CountryCodeUm: United States Minor Outlying Islands
	CountryCodeUm CountryCode = "UM"
	// CountryCodeUy: Uruguay
	CountryCodeUy CountryCode = "UY"
	// CountryCodeUz: Uzbekistan
	CountryCodeUz CountryCode = "UZ"
	// CountryCodeVu: Vanuatu
	CountryCodeVu CountryCode = "VU"
	// CountryCodeVe: Venezuela (Bolivarian Republic of)
	CountryCodeVe CountryCode = "VE"
	// CountryCodeVn: Viet Nam
	CountryCodeVn CountryCode = "VN"
	// CountryCodeVg: Virgin Islands (British)
	CountryCodeVg CountryCode = "VG"
	// CountryCodeVi: Virgin Islands (U.S.)
	CountryCodeVi CountryCode = "VI"
	// CountryCodeWf: Wallis and Futuna
	CountryCodeWf CountryCode = "WF"
	// CountryCodeEh: Western Sahara
	CountryCodeEh CountryCode = "EH"
	// CountryCodeYe: Yemen
	CountryCodeYe CountryCode = "YE"
	// CountryCodeZm: Zambia
	CountryCodeZm CountryCode = "ZM"
	// CountryCodeZw: Zimbabwe
	CountryCodeZw CountryCode = "ZW"
)

// Coupon: The resource representing a Coupon.
type Coupon struct {
	// AmountOff: Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
	AmountOff float64 `json:"amount_off" yaml:"amount_off" schema:"amount_off"`
	// Deleted: Always true for a deleted object.
	Deleted bool `json:"deleted" yaml:"deleted" schema:"deleted"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// PercentOff: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.
	//
	// For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
	PercentOff float64 `json:"percent_off" yaml:"percent_off" schema:"percent_off"`
}

// CreatedAtSortMode: Supported set of sort modes for scanning by created_at only.
// Currently, we only support scanning in ascending order.
type CreatedAtSortMode string

const (
	// CreatedAtSortModeCreatedAtAscending: Sort in increasing order of "created_at".
	CreatedAtSortModeCreatedAtAscending CreatedAtSortMode = "created_at_ascending"
	// CreatedAtSortModeCreatedAtDescending: Sort in decreasing order of "created_at".
	CreatedAtSortModeCreatedAtDescending CreatedAtSortMode = "created_at_descending"
)

// Currency: Currency is the list of supported currencies.
// This comes from the Stripe API docs: For more details see <https://support.stripe.com/questions/which-currencies-does-stripe-support>.
type Currency string

const (
	// CurrencyAed: United Arab Emirates Dirham
	CurrencyAed Currency = "aed"
	// CurrencyAfn: Afghan Afghani
	CurrencyAfn Currency = "afn"
	// CurrencyAll: Albanian Lek
	CurrencyAll Currency = "all"
	// CurrencyAmd: Armenian Dram
	CurrencyAmd Currency = "amd"
	// CurrencyAng: Netherlands Antillean Gulden
	CurrencyAng Currency = "ang"
	// CurrencyAoa: Angolan Kwanza
	CurrencyAoa Currency = "aoa"
	// CurrencyArs: Argentine Peso
	CurrencyArs Currency = "ars"
	// CurrencyAud: Australian Dollar
	CurrencyAud Currency = "aud"
	// CurrencyAwg: Aruban Florin
	CurrencyAwg Currency = "awg"
	// CurrencyAzn: Azerbaijani Manat
	CurrencyAzn Currency = "azn"
	// CurrencyBam: Bosnia & Herzegovina Convertible Mark
	CurrencyBam Currency = "bam"
	// CurrencyBbd: Barbadian Dollar
	CurrencyBbd Currency = "bbd"
	// CurrencyBdt: Bangladeshi Taka
	CurrencyBdt Currency = "bdt"
	// CurrencyBgn: Bulgarian Lev
	CurrencyBgn Currency = "bgn"
	// CurrencyBif: Burundian Franc
	CurrencyBif Currency = "bif"
	// CurrencyBmd: Bermudian Dollar
	CurrencyBmd Currency = "bmd"
	// CurrencyBnd: Brunei Dollar
	CurrencyBnd Currency = "bnd"
	// CurrencyBob: Bolivian Boliviano
	CurrencyBob Currency = "bob"
	// CurrencyBrl: Brazilian Real
	CurrencyBrl Currency = "brl"
	// CurrencyBsd: Bahamian Dollar
	CurrencyBsd Currency = "bsd"
	// CurrencyBwp: Botswana Pula
	CurrencyBwp Currency = "bwp"
	// CurrencyBzd: Belize Dollar
	CurrencyBzd Currency = "bzd"
	// CurrencyCad: Canadian Dollar
	CurrencyCad Currency = "cad"
	// CurrencyCdf: Congolese Franc
	CurrencyCdf Currency = "cdf"
	// CurrencyChf: Swiss Franc
	CurrencyChf Currency = "chf"
	// CurrencyClp: Chilean Peso
	CurrencyClp Currency = "clp"
	// CurrencyCny: Chinese Renminbi Yuan
	CurrencyCny Currency = "cny"
	// CurrencyCop: Colombian Peso
	CurrencyCop Currency = "cop"
	// CurrencyCrc: Costa Rican Colón
	CurrencyCrc Currency = "crc"
	// CurrencyCve: Cape Verdean Escudo
	CurrencyCve Currency = "cve"
	// CurrencyCzk: Czech Koruna
	CurrencyCzk Currency = "czk"
	// CurrencyDjf: Djiboutian Franc
	CurrencyDjf Currency = "djf"
	// CurrencyDkk: Danish Krone
	CurrencyDkk Currency = "dkk"
	// CurrencyDop: Dominican Peso
	CurrencyDop Currency = "dop"
	// CurrencyDzd: Algerian Dinar
	CurrencyDzd Currency = "dzd"
	// CurrencyEek: Estonian Kroon
	CurrencyEek Currency = "eek"
	// CurrencyEgp: Egyptian Pound
	CurrencyEgp Currency = "egp"
	// CurrencyEtb: Ethiopian Birr
	CurrencyEtb Currency = "etb"
	// CurrencyEur: Euro
	CurrencyEur Currency = "eur"
	// CurrencyFjd: Fijian Dollar
	CurrencyFjd Currency = "fjd"
	// CurrencyFkp: Falkland Islands Pound
	CurrencyFkp Currency = "fkp"
	// CurrencyGbp: British Pound
	CurrencyGbp Currency = "gbp"
	// CurrencyGel: Georgian Lari
	CurrencyGel Currency = "gel"
	// CurrencyGip: Gibraltar Pound
	CurrencyGip Currency = "gip"
	// CurrencyGmd: Gambian Dalasi
	CurrencyGmd Currency = "gmd"
	// CurrencyGnf: Guinean Franc
	CurrencyGnf Currency = "gnf"
	// CurrencyGtq: Guatemalan Quetzal
	CurrencyGtq Currency = "gtq"
	// CurrencyGyd: Guyanese Dollar
	CurrencyGyd Currency = "gyd"
	// CurrencyHkd: Hong Kong Dollar
	CurrencyHkd Currency = "hkd"
	// CurrencyHnl: Honduran Lempira
	CurrencyHnl Currency = "hnl"
	// CurrencyHrk: Croatian Kuna
	CurrencyHrk Currency = "hrk"
	// CurrencyHtg: Haitian Gourde
	CurrencyHtg Currency = "htg"
	// CurrencyHuf: Hungarian Forint
	CurrencyHuf Currency = "huf"
	// CurrencyIdr: Indonesian Rupiah
	CurrencyIdr Currency = "idr"
	// CurrencyIls: Israeli New Sheqel
	CurrencyIls Currency = "ils"
	// CurrencyInr: Indian Rupee
	CurrencyInr Currency = "inr"
	// CurrencyIsk: Icelandic Króna
	CurrencyIsk Currency = "isk"
	// CurrencyJmd: Jamaican Dollar
	CurrencyJmd Currency = "jmd"
	// CurrencyJpy: Japanese Yen
	CurrencyJpy Currency = "jpy"
	// CurrencyKes: Kenyan Shilling
	CurrencyKes Currency = "kes"
	// CurrencyKgs: Kyrgyzstani Som
	CurrencyKgs Currency = "kgs"
	// CurrencyKhr: Cambodian Riel
	CurrencyKhr Currency = "khr"
	// CurrencyKmf: Comorian Franc
	CurrencyKmf Currency = "kmf"
	// CurrencyKrw: South Korean Won
	CurrencyKrw Currency = "krw"
	// CurrencyKyd: Cayman Islands Dollar
	CurrencyKyd Currency = "kyd"
	// CurrencyKzt: Kazakhstani Tenge
	CurrencyKzt Currency = "kzt"
	// CurrencyLak: Lao Kip
	CurrencyLak Currency = "lak"
	// CurrencyLbp: Lebanese Pound
	CurrencyLbp Currency = "lbp"
	// CurrencyLkr: Sri Lankan Rupee
	CurrencyLkr Currency = "lkr"
	// CurrencyLrd: Liberian Dollar
	CurrencyLrd Currency = "lrd"
	// CurrencyLsl: Lesotho Loti
	CurrencyLsl Currency = "lsl"
	// CurrencyLtl: Lithuanian Litas
	CurrencyLtl Currency = "ltl"
	// CurrencyLvl: Latvian Lats
	CurrencyLvl Currency = "lvl"
	// CurrencyMad: Moroccan Dirham
	CurrencyMad Currency = "mad"
	// CurrencyMdl: Moldovan Leu
	CurrencyMdl Currency = "mdl"
	// CurrencyMga: Malagasy Ariary
	CurrencyMga Currency = "mga"
	// CurrencyMkd: Macedonian Denar
	CurrencyMkd Currency = "mkd"
	// CurrencyMnt: Mongolian Tögrög
	CurrencyMnt Currency = "mnt"
	// CurrencyMop: Macanese Pataca
	CurrencyMop Currency = "mop"
	// CurrencyMro: Mauritanian Ouguiya
	CurrencyMro Currency = "mro"
	// CurrencyMur: Mauritian Rupee
	CurrencyMur Currency = "mur"
	// CurrencyMvr: Maldivian Rufiyaa
	CurrencyMvr Currency = "mvr"
	// CurrencyMwk: Malawian Kwacha
	CurrencyMwk Currency = "mwk"
	// CurrencyMxn: Mexican Peso
	CurrencyMxn Currency = "mxn"
	// CurrencyMyr: Malaysian Ringgit
	CurrencyMyr Currency = "myr"
	// CurrencyMzn: Mozambican Metical
	CurrencyMzn Currency = "mzn"
	// CurrencyNad: Namibian Dollar
	CurrencyNad Currency = "nad"
	// CurrencyNgn: Nigerian Naira
	CurrencyNgn Currency = "ngn"
	// CurrencyNio: Nicaraguan Córdoba
	CurrencyNio Currency = "nio"
	// CurrencyNok: Norwegian Krone
	CurrencyNok Currency = "nok"
	// CurrencyNpr: Nepalese Rupee
	CurrencyNpr Currency = "npr"
	// CurrencyNzd: New Zealand Dollar
	CurrencyNzd Currency = "nzd"
	// CurrencyPab: Panamanian Balboa
	CurrencyPab Currency = "pab"
	// CurrencyPen: Peruvian Nuevo Sol
	CurrencyPen Currency = "pen"
	// CurrencyPgk: Papua New Guinean Kina
	CurrencyPgk Currency = "pgk"
	// CurrencyPhp: Philippine Peso
	CurrencyPhp Currency = "php"
	// CurrencyPkr: Pakistani Rupee
	CurrencyPkr Currency = "pkr"
	// CurrencyPln: Polish Złoty
	CurrencyPln Currency = "pln"
	// CurrencyPyg: Paraguayan Guaraní
	CurrencyPyg Currency = "pyg"
	// CurrencyQar: Qatari Riyal
	CurrencyQar Currency = "qar"
	// CurrencyRon: Romanian Leu
	CurrencyRon Currency = "ron"
	// CurrencyRsd: Serbian Dinar
	CurrencyRsd Currency = "rsd"
	// CurrencyRub: Russian Ruble
	CurrencyRub Currency = "rub"
	// CurrencyRwf: Rwandan Franc
	CurrencyRwf Currency = "rwf"
	// CurrencySar: Saudi Riyal
	CurrencySar Currency = "sar"
	// CurrencySbd: Solomon Islands Dollar
	CurrencySbd Currency = "sbd"
	// CurrencyScr: Seychellois Rupee
	CurrencyScr Currency = "scr"
	// CurrencySek: Swedish Krona
	CurrencySek Currency = "sek"
	// CurrencySgd: Singapore Dollar
	CurrencySgd Currency = "sgd"
	// CurrencyShp: Saint Helenian Pound
	CurrencyShp Currency = "shp"
	// CurrencySll: Sierra Leonean Leone
	CurrencySll Currency = "sll"
	// CurrencySos: Somali Shilling
	CurrencySos Currency = "sos"
	// CurrencySrd: Surinamese Dollar
	CurrencySrd Currency = "srd"
	// CurrencyStd: São Tomé and Príncipe Dobra
	CurrencyStd Currency = "std"
	// CurrencySvc: Salvadoran Colón
	CurrencySvc Currency = "svc"
	// CurrencySzl: Swazi Lilangeni
	CurrencySzl Currency = "szl"
	// CurrencyThb: Thai Baht
	CurrencyThb Currency = "thb"
	// CurrencyTjs: Tajikistani Somoni
	CurrencyTjs Currency = "tjs"
	// CurrencyTop: Tongan Paʻanga
	CurrencyTop Currency = "top"
	// CurrencyTry: Turkish Lira
	CurrencyTry Currency = "try"
	// CurrencyTtd: Trinidad and Tobago Dollar
	CurrencyTtd Currency = "ttd"
	// CurrencyTwd: New Taiwan Dollar
	CurrencyTwd Currency = "twd"
	// CurrencyTzs: Tanzanian Shilling
	CurrencyTzs Currency = "tzs"
	// CurrencyUah: Ukrainian Hryvnia
	CurrencyUah Currency = "uah"
	// CurrencyUgx: Ugandan Shilling
	CurrencyUgx Currency = "ugx"
	// CurrencyUsd: United States Dollar
	CurrencyUsd Currency = "usd"
	// CurrencyUyu: Uruguayan Peso
	CurrencyUyu Currency = "uyu"
	// CurrencyUzs: Uzbekistani Som
	CurrencyUzs Currency = "uzs"
	// CurrencyVef: Venezuelan Bolívar
	CurrencyVef Currency = "vef"
	// CurrencyVnd: Vietnamese Đồng
	CurrencyVnd Currency = "vnd"
	// CurrencyVuv: Vanuatu Vatu
	CurrencyVuv Currency = "vuv"
	// CurrencyWst: Samoan Tala
	CurrencyWst Currency = "wst"
	// CurrencyXaf: Central African Cfa Franc
	CurrencyXaf Currency = "xaf"
	// CurrencyXcd: East Caribbean Dollar
	CurrencyXcd Currency = "xcd"
	// CurrencyXof: West African Cfa Franc
	CurrencyXof Currency = "xof"
	// CurrencyXpf: Cfp Franc
	CurrencyXpf Currency = "xpf"
	// CurrencyYer: Yemeni Rial
	CurrencyYer Currency = "yer"
	// CurrencyZar: South African Rand
	CurrencyZar Currency = "zar"
	// CurrencyZmw: Zambian Kwacha
	CurrencyZmw Currency = "zmw"
)

// CurveGetControlPoints: The response from the `CurveGetControlPoints` command.
type CurveGetControlPoints struct {
	// ControlPoints: Control points in the curve.
	ControlPoints []Point3D `json:"control_points" yaml:"control_points" schema:"control_points,required"`
}

// CurveGetType: The response from the `CurveGetType` command.
type CurveGetType struct {
	// CurveType: Curve type
	CurveType CurveType `json:"curve_type" yaml:"curve_type" schema:"curve_type,required"`
}

// CurveType: The type of Curve (embedded within path)
type CurveType string

const (
	// CurveTypeLine represents the CurveType `"line"`.
	CurveTypeLine CurveType = "line"
	// CurveTypeNurbs represents the CurveType `"nurbs"`.
	CurveTypeNurbs CurveType = "nurbs"
)

// Customer: The resource representing a payment "Customer".
type Customer struct {
	// Address: The customer's address.
	Address NewAddress `json:"address" yaml:"address" schema:"address"`
	// Balance: Current balance, if any, being stored on the customer in the payments service.
	//
	// If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
	Balance float64 `json:"balance" yaml:"balance" schema:"balance"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency"`
	// Delinquent: When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed.
	//
	// When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by dunning, `delinquent` doesn't get reset to `false`.
	Delinquent bool `json:"delinquent" yaml:"delinquent" schema:"delinquent"`
	// Email: The customer's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Name: The customer's full name or business name.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The customer's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CustomerBalance: A balance for a user.
// This holds information about the financial balance for the user.
type CustomerBalance struct {
	// CreatedAt: The date and time the balance was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the balance.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MonthlyCreditsRemaining: The monthy credits remaining in the balance. This gets re-upped every month, but if the credits are not used for a month they do not carry over to the next month. It is a stable amount granted to the user per month.
	MonthlyCreditsRemaining float64 `json:"monthly_credits_remaining" yaml:"monthly_credits_remaining" schema:"monthly_credits_remaining,required"`
	// PrePayCashRemaining: The amount of pre-pay cash remaining in the balance. This number goes down as the user uses their pre-paid credits. The reason we track this amount is if a user ever wants to withdraw their pre-pay cash, we can use this amount to determine how much to give them. Say a user has $100 in pre-paid cash, their bill is worth, $50 after subtracting any other credits (like monthly etc.) Their bill is $50, their pre-pay cash remaining will be subtracted by 50 to pay the bill and their `pre_pay_credits_remaining` will be subtracted by 50 to pay the bill. This way if they want to withdraw money after, they can only withdraw $50 since that is the amount of cash they have remaining.
	PrePayCashRemaining float64 `json:"pre_pay_cash_remaining" yaml:"pre_pay_cash_remaining" schema:"pre_pay_cash_remaining,required"`
	// PrePayCreditsRemaining: The amount of credits remaining in the balance. This is typically the amount of cash * some multiplier they get for pre-paying their account. This number lowers every time a bill is paid with the balance. This number increases every time a user adds funds to their balance. This may be through a subscription or a one off payment.
	PrePayCreditsRemaining float64 `json:"pre_pay_credits_remaining" yaml:"pre_pay_credits_remaining" schema:"pre_pay_credits_remaining,required"`
	// TotalDue: This includes any outstanding, draft, or open invoices and any pending invoice items. This does not include any credits the user has on their account.
	TotalDue float64 `json:"total_due" yaml:"total_due" schema:"total_due,required"`
	// UpdatedAt: The date and time the balance was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID the balance belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// Data is the type definition for a Data.
type Data struct {
	// Files: The exported files
	Files []RawFile `json:"files" yaml:"files" schema:"files,required"`
}

// DeviceAccessTokenRequestForm: The form for a device access token request.
type DeviceAccessTokenRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
	// DeviceCode: The device code.
	DeviceCode UUID `json:"device_code" yaml:"device_code" schema:"device_code,required"`
	// GrantType: The grant type.
	GrantType Oauth2GrantType `json:"grant_type" yaml:"grant_type" schema:"grant_type,required"`
}

// DeviceAuthRequestForm: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
type DeviceAuthRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
}

// DeviceAuthVerifyParams: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.
type DeviceAuthVerifyParams struct {
	// UserCode: The user code.
	UserCode string `json:"user_code" yaml:"user_code" schema:"user_code,required"`
}

// Direction: Specifies the sign of a co-ordinate axis.
type Direction string

const (
	// DirectionPositive: Increasing numbers.
	DirectionPositive Direction = "positive"
	// DirectionNegative: Decreasing numbers.
	DirectionNegative Direction = "negative"
)

// Discount: The resource representing a Discount.
type Discount struct {
	// Coupon: The coupon that applied to create this discount.
	Coupon Coupon `json:"coupon" yaml:"coupon" schema:"coupon,required"`
}

// DockerSystemInfo: Docker system info.
type DockerSystemInfo struct {
	// Architecture: Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
	Architecture string `json:"architecture" yaml:"architecture" schema:"architecture"`
	// BridgeNfIp6Tables: Indicates if `bridge-nf-call-ip6tables` is available on the host.
	BridgeNfIp6Tables bool `json:"bridge_nf_ip6tables" yaml:"bridge_nf_ip6tables" schema:"bridge_nf_ip6tables"`
	// BridgeNfIptables: Indicates if `bridge-nf-call-iptables` is available on the host.
	BridgeNfIptables bool `json:"bridge_nf_iptables" yaml:"bridge_nf_iptables" schema:"bridge_nf_iptables"`
	// CgroupDriver: The driver to use for managing cgroups.
	CgroupDriver SystemInfoCgroupDriverEnum `json:"cgroup_driver" yaml:"cgroup_driver" schema:"cgroup_driver"`
	// CgroupVersion: The version of the cgroup.
	CgroupVersion SystemInfoCgroupVersionEnum `json:"cgroup_version" yaml:"cgroup_version" schema:"cgroup_version"`
	// ClusterAdvertise: The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.
	//
	// **Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty.
	ClusterAdvertise string `json:"cluster_advertise" yaml:"cluster_advertise" schema:"cluster_advertise"`
	// ClusterStore: URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.
	//
	// **Deprecated**: This field is only propagated when using standalone Swarm mode, and overlay networking using an external k/v store. Overlay networks with Swarm mode enabled use the built-in raft store, and this field will be empty.
	ClusterStore string `json:"cluster_store" yaml:"cluster_store" schema:"cluster_store"`
	// ContainerdCommit:
	ContainerdCommit Commit `json:"containerd_commit" yaml:"containerd_commit" schema:"containerd_commit"`
	// Containers: Total number of containers on the host.
	Containers int `json:"containers" yaml:"containers" schema:"containers"`
	// ContainersPaused: Number of containers with status `\"paused\"`.
	ContainersPaused int `json:"containers_paused" yaml:"containers_paused" schema:"containers_paused"`
	// ContainersRunning: Number of containers with status `\"running\"`.
	ContainersRunning int `json:"containers_running" yaml:"containers_running" schema:"containers_running"`
	// ContainersStopped: Number of containers with status `\"stopped\"`.
	ContainersStopped int `json:"containers_stopped" yaml:"containers_stopped" schema:"containers_stopped"`
	// CpuCfsPeriod: Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.
	CpuCfsPeriod bool `json:"cpu_cfs_period" yaml:"cpu_cfs_period" schema:"cpu_cfs_period"`
	// CpuCfsQuota: Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.
	CpuCfsQuota bool `json:"cpu_cfs_quota" yaml:"cpu_cfs_quota" schema:"cpu_cfs_quota"`
	// CpuSet: Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
	CpuSet bool `json:"cpu_set" yaml:"cpu_set" schema:"cpu_set"`
	// CpuShares: Indicates if CPU Shares limiting is supported by the host.
	CpuShares bool `json:"cpu_shares" yaml:"cpu_shares" schema:"cpu_shares"`
	// Debug: Indicates if the daemon is running in debug-mode / with debug-level logging enabled.
	Debug bool `json:"debug" yaml:"debug" schema:"debug"`
	// DefaultAddressPools: List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools.
	DefaultAddressPools []SystemInfoDefaultAddressPools `json:"default_address_pools" yaml:"default_address_pools" schema:"default_address_pools"`
	// DefaultRuntime: Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.
	DefaultRuntime string `json:"default_runtime" yaml:"default_runtime" schema:"default_runtime"`
	// DockerRootDir: Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.
	DockerRootDir string `json:"docker_root_dir" yaml:"docker_root_dir" schema:"docker_root_dir"`
	// Driver: Name of the storage driver in use.
	Driver string `json:"driver" yaml:"driver" schema:"driver"`
	// DriverStatus: Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.
	//
	// **Note**: The information returned in this field, including the formatting of values and labels, should not be considered stable, and may change without notice.
	DriverStatus [][]string `json:"driver_status" yaml:"driver_status" schema:"driver_status"`
	// ExperimentalBuild: Indicates if experimental features are enabled on the daemon.
	ExperimentalBuild bool `json:"experimental_build" yaml:"experimental_build" schema:"experimental_build"`
	// HttpProxy: HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
	HttpProxy string `json:"http_proxy" yaml:"http_proxy" schema:"http_proxy"`
	// HttpsProxy: HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
	HttpsProxy string `json:"https_proxy" yaml:"https_proxy" schema:"https_proxy"`
	// ID: Unique identifier of the daemon.
	//
	// **Note**: The format of the ID itself is not part of the API, and should not be considered stable.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Images: Total number of images on the host. Both _tagged_ and _untagged_ (dangling) images are counted.
	Images int `json:"images" yaml:"images" schema:"images"`
	// IndexServerAddress: Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.
	IndexServerAddress string `json:"index_server_address" yaml:"index_server_address" schema:"index_server_address"`
	// InitBinary: Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
	InitBinary string `json:"init_binary" yaml:"init_binary" schema:"init_binary"`
	// InitCommit:
	InitCommit Commit `json:"init_commit" yaml:"init_commit" schema:"init_commit"`
	// Ipv4Forwarding: Indicates IPv4 forwarding is enabled.
	Ipv4Forwarding bool `json:"ipv4_forwarding" yaml:"ipv4_forwarding" schema:"ipv4_forwarding"`
	// Isolation: Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.
	Isolation SystemInfoIsolationEnum `json:"isolation" yaml:"isolation" schema:"isolation"`
	// KernelMemory: Indicates if the host has kernel memory limit support enabled.
	//
	// **Deprecated**: This field is deprecated as the kernel 5.4 deprecated `kmem.limit_in_bytes`.
	KernelMemory bool `json:"kernel_memory" yaml:"kernel_memory" schema:"kernel_memory"`
	// KernelMemoryTcp: Indicates if the host has kernel memory TCP limit support enabled.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
	KernelMemoryTcp bool `json:"kernel_memory_tcp" yaml:"kernel_memory_tcp" schema:"kernel_memory_tcp"`
	// KernelVersion: Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.
	KernelVersion string `json:"kernel_version" yaml:"kernel_version" schema:"kernel_version"`
	// Labels: User-defined labels (key/value metadata) as set on the daemon.
	//
	// **Note**: When part of a Swarm, nodes can both have _daemon_ labels, set through the daemon configuration, and _node_ labels, set from a manager node in the Swarm. Node labels are not included in this field. Node labels can be retrieved using the `/nodes/(id)` endpoint on a manager node in the Swarm.
	Labels []string `json:"labels" yaml:"labels" schema:"labels"`
	// LiveRestoreEnabled: Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.
	LiveRestoreEnabled bool `json:"live_restore_enabled" yaml:"live_restore_enabled" schema:"live_restore_enabled"`
	// LoggingDriver: The logging driver to use as a default for new containers.
	LoggingDriver string `json:"logging_driver" yaml:"logging_driver" schema:"logging_driver"`
	// MemTotal: Total amount of physical memory available on the host, in bytes.
	MemTotal int `json:"mem_total" yaml:"mem_total" schema:"mem_total"`
	// MemoryLimit: Indicates if the host has memory limit support enabled.
	MemoryLimit bool `json:"memory_limit" yaml:"memory_limit" schema:"memory_limit"`
	// NEventsListener: Number of event listeners subscribed.
	NEventsListener int `json:"n_events_listener" yaml:"n_events_listener" schema:"n_events_listener"`
	// NFd: The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.
	NFd int `json:"n_fd" yaml:"n_fd" schema:"n_fd"`
	// Name: Hostname of the host.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Ncpu: The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.
	Ncpu int `json:"ncpu" yaml:"ncpu" schema:"ncpu"`
	// NoProxy: Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.
	NoProxy string `json:"no_proxy" yaml:"no_proxy" schema:"no_proxy"`
	// OomKillDisable: Indicates if OOM killer disable is supported on the host.
	OomKillDisable bool `json:"oom_kill_disable" yaml:"oom_kill_disable" schema:"oom_kill_disable"`
	// OperatingSystem: Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"
	OperatingSystem string `json:"operating_system" yaml:"operating_system" schema:"operating_system"`
	// OsType: Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
	OsType string `json:"os_type" yaml:"os_type" schema:"os_type"`
	// OsVersion: Version of the host's operating system
	//
	// **Note**: The information returned in this field, including its very existence, and the formatting of values, should not be considered stable, and may change without notice.
	OsVersion string `json:"os_version" yaml:"os_version" schema:"os_version"`
	// PidsLimit: Indicates if the host kernel has PID limit support enabled.
	PidsLimit bool `json:"pids_limit" yaml:"pids_limit" schema:"pids_limit"`
	// Plugins:
	Plugins PluginsInfo `json:"plugins" yaml:"plugins" schema:"plugins"`
	// ProductLicense: Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included.
	ProductLicense string `json:"product_license" yaml:"product_license" schema:"product_license"`
	// RegistryConfig:
	RegistryConfig RegistryServiceConfig `json:"registry_config" yaml:"registry_config" schema:"registry_config"`
	// RuncCommit:
	RuncCommit Commit `json:"runc_commit" yaml:"runc_commit" schema:"runc_commit"`
	// Runtimes:
	Runtimes map[string]Runtime `json:"runtimes" yaml:"runtimes" schema:"runtimes"`
	// SecurityOptions: List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.
	SecurityOptions []string `json:"security_options" yaml:"security_options" schema:"security_options"`
	// ServerVersion: Version string of the daemon. **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) returns the Swarm version instead of the daemon  version, for example `swarm/1.2.8`.
	ServerVersion string `json:"server_version" yaml:"server_version" schema:"server_version"`
	// SwapLimit: Indicates if the host has memory swap limit support enabled.
	SwapLimit bool `json:"swap_limit" yaml:"swap_limit" schema:"swap_limit"`
	// SystemTime: The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.
	SystemTime string `json:"system_time" yaml:"system_time" schema:"system_time"`
	// Warnings: List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user.
	Warnings []string `json:"warnings" yaml:"warnings" schema:"warnings"`
}

// EmailAuthenticationForm: The body of the form for email authentication.
type EmailAuthenticationForm struct {
	// CallbackUrl: The URL to redirect back to after we have authenticated.
	CallbackUrl URL `json:"callback_url" yaml:"callback_url" schema:"callback_url"`
	// Email: The user's email.
	Email string `json:"email" yaml:"email" schema:"email,required"`
}

// EngineMetadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type EngineMetadata struct {
	// AsyncJobsRunning: If any async job is currently running.
	AsyncJobsRunning bool `json:"async_jobs_running" yaml:"async_jobs_running" schema:"async_jobs_running,required"`
	// Cache: Metadata about our cache.
	Cache CacheMetadata `json:"cache" yaml:"cache" schema:"cache,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// Fs: Metadata about our file system.
	Fs FileSystemMetadata `json:"fs" yaml:"fs" schema:"fs,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
	// Pubsub: Metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub" yaml:"pubsub" schema:"pubsub,required"`
}

// EntityGetAllChildUuids: The response from the `EntityGetAllChildUuids` command.
type EntityGetAllChildUuids struct {
	// EntityIds: The UUIDs of the child entities.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// EntityGetChildUuid: The response from the `EntityGetChildUuid` command.
type EntityGetChildUuid struct {
	// EntityID: The UUID of the child entity.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
}

// EntityGetNumChildren: The response from the `EntityGetNumChildren` command.
type EntityGetNumChildren struct {
	// Num: The number of children the entity has.
	Num int `json:"num" yaml:"num" schema:"num,required"`
}

// EntityGetParentID: The response from the `EntityGetParentId` command.
type EntityGetParentID struct {
	// EntityID: The UUID of the parent entity.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
}

// EntityType: The type of entity
type EntityType string

const (
	// EntityTypeEntity represents the EntityType `"entity"`.
	EntityTypeEntity EntityType = "entity"
	// EntityTypeObject represents the EntityType `"object"`.
	EntityTypeObject EntityType = "object"
	// EntityTypePath represents the EntityType `"path"`.
	EntityTypePath EntityType = "path"
	// EntityTypeCurve represents the EntityType `"curve"`.
	EntityTypeCurve EntityType = "curve"
	// EntityTypeSolid2D represents the EntityType `"solid2d"`.
	EntityTypeSolid2D EntityType = "solid2d"
	// EntityTypeSolid3D represents the EntityType `"solid3d"`.
	EntityTypeSolid3D EntityType = "solid3d"
	// EntityTypeEdge represents the EntityType `"edge"`.
	EntityTypeEdge EntityType = "edge"
	// EntityTypeFace represents the EntityType `"face"`.
	EntityTypeFace EntityType = "face"
	// EntityTypePlane represents the EntityType `"plane"`.
	EntityTypePlane EntityType = "plane"
)

// Environment: The environment the server is running in.
type Environment string

const (
	// EnvironmentDevelopment: The development environment. This is for running locally.
	EnvironmentDevelopment Environment = "DEVELOPMENT"
	// EnvironmentPreview: The preview environment. This is when PRs are created and a service is deployed for testing.
	EnvironmentPreview Environment = "PREVIEW"
	// EnvironmentProduction: The production environment.
	EnvironmentProduction Environment = "PRODUCTION"
)

// Error: Error information from a response.
type Error struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}

// ErrorCode: The type of error sent by the KittyCAD API.
type ErrorCode string

const (
	// ErrorCodeInternalEngine: Graphics engine failed to complete request, consider retrying
	ErrorCodeInternalEngine ErrorCode = "internal_engine"
	// ErrorCodeInternalAPI: API failed to complete request, consider retrying
	ErrorCodeInternalAPI ErrorCode = "internal_api"
	// ErrorCodeBadRequest: User requested something geometrically or graphically impossible. Don't retry this request, as it's inherently impossible. Instead, read the error message and change your request.
	ErrorCodeBadRequest ErrorCode = "bad_request"
	// ErrorCodeInvalidJson: Client sent invalid JSON.
	ErrorCodeInvalidJson ErrorCode = "invalid_json"
	// ErrorCodeConnectionProblem: Problem sending data between client and KittyCAD API.
	ErrorCodeConnectionProblem ErrorCode = "connection_problem"
	// ErrorCodeMessageTypeNotAccepted: Client sent a Websocket message type which the KittyCAD API does not handle.
	ErrorCodeMessageTypeNotAccepted ErrorCode = "message_type_not_accepted"
	// ErrorCodeMessageTypeNotAcceptedForWebRTC: Client sent a Websocket message intended for WebRTC but it was configured as a WebRTC connection.
	ErrorCodeMessageTypeNotAcceptedForWebRTC ErrorCode = "message_type_not_accepted_for_web_r_t_c"
)

// ExecutorMetadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type ExecutorMetadata struct {
	// DockerInfo: Information about the docker daemon.
	DockerInfo DockerSystemInfo `json:"docker_info" yaml:"docker_info" schema:"docker_info,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
}

// Export: The response from the `Export` endpoint.
type Export struct {
	// Files: The files that were exported.
	Files []ExportFile `json:"files" yaml:"files" schema:"files,required"`
}

// ExportFile: A file to be exported to the client.
type ExportFile struct {
	// Contents: The contents of the file, base64 encoded.
	Contents Base64 `json:"contents" yaml:"contents" schema:"contents,required"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name,required"`
}

// ExtendedUser: Extended user information.
// This is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: MailChimp, Stripe, and Front
type ExtendedUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// FrontID: The user's Front ID. This is mostly used for internal mapping.
	FrontID string `json:"front_id" yaml:"front_id" schema:"front_id"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// MailchimpID: The user's MailChimp ID. This is mostly used for internal mapping.
	MailchimpID string `json:"mailchimp_id" yaml:"mailchimp_id" schema:"mailchimp_id"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// StripeID: The user's Stripe ID. This is mostly used for internal mapping.
	StripeID string `json:"stripe_id" yaml:"stripe_id" schema:"stripe_id"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ExtendedUserResultsPage: A single page of results
type ExtendedUserResultsPage struct {
	// Items: list of items on this page of results
	Items []ExtendedUser `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// FailureWebSocketResponse: Unsuccessful Websocket response.
type FailureWebSocketResponse struct {
	// Errors: The errors that occurred.
	Errors []APIError `json:"errors" yaml:"errors" schema:"errors,required"`
	// RequestID: Which request this is a response to. If the request was a modeling command, this is the modeling command ID. If no request ID was sent, this will be null.
	RequestID UUID `json:"request_id" yaml:"request_id" schema:"request_id"`
	// Success: Always false
	Success bool `json:"success" yaml:"success" schema:"success,required"`
}

// FbxStorage: Describes the storage format of an FBX file.
type FbxStorage string

const (
	// FbxStorageAscii: ASCII FBX encoding.
	FbxStorageAscii FbxStorage = "ascii"
	// FbxStorageBinary: Binary FBX encoding.
	FbxStorageBinary FbxStorage = "binary"
)

// FileCenterOfMass: A file center of mass result.
type FileCenterOfMass struct {
	// CenterOfMass: The resulting center of mass.
	CenterOfMass Point3D `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the center of mass.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileConversion: A file conversion.
type FileConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Output: The converted file (if single file conversion), if completed, base64 encoded. This field is deprecated, and will be removed in a future release. Use `outputs` instead.
	//
	// Deprecated: Output is deprecated.
	Output Base64 `json:"output" yaml:"output" schema:"output"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// OutputFormatOptions: The output format options of the file conversion.
	OutputFormatOptions any `json:"output_format_options" yaml:"output_format_options" schema:"output_format_options"`
	// Outputs: The converted files (if multiple file conversion), if completed, base64 encoded. The key of the map is the path of the output file.
	Outputs map[string]Base64 `json:"outputs" yaml:"outputs" schema:"outputs"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// SrcFormatOptions: The source format options of the file conversion.
	SrcFormatOptions any `json:"src_format_options" yaml:"src_format_options" schema:"src_format_options"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileDensity: A file density result.
type FileDensity struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// MaterialMassUnit: The material mass unit.
	MaterialMassUnit UnitMas `json:"material_mass_unit" yaml:"material_mass_unit" schema:"material_mass_unit,required"`
	// OutputUnit: The output unit for the density.
	OutputUnit UnitDensity `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileExportFormat: The valid types of output file formats.
type FileExportFormat string

const (
	// FileExportFormatFbx: Autodesk Filmbox (FBX) format. <https://en.wikipedia.org/wiki/FBX>
	FileExportFormatFbx FileExportFormat = "fbx"
	// FileExportFormatGlb: Binary glTF 2.0.
	//
	// This is a single binary with .glb extension.
	//
	// This is better if you want a compressed format as opposed to the human readable glTF that lacks compression.
	FileExportFormatGlb FileExportFormat = "glb"
	// FileExportFormatGltf: glTF 2.0. Embedded glTF 2.0 (pretty printed).
	//
	// Single JSON file with .gltf extension binary data encoded as base64 data URIs.
	//
	// The JSON contents are pretty printed.
	//
	// It is human readable, single file, and you can view the diff easily in a git commit.
	FileExportFormatGltf FileExportFormat = "gltf"
	// FileExportFormatObj: The OBJ file format. <https://en.wikipedia.org/wiki/Wavefront_.obj_file> It may or may not have an an attached material (mtl // mtllib) within the file, but we interact with it as if it does not.
	FileExportFormatObj FileExportFormat = "obj"
	// FileExportFormatPly: The PLY file format. <https://en.wikipedia.org/wiki/PLY_(file_format)>
	FileExportFormatPly FileExportFormat = "ply"
	// FileExportFormatStep: The STEP file format. <https://en.wikipedia.org/wiki/ISO_10303-21>
	FileExportFormatStep FileExportFormat = "step"
	// FileExportFormatStl: The STL file format. <https://en.wikipedia.org/wiki/STL_(file_format)>
	FileExportFormatStl FileExportFormat = "stl"
)

// FileImportFormat: The valid types of source file formats.
type FileImportFormat string

const (
	// FileImportFormatFbx: Autodesk Filmbox (FBX) format. <https://en.wikipedia.org/wiki/FBX>
	FileImportFormatFbx FileImportFormat = "fbx"
	// FileImportFormatGltf: glTF 2.0.
	FileImportFormatGltf FileImportFormat = "gltf"
	// FileImportFormatObj: The OBJ file format. <https://en.wikipedia.org/wiki/Wavefront_.obj_file> It may or may not have an an attached material (mtl // mtllib) within the file, but we interact with it as if it does not.
	FileImportFormatObj FileImportFormat = "obj"
	// FileImportFormatPly: The PLY file format. <https://en.wikipedia.org/wiki/PLY_(file_format)>
	FileImportFormatPly FileImportFormat = "ply"
	// FileImportFormatSldprt: SolidWorks part (SLDPRT) format.
	FileImportFormatSldprt FileImportFormat = "sldprt"
	// FileImportFormatStep: The STEP file format. <https://en.wikipedia.org/wiki/ISO_10303-21>
	FileImportFormatStep FileImportFormat = "step"
	// FileImportFormatStl: The STL file format. <https://en.wikipedia.org/wiki/STL_(file_format)>
	FileImportFormatStl FileImportFormat = "stl"
)

// FileMass: A file mass result.
type FileMass struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// MaterialDensityUnit: The material density unit.
	MaterialDensityUnit UnitDensity `json:"material_density_unit" yaml:"material_density_unit" schema:"material_density_unit,required"`
	// OutputUnit: The output unit for the mass.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileSurfaceArea: A file surface area result.
type FileSurfaceArea struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the surface area.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// SurfaceArea: The resulting surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// FileSystemMetadata: Metadata about our file system.
// This is mostly used for internal purposes and debugging.
type FileSystemMetadata struct {
	// Ok: If the file system passed a sanity check.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// FileVolume: A file volume result.
type FileVolume struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the volume.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// Gateway: Gateway information.
type Gateway struct {
	// AuthTimeout: The auth timeout of the gateway.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Host: The host of the gateway.
	Host string `json:"host" yaml:"host" schema:"host"`
	// Name: The name of the gateway.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Port: The port of the gateway.
	Port int `json:"port" yaml:"port" schema:"port"`
	// TlsTimeout: The TLS timeout for the gateway.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
}

// GetEntityType: The response from the `GetEntityType` command.
type GetEntityType struct {
	// EntityType: The type of the entity.
	EntityType EntityType `json:"entity_type" yaml:"entity_type" schema:"entity_type,required"`
}

// GltfPresentation: Describes the presentation style of the glTF JSON.
type GltfPresentation string

const (
	// GltfPresentationCompact: Condense the JSON into the smallest possible size.
	GltfPresentationCompact GltfPresentation = "compact"
	// GltfPresentationPretty: Expand the JSON into a more human readable format.
	//
	// This is the default setting.
	GltfPresentationPretty GltfPresentation = "pretty"
)

// GltfStorage: Describes the storage format of a glTF 2.0 scene.
type GltfStorage string

const (
	// GltfStorageBinary: Binary glTF 2.0.
	//
	// This is a single binary with .glb extension.
	GltfStorageBinary GltfStorage = "binary"
	// GltfStorageStandard: Standard glTF 2.0.
	//
	// This is a JSON file with .gltf extension paired with a separate binary blob file with .bin extension.
	GltfStorageStandard GltfStorage = "standard"
	// GltfStorageEmbedded: Embedded glTF 2.0.
	//
	// Single JSON file with .gltf extension binary data encoded as base64 data URIs.
	//
	// This is the default setting.
	GltfStorageEmbedded GltfStorage = "embedded"
)

// HighlightSetEntity: The response from the `HighlightSetEntity` command.
type HighlightSetEntity struct {
	// EntityID: The UUID of the entity that was highlighted.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id"`
	// Sequence: If the client sent a sequence ID with its request, the backend sends it back.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
}

// IceServer: Representation of an ICE server used for STUN/TURN Used to initiate WebRTC connections based on <https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer>
type IceServer struct {
	// Credential: Credentials for a given TURN server.
	Credential string `json:"credential" yaml:"credential" schema:"credential"`
	// Urls: URLs for a given STUN/TURN server. IceServer urls can either be a string or an array of strings But, we choose to always convert to an array of strings for consistency
	Urls []string `json:"urls" yaml:"urls" schema:"urls,required"`
	// Username: Username for a given TURN server.
	Username string `json:"username" yaml:"username" schema:"username"`
}

// ImageFormat: Enum containing the variety of image formats snapshots may be exported to.
type ImageFormat string

const (
	// ImageFormatPng: .png format
	ImageFormatPng ImageFormat = "png"
	// ImageFormatJpeg: .jpeg format
	ImageFormatJpeg ImageFormat = "jpeg"
)

// ImageType: An enumeration.
type ImageType string

const (
	// ImageTypePng represents the ImageType `"png"`.
	ImageTypePng ImageType = "png"
	// ImageTypeJpg represents the ImageType `"jpg"`.
	ImageTypeJpg ImageType = "jpg"
)

// IndexInfo: IndexInfo contains information about a registry.
type IndexInfo struct {
	// Mirrors: List of mirrors, expressed as URIs.
	Mirrors []string `json:"mirrors" yaml:"mirrors" schema:"mirrors"`
	// Name: Name of the registry, such as \"docker.io\".
	Name string `json:"name" yaml:"name" schema:"name"`
	// Official: Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
	Official bool `json:"official" yaml:"official" schema:"official"`
	// Secure: Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.
	//
	// **Warning**: Insecure registries can be useful when running a local registry. However, because its use creates security vulnerabilities it should ONLY be enabled for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option.
	Secure bool `json:"secure" yaml:"secure" schema:"secure"`
}

// InputFormatCoords: Wavefront OBJ format.
type InputFormatCoords struct {
	// Coords: Co-ordinate system of input data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: The units of the input data. This is very important for correct scaling and when calculating physics properties like mass, etc.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// InputFormatFbx: Autodesk Filmbox (FBX) format.
type InputFormatFbx struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InputFormatGltf: Binary glTF 2.0. We refer to this as glTF since that is how our customers refer to it, but this can also import binary glTF (glb).
type InputFormatGltf struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InputFormatInputFormatCoords: ISO 10303-21 (STEP) format.
type InputFormatInputFormatCoords struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InputFormatObj: The PLY Polygon File Format.
type InputFormatObj struct {
	// Coords: Co-ordinate system of input data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: The units of the input data. This is very important for correct scaling and when calculating physics properties like mass, etc.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// InputFormatPly: *ST**ereo**L**ithography format.
type InputFormatPly struct {
	// Coords: Co-ordinate system of input data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: The units of the input data. This is very important for correct scaling and when calculating physics properties like mass, etc.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// InputFormatUnits: SolidWorks part (SLDPRT) format.
type InputFormatUnits struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// Invoice: An invoice.
type Invoice struct {
	// AmountDue: Final amount due at this time for this invoice.
	//
	// If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
	AmountDue float64 `json:"amount_due" yaml:"amount_due" schema:"amount_due"`
	// AmountPaid: The amount, in USD, that was paid.
	AmountPaid float64 `json:"amount_paid" yaml:"amount_paid" schema:"amount_paid"`
	// AmountRemaining: The amount remaining, in USD, that is due.
	AmountRemaining float64 `json:"amount_remaining" yaml:"amount_remaining" schema:"amount_remaining"`
	// AttemptCount: Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.
	//
	// Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
	AttemptCount int `json:"attempt_count" yaml:"attempt_count" schema:"attempt_count"`
	// Attempted: Whether an attempt has been made to pay the invoice.
	//
	// An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
	Attempted bool `json:"attempted" yaml:"attempted" schema:"attempted"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency"`
	// CustomerEmail: The email address for the customer. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.
	CustomerEmail string `json:"customer_email" yaml:"customer_email" schema:"customer_email"`
	// CustomerID: Customer ID. The unique identifier for the customer this invoice belongs to. This is the customer ID in the payments service, not our database customer ID.
	CustomerID string `json:"customer_id" yaml:"customer_id" schema:"customer_id"`
	// DefaultPaymentMethod: Default payment method.
	DefaultPaymentMethod string `json:"default_payment_method" yaml:"default_payment_method" schema:"default_payment_method"`
	// Description: Description of the invoice.
	Description string `json:"description" yaml:"description" schema:"description"`
	// Discounts: The discounts applied to the invoice. This is an array of discount objects.
	Discounts []Discount `json:"discounts" yaml:"discounts" schema:"discounts"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Lines: The individual line items that make up the invoice.
	//
	// `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
	Lines []InvoiceLineItem `json:"lines" yaml:"lines" schema:"lines"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Number: A unique, identifying string that appears on emails sent to the customer for this invoice.
	Number string `json:"number" yaml:"number" schema:"number"`
	// Paid: Whether payment was successfully collected for this invoice.
	//
	// An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	Paid bool `json:"paid" yaml:"paid" schema:"paid"`
	// Pdf: The link to download the PDF for the invoice.
	Pdf URL `json:"pdf" yaml:"pdf" schema:"pdf"`
	// ReceiptNumber: This is the transaction number that appears on email receipts sent for this invoice.
	ReceiptNumber string `json:"receipt_number" yaml:"receipt_number" schema:"receipt_number"`
	// StatementDescriptor: Extra information about an invoice for the customer's credit card statement.
	StatementDescriptor string `json:"statement_descriptor" yaml:"statement_descriptor" schema:"statement_descriptor"`
	// Status: The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
	//
	// [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview).
	Status InvoiceStatus `json:"status" yaml:"status" schema:"status"`
	// Subtotal: Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied.
	//
	// Item discounts are already incorporated.
	Subtotal float64 `json:"subtotal" yaml:"subtotal" schema:"subtotal"`
	// Tax: The amount of tax on this invoice.
	//
	// This is the sum of all the tax amounts on this invoice.
	Tax float64 `json:"tax" yaml:"tax" schema:"tax"`
	// Total: Total after discounts and taxes.
	Total float64 `json:"total" yaml:"total" schema:"total"`
	// Url: The URL for the hosted invoice page, which allows customers to view and pay an invoice.
	Url URL `json:"url" yaml:"url" schema:"url"`
}

// InvoiceLineItem: An invoice line item.
type InvoiceLineItem struct {
	// Amount: The amount, in USD.
	Amount float64 `json:"amount" yaml:"amount" schema:"amount"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency Currency `json:"currency" yaml:"currency" schema:"currency"`
	// Description: The description.
	Description string `json:"description" yaml:"description" schema:"description"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// InvoiceItem: The ID of the invoice item associated with this line item if any.
	InvoiceItem string `json:"invoice_item" yaml:"invoice_item" schema:"invoice_item"`
	// Metadata: Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
	//
	// Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
}

// InvoiceStatus: An enum representing the possible values of an `Invoice`'s `status` field.
type InvoiceStatus string

const (
	// InvoiceStatusDeleted: Deleted.
	InvoiceStatusDeleted InvoiceStatus = "deleted"
	// InvoiceStatusDraft: Draft.
	InvoiceStatusDraft InvoiceStatus = "draft"
	// InvoiceStatusOpen: Open.
	InvoiceStatusOpen InvoiceStatus = "open"
	// InvoiceStatusPaid: Paid.
	InvoiceStatusPaid InvoiceStatus = "paid"
	// InvoiceStatusUncollectible: Uncollectible.
	InvoiceStatusUncollectible InvoiceStatus = "uncollectible"
	// InvoiceStatusVoid: Void.
	InvoiceStatusVoid InvoiceStatus = "void"
)

// Jetstream: Jetstream information.
type Jetstream struct {
	// Config: The Jetstream config.
	Config JetstreamConfig `json:"config" yaml:"config" schema:"config"`
	// Meta: Meta information about the cluster.
	Meta MetaClusterInfo `json:"meta" yaml:"meta" schema:"meta"`
	// Stats: Jetstream statistics.
	Stats JetstreamStats `json:"stats" yaml:"stats" schema:"stats"`
}

// JetstreamAPIStats: Jetstream API statistics.
type JetstreamAPIStats struct {
	// Errors: The number of errors.
	Errors int `json:"errors" yaml:"errors" schema:"errors"`
	// Inflight: The number of inflight requests.
	Inflight int `json:"inflight" yaml:"inflight" schema:"inflight"`
	// Total: The number of requests.
	Total int `json:"total" yaml:"total" schema:"total"`
}

// JetstreamConfig: Jetstream configuration.
type JetstreamConfig struct {
	// Domain: The domain.
	Domain string `json:"domain" yaml:"domain" schema:"domain"`
	// MaxMemory: The max memory.
	MaxMemory int `json:"max_memory" yaml:"max_memory" schema:"max_memory"`
	// MaxStorage: The max storage.
	MaxStorage int `json:"max_storage" yaml:"max_storage" schema:"max_storage"`
	// StoreDir: The store directory.
	StoreDir string `json:"store_dir" yaml:"store_dir" schema:"store_dir"`
}

// JetstreamStats: Jetstream statistics.
type JetstreamStats struct {
	// Accounts: The number of accounts.
	Accounts int `json:"accounts" yaml:"accounts" schema:"accounts"`
	// API: API stats.
	API JetstreamAPIStats `json:"api" yaml:"api" schema:"api"`
	// HaAssets: The number of HA assets.
	HaAssets int `json:"ha_assets" yaml:"ha_assets" schema:"ha_assets"`
	// Memory: The memory used by the Jetstream server.
	Memory int `json:"memory" yaml:"memory" schema:"memory"`
	// ReservedMemory: The reserved memory for the Jetstream server.
	ReservedMemory int `json:"reserved_memory" yaml:"reserved_memory" schema:"reserved_memory"`
	// ReservedStore: The reserved storage for the Jetstream server.
	ReservedStore int `json:"reserved_store" yaml:"reserved_store" schema:"reserved_store"`
	// Store: The storage used by the Jetstream server.
	Store int `json:"store" yaml:"store" schema:"store"`
}

// LeafNode: Leaf node information.
type LeafNode struct {
	// AuthTimeout: The auth timeout of the leaf node.
	AuthTimeout int `json:"auth_timeout" yaml:"auth_timeout" schema:"auth_timeout"`
	// Host: The host of the leaf node.
	Host string `json:"host" yaml:"host" schema:"host"`
	// Port: The port of the leaf node.
	Port int `json:"port" yaml:"port" schema:"port"`
	// TlsTimeout: The TLS timeout for the leaf node.
	TlsTimeout int `json:"tls_timeout" yaml:"tls_timeout" schema:"tls_timeout"`
}

// Mesh is the type definition for a Mesh.
type Mesh struct {
	// Mesh:
	Mesh string `json:"mesh" yaml:"mesh" schema:"mesh,required"`
}

// MetaClusterInfo: Jetstream statistics.
type MetaClusterInfo struct {
	// ClusterSize: The size of the cluster.
	ClusterSize int `json:"cluster_size" yaml:"cluster_size" schema:"cluster_size"`
	// Leader: The leader of the cluster.
	Leader string `json:"leader" yaml:"leader" schema:"leader"`
	// Name: The name of the cluster.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// Metadata: Metadata about our currently running server.
// This is mostly used for internal purposes and debugging.
type Metadata struct {
	// Cache: Metadata about our cache.
	Cache CacheMetadata `json:"cache" yaml:"cache" schema:"cache,required"`
	// Engine: Metadata about our engine API connection.
	Engine EngineMetadata `json:"engine" yaml:"engine" schema:"engine,required"`
	// Environment: The environment we are running in.
	Environment Environment `json:"environment" yaml:"environment" schema:"environment,required"`
	// Executor: Metadata about our executor API connection.
	Executor ExecutorMetadata `json:"executor" yaml:"executor" schema:"executor,required"`
	// Fs: Metadata about our file system.
	Fs FileSystemMetadata `json:"fs" yaml:"fs" schema:"fs,required"`
	// GitHash: The git hash of the server.
	GitHash string `json:"git_hash" yaml:"git_hash" schema:"git_hash,required"`
	// PointE: Metadata about our point-e instance.
	PointE PointEmetadata `json:"point_e" yaml:"point_e" schema:"point_e,required"`
	// Pubsub: Metadata about our pub-sub connection.
	Pubsub Connection `json:"pubsub" yaml:"pubsub" schema:"pubsub,required"`
}

// Method: The Request Method (VERB)
// This type also contains constants for a number of common HTTP methods such as GET, POST, etc.
//
// Currently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions.
type Method string

const (
	// MethodOptions: The `OPTIONS` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.2.1).
	MethodOptions Method = "OPTIONS"
	// MethodGet: The `GET` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodGet Method = "GET"
	// MethodPost: The `POST` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodPost Method = "POST"
	// MethodPut: The `PUT` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodPut Method = "PUT"
	// MethodDelete: The `DELETE` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.5).
	MethodDelete Method = "DELETE"
	// MethodHead: The `HEAD` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.2).
	MethodHead Method = "HEAD"
	// MethodTrace: The `TRACE` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3).
	MethodTrace Method = "TRACE"
	// MethodConnect: The `CONNECT` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.6).
	MethodConnect Method = "CONNECT"
	// MethodPatch: The `PATCH` method as defined in [RFC 5789](https://tools.ietf.org/html/rfc5789).
	MethodPatch Method = "PATCH"
	// MethodExtension: A catch all.
	MethodExtension Method = "EXTENSION"
)

// ModelingCmdAnimated: Hide or show an object
type ModelingCmdAnimated struct {
	// Hidden: Whether or not the object should be hidden.
	Hidden bool `json:"hidden" yaml:"hidden" schema:"hidden,required"`
	// ObjectID: Which object to change
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCameraDragEnd: Adds one or more entities (by UUID) to the selection.
type ModelingCmdCameraDragEnd struct {
	// Entities: Which entities to select
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCameraDragMove: Exit edit mode
type ModelingCmdCameraDragMove struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCameraDragStart: How many children does the entity have?
type ModelingCmdCameraDragStart struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCap: Camera drag ended.
type ModelingCmdCap struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The final mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdCenter: Replaces the current selection with these new entities (by UUID). Equivalent to doing SelectClear then SelectAdd.
type ModelingCmdCenter struct {
	// Entities: Which entities to select
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdChildIndex: Enable sketch mode on the given plane.
type ModelingCmdChildIndex struct {
	// Animated: Animate the transition to sketch mode.
	Animated bool `json:"animated" yaml:"animated" schema:"animated,required"`
	// Ortho: Use an orthographic camera.
	Ortho bool `json:"ortho" yaml:"ortho" schema:"ortho,required"`
	// PlaneID: Sketch on this plane.
	PlaneID UUID `json:"plane_id" yaml:"plane_id" schema:"plane_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdClosePath: Export the scene to a file.
type ModelingCmdClosePath struct {
	// EntityIds: IDs of the entities to be exported. If this is empty, then all entities are exported.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// Format: The file format to export to.
	Format any `json:"format" yaml:"format" schema:"format,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraDisableSketchMode: Sends object to front or back.
type ModelingCmdDefaultCameraDisableSketchMode struct {
	// Front: Bring to front = true, send to back = false.
	Front bool `json:"front" yaml:"front" schema:"front,required"`
	// ObjectID: Which object is being changed.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraEnableSketchMode: Gets the edge opposite the given edge, along the given face.
type ModelingCmdDefaultCameraEnableSketchMode struct {
	// EdgeID: Which edge you want the opposite of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// FaceID: Which face is used to figure out the opposite edge?
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraLookAt: Find all IDs of selected entities
type ModelingCmdDefaultCameraLookAt struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraZoom: Update an annotation
type ModelingCmdDefaultCameraZoom struct {
	// AnnotationID: Which annotation to update
	AnnotationID UUID `json:"annotation_id" yaml:"annotation_id" schema:"annotation_id,required"`
	// Options: If any of these fields are set, they will overwrite the previous options for the annotation.
	Options AnnotationOptions `json:"options" yaml:"options" schema:"options,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDistance: Change what the default camera is looking at.
type ModelingCmdDistance struct {
	// Center: What the camera is looking at. Center of the camera's field of vision
	Center Point3D `json:"center" yaml:"center" schema:"center,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Up: Which way is "up", from the camera's point of view.
	Up Point3D `json:"up" yaml:"up" schema:"up,required"`
	// Vantage: Where the camera is positioned
	Vantage Point3D `json:"vantage" yaml:"vantage" schema:"vantage,required"`
}

// ModelingCmdDistanceToPlane: What type of entity is this?
type ModelingCmdDistanceToPlane struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEditModeEnter: Query the given path
type ModelingCmdEditModeEnter struct {
	// PathID: Which path to query
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEditModeExit: Start dragging mouse.
type ModelingCmdEditModeExit struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdEntityGetAllChildUuids: Take a snapshot.
type ModelingCmdEntityGetAllChildUuids struct {
	// Format: What image format to return.
	Format ImageFormat `json:"format" yaml:"format" schema:"format,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetChildUuid: Get type of a given curve.
type ModelingCmdEntityGetChildUuid struct {
	// CurveID: Which curve to query.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetNumChildren: Send a mouse click event. Updates modified/selected entities.
type ModelingCmdEntityGetNumChildren struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: Where the mouse is
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdEntityGetParentID: Set the active tool.
type ModelingCmdEntityGetParentID struct {
	// Tool: What tool should be active.
	Tool SceneToolType `json:"tool" yaml:"tool" schema:"tool,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityID: Set the plane's color.
type ModelingCmdEntityID struct {
	// Color: What color it should be.
	Color Color `json:"color" yaml:"color" schema:"color,required"`
	// PlaneID: Which plane is being changed.
	PlaneID UUID `json:"plane_id" yaml:"plane_id" schema:"plane_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityIds: Set opacity of the entity.
type ModelingCmdEntityIds struct {
	// EntityID: Which entity is being changed.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Opacity: How transparent should it be? 0 or lower is totally transparent. 1 or greater is totally opaque.
	Opacity float64 `json:"opacity" yaml:"opacity" schema:"opacity,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdExport: Make a plane.
type ModelingCmdExport struct {
	// Clobber: If true, any existing drawables within the obj will be replaced (the object will be reset)
	Clobber bool `json:"clobber" yaml:"clobber" schema:"clobber,required"`
	// Origin: Origin of the plane
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin,required"`
	// Size: What should the plane's span/extent? When rendered visually, this is both the width and height along X and Y axis respectively.
	Size float64 `json:"size" yaml:"size" schema:"size,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// XAxis: What should the plane's X axis be?
	XAxis Point3D `json:"x_axis" yaml:"x_axis" schema:"x_axis,required"`
	// YAxis: What should the plane's Y axis be?
	YAxis Point3D `json:"y_axis" yaml:"y_axis" schema:"y_axis,required"`
}

// ModelingCmdExtendPath: Camera drag continued.
type ModelingCmdExtendPath struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The current mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdExtrude: Enable sketch mode, where users can sketch 2D geometry. Users choose a plane to sketch on.
type ModelingCmdExtrude struct {
	// Animated: Should we animate or snap for the camera transition?
	Animated bool `json:"animated" yaml:"animated" schema:"animated,required"`
	// DistanceToPlane: How far to the sketching plane?
	DistanceToPlane float64 `json:"distance_to_plane" yaml:"distance_to_plane" schema:"distance_to_plane,required"`
	// Origin: What's the origin of the sketching plane?
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin,required"`
	// Ortho: Should the camera use orthographic projection? In other words, should an object's size in the rendered image stay constant regardless of its distance from the camera.
	Ortho bool `json:"ortho" yaml:"ortho" schema:"ortho,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// XAxis: Which 3D axis of the scene should be the X axis of the sketching plane?
	XAxis Point3D `json:"x_axis" yaml:"x_axis" schema:"x_axis,required"`
	// YAxis: Which 3D axis of the scene should be the Y axis of the sketching plane?
	YAxis Point3D `json:"y_axis" yaml:"y_axis" schema:"y_axis,required"`
}

// ModelingCmdFormat: Fade the entity in or out.
type ModelingCmdFormat struct {
	// DurationSeconds: How many seconds the animation should take.
	DurationSeconds float64 `json:"duration_seconds" yaml:"duration_seconds" schema:"duration_seconds"`
	// EntityID: Which entity is being changed.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// FadeIn: Fade in = true, fade out = false.
	FadeIn bool `json:"fade_in" yaml:"fade_in" schema:"fade_in,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdInteraction: What is this entity's parent?
type ModelingCmdInteraction struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdMagnitude: Create a new annotation
type ModelingCmdMagnitude struct {
	// AnnotationType: What type of annotation to create.
	AnnotationType AnnotationType `json:"annotation_type" yaml:"annotation_type" schema:"annotation_type,required"`
	// Clobber: If true, any existing drawables within the obj will be replaced (the object will be reset)
	Clobber bool `json:"clobber" yaml:"clobber" schema:"clobber,required"`
	// Options: What should the annotation contain?
	Options AnnotationOptions `json:"options" yaml:"options" schema:"options,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdEntityID: Get control points of a given curve.
type ModelingCmdModelingCmdEntityID struct {
	// CurveID: Which curve to query.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdInteraction: Clear the selection
type ModelingCmdModelingCmdInteraction struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdPath: Closes a path, converting it to a 2D solid.
type ModelingCmdModelingCmdPath struct {
	// PathID: Which path to close.
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdTarget: Add a gizmo showing the axes.
type ModelingCmdModelingCmdTarget struct {
	// Clobber: If true, any existing drawables within the obj will be replaced (the object will be reset)
	Clobber bool `json:"clobber" yaml:"clobber" schema:"clobber,required"`
	// GizmoMode: If true, axes gizmo will be placed in the corner of the screen. If false, it will be placed at the origin of the scene.
	GizmoMode bool `json:"gizmo_mode" yaml:"gizmo_mode" schema:"gizmo_mode,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdWindow: Removes one or more entities (by UUID) from the selection.
type ModelingCmdModelingCmdWindow struct {
	// Entities: Which entities to unselect
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdMovePathPen: Extrude a 2D solid.
type ModelingCmdMovePathPen struct {
	// Cap: Whether to cap the extrusion with a face, or not. If true, the resulting solid will be closed on all sides, like a dice. If false, it will be open on one side, like a drinking glass.
	Cap bool `json:"cap" yaml:"cap" schema:"cap,required"`
	// Distance: How far off the plane to extrude
	Distance float64 `json:"distance" yaml:"distance" schema:"distance,required"`
	// Target: Which sketch to extrude. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdOrigin: Gets all faces which use the given edge.
type ModelingCmdOrigin struct {
	// EdgeID: Which edge you want the faces of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdOrtho: Gets all edges which are opposite the given edge, across all possible faces.
type ModelingCmdOrtho struct {
	// AlongVector: If given, ohnly faces parallel to this vector will be considered.
	AlongVector Point3D `json:"along_vector" yaml:"along_vector" schema:"along_vector"`
	// EdgeID: Which edge you want the opposites of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdPath: Move the path's "pen".
type ModelingCmdPath struct {
	// Path: The ID of the command which created the path.
	Path UUID `json:"path" yaml:"path" schema:"path,required"`
	// To: Where the path's pen should be.
	To Point3D `json:"to" yaml:"to" schema:"to,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdPathID: Disable sketch mode, from the default camera.
type ModelingCmdPathID struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdReq: A graphics command submitted to the KittyCAD engine via the Modeling API.
type ModelingCmdReq struct {
	// Cmd: Which command to submit to the Kittycad engine.
	Cmd any `json:"cmd" yaml:"cmd" schema:"cmd,required"`
	// CmdID: ID of command being submitted.
	CmdID UUID `json:"cmd_id" yaml:"cmd_id" schema:"cmd_id,required"`
}

// ModelingCmdReqBatch: A batch set of graphics commands submitted to the KittyCAD engine via the Modeling API.
type ModelingCmdReqBatch struct {
	// Cmds:
	Cmds map[string]ModelingCmdReq `json:"cmds" yaml:"cmds" schema:"cmds,required"`
}

// ModelingCmdSegment: Camera drag started.
type ModelingCmdSegment struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The initial mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdSelectedAtWindow: Continue dragging mouse.
type ModelingCmdSelectedAtWindow struct {
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdSelectionType: Stop dragging mouse.
type ModelingCmdSelectionType struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdSequence: Enter edit mode
type ModelingCmdSequence struct {
	// Target: The edit target
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdStartPath: Start a path.
type ModelingCmdStartPath struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTarget: Adjust zoom of the default camera.
type ModelingCmdTarget struct {
	// Magnitude: Move the camera forward along the vector it's looking at, by this magnitudedefaultCameraZoom. Basically, how much should the camera move forward by.
	Magnitude float64 `json:"magnitude" yaml:"magnitude" schema:"magnitude,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTo: Extend a path by adding a new segment which starts at the path's "pen". If no "pen" location has been set before (via `MovePen`), then the pen is at the origin.
type ModelingCmdTo struct {
	// Path: The ID of the command which created the path.
	Path UUID `json:"path" yaml:"path" schema:"path,required"`
	// Segment: Segment to append to the path. This segment will implicitly begin at the current "pen" location.
	Segment any `json:"segment" yaml:"segment" schema:"segment,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdUp: Changes the current highlighted entity to whichever one is at the given window coordinate. If there's no entity at this location, clears the highlight.
type ModelingCmdUp struct {
	// SelectedAtWindow: Coordinates of the window being clicked
	SelectedAtWindow Point2D `json:"selected_at_window" yaml:"selected_at_window" schema:"selected_at_window,required"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdVantage: Changes the current highlighted entity to these entities.
type ModelingCmdVantage struct {
	// Entities: Highlight these entities.
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdWindow: What is the UUID of this entity's n-th child?
type ModelingCmdWindow struct {
	// ChildIndex: Index into the entity's list of children.
	ChildIndex int `json:"child_index" yaml:"child_index" schema:"child_index,required"`
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdXaxis: Gets the next adjacent edge for the given edge, along the given face.
type ModelingCmdXaxis struct {
	// EdgeID: Which edge you want the opposite of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// FaceID: Which face is used to figure out the opposite edge?
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdYaxis: Gets the previous adjacent edge for the given edge, along the given face.
type ModelingCmdYaxis struct {
	// EdgeID: Which edge you want the opposite of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// FaceID: Which face is used to figure out the opposite edge?
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingError: Why a command submitted to the Modeling API failed.
type ModelingError struct {
	// ErrorCode: A string error code which refers to a family of errors. E.g. "InvalidInput".
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code,required"`
	// ExternalMessage: Describe the specific error which occurred. Will be shown to users, not logged.
	ExternalMessage string `json:"external_message" yaml:"external_message" schema:"external_message,required"`
	// InternalMessage: Describe the specific error which occurred. Will be logged, not shown to users.
	InternalMessage string `json:"internal_message" yaml:"internal_message" schema:"internal_message,required"`
	// StatusCode: A HTTP status code.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code,required"`
}

// ModelingOutcomeCancelled: Cancelled because it required the output of a previous command, which failed.
type ModelingOutcomeCancelled struct {
	// Cancelled:
	Cancelled Cancelled `json:"cancelled" yaml:"cancelled" schema:"cancelled,required"`
}

// ModelingOutcomeError: It failed. Why? See 'struct Error' above.
type ModelingOutcomeError struct {
	// Error: Why a command submitted to the Modeling API failed.
	Error ModelingError `json:"error" yaml:"error" schema:"error,required"`
}

// ModelingOutcomeErrorError: Why a command submitted to the Modeling API failed.
type ModelingOutcomeErrorError struct {
	// ErrorCode: A string error code which refers to a family of errors. E.g. "InvalidInput".
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code,required"`
	// ExternalMessage: Describe the specific error which occurred. Will be shown to users, not logged.
	ExternalMessage string `json:"external_message" yaml:"external_message" schema:"external_message,required"`
	// InternalMessage: Describe the specific error which occurred. Will be logged, not shown to users.
	InternalMessage string `json:"internal_message" yaml:"internal_message" schema:"internal_message,required"`
	// StatusCode: A HTTP status code.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code,required"`
}

// ModelingOutcomeSuccess: Each successful command has some result.
type ModelingOutcomeSuccess struct {
	// Success: A successful response from a modeling command. This can be one of several types of responses, depending on the command.
	Success any `json:"success" yaml:"success" schema:"success,required"`
}

// ModelingOutcomes: The result from a batch of modeling commands.
type ModelingOutcomes struct {
	// Outcomes:
	Outcomes map[string]any `json:"outcomes" yaml:"outcomes" schema:"outcomes,required"`
}

// MouseClick: The response from the `MouseClick` command.
type MouseClick struct {
	// EntitiesModified: Entities that are modified.
	EntitiesModified []UUID `json:"entities_modified" yaml:"entities_modified" schema:"entities_modified,required"`
	// EntitiesSelected: Entities that are selected.
	EntitiesSelected []UUID `json:"entities_selected" yaml:"entities_selected" schema:"entities_selected,required"`
}

// NewAddress: The struct that is used to create a new record. This is automatically generated and has all the same fields as the main struct only it is missing the `id`.
type NewAddress struct {
	// City: The city component.
	City string `json:"city" yaml:"city" schema:"city"`
	// Country: The country component. This is a two-letter ISO country code.
	Country CountryCode `json:"country" yaml:"country" schema:"country,required"`
	// State: The state component.
	State string `json:"state" yaml:"state" schema:"state"`
	// Street1: The first street component.
	Street1 string `json:"street1" yaml:"street1" schema:"street1"`
	// Street2: The second street component.
	Street2 string `json:"street2" yaml:"street2" schema:"street2"`
	// UserID: The user ID that this address belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
	// Zip: The zip component.
	Zip string `json:"zip" yaml:"zip" schema:"zip"`
}

// Oauth2ClientInfo: Information about an OAuth 2.0 client.
type Oauth2ClientInfo struct {
	// CsrfToken: Value used for [CSRF](https://tools.ietf.org/html/rfc6749#section-10.12) protection via the `state` parameter.
	CsrfToken string `json:"csrf_token" yaml:"csrf_token" schema:"csrf_token"`
	// PkceCodeVerifier: Code Verifier used for [PKCE]((https://tools.ietf.org/html/rfc7636)) protection via the `code_verifier` parameter. The value must have a minimum length of 43 characters and a maximum length of 128 characters.  Each character must be ASCII alphanumeric or one of the characters "-" / "." / "_" / "~".
	PkceCodeVerifier string `json:"pkce_code_verifier" yaml:"pkce_code_verifier" schema:"pkce_code_verifier"`
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// Oauth2GrantType: An OAuth 2.0 Grant Type. These are documented here: <https://oauth.net/2/grant-types/>.
type Oauth2GrantType string

const (
	// Oauth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode: An OAuth 2.0 Device Authorization Grant.
	Oauth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode Oauth2GrantType = "urn:ietf:params:oauth:grant-type:device_code"
)

// OkModelingCmdResponseData: The response from the `Export` command. When this is being performed over a websocket, this is sent as binary not JSON. The binary data can be deserialized as `bincode` into a `Vec<ExportFile>`.
type OkModelingCmdResponseData struct {
	// Data: The response from the `Export` endpoint.
	Data Export `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEmpty: An empty response, used for any command that does not explicitly have a response defined here.
type OkModelingCmdResponseEmpty struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetAllChildUuids: The response from the `Solid3dGetNextAdjacentEdge` command.
type OkModelingCmdResponseEntityGetAllChildUuids struct {
	// Data: The response from the `Solid3dGetNextAdjacentEdge` command.
	Data Solid3DGetNextAdjacentEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetChildUuid: The response from the `SelectGet` command.
type OkModelingCmdResponseEntityGetChildUuid struct {
	// Data: The response from the `SelectGet` command.
	Data SelectGet `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetNumChildren: The response from the `Solid3dGetAllEdgeFaces` command.
type OkModelingCmdResponseEntityGetNumChildren struct {
	// Data: The response from the `Solid3dGetAllEdgeFaces` command.
	Data Solid3DGetAllEdgeFaces `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetParentID: The response from the `Solid3dGetOppositeEdge` command.
type OkModelingCmdResponseEntityGetParentID struct {
	// Data: The response from the `Solid3dGetOppositeEdge` command.
	Data Solid3DGetOppositeEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseExport: The response from the `SelectWithPoint` command.
type OkModelingCmdResponseExport struct {
	// Data: The response from the `SelectWithPoint` command.
	Data SelectWithPoint `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseGetEntityType: The response from the `Take Snapshot` command.
type OkModelingCmdResponseGetEntityType struct {
	// Data: The response from the `TakeSnapshot` command.
	Data TakeSnapshot `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseHighlightSetEntity: The response from the `EntityGetParentId` command.
type OkModelingCmdResponseHighlightSetEntity struct {
	// Data: The response from the `EntityGetParentId` command.
	Data EntityGetParentID `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseOkModelingCmdResponseData: The response from the `Path Get Info` command.
type OkModelingCmdResponseOkModelingCmdResponseData struct {
	// Data: The response from the `PathGetInfo` command.
	Data PathGetInfo `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectGet: The response from the `CurveGetType` command.
type OkModelingCmdResponseSelectGet struct {
	// Data: The response from the `CurveGetType` command.
	Data CurveGetType `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectWithPoint: The response from the `EntityGetChildUuid` command.
type OkModelingCmdResponseSelectWithPoint struct {
	// Data: The response from the `EntityGetChildUuid` command.
	Data EntityGetChildUuid `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataData: Information about the ICE servers.
type OkWebSocketResponseDataData struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataIceServerInfo: The trickle ICE candidate response.
type OkWebSocketResponseDataIceServerInfo struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataOkWebSocketResponseDataData: The exported files.
type OkWebSocketResponseDataOkWebSocketResponseDataData struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataTrickleIce: The modeling command response.
type OkWebSocketResponseDataTrickleIce struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// Onboarding: Onboarding details
type Onboarding struct {
	// FirstCallFromTheirMachineDate: When the user first called an endpoint from their machine (i.e. not a litterbox execution)
	FirstCallFromTheirMachineDate string `json:"first_call_from_their_machine_date" yaml:"first_call_from_their_machine_date" schema:"first_call_from_their_machine_date"`
	// FirstLitterboxExecuteDate: When the user first used the litterbox
	FirstLitterboxExecuteDate string `json:"first_litterbox_execute_date" yaml:"first_litterbox_execute_date" schema:"first_litterbox_execute_date"`
	// FirstTokenDate: When the user created their first token
	FirstTokenDate string `json:"first_token_date" yaml:"first_token_date" schema:"first_token_date"`
}

// OutputFile: Output file contents.
type OutputFile struct {
	// Contents: The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON.
	Contents string `json:"contents" yaml:"contents" schema:"contents"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// OutputFormatCoords: *ST**ereo**L**ithography format.
type OutputFormatCoords struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Storage: Export storage.
	Storage StlStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormatFbx: glTF 2.0. We refer to this as glTF since that is how our customers refer to it, although by default it will be in binary format and thus technically (glb). If you prefer ascii output, you can set that option for the export.
type OutputFormatFbx struct {
	// Presentation: Specifies how the JSON will be presented.
	Presentation GltfPresentation `json:"presentation" yaml:"presentation" schema:"presentation,required"`
	// Storage: Specifies which kind of glTF 2.0 will be exported.
	Storage GltfStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormatGltf: ISO 10303-21 (STEP) format.
type OutputFormatGltf struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormatOutputFormatStorage: The PLY Polygon File Format.
type OutputFormatOutputFormatStorage struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Storage: The storage for the output PLY file.
	Storage PlyStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormatPresentation: Wavefront OBJ format.
type OutputFormatPresentation struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormatStorage: Autodesk Filmbox (FBX) format.
type OutputFormatStorage struct {
	// Storage: Specifies which kind of FBX will be exported.
	Storage FbxStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathCommand: The path component command type (within a Path)
type PathCommand string

const (
	// PathCommandMoveTo represents the PathCommand `"move_to"`.
	PathCommandMoveTo PathCommand = "move_to"
	// PathCommandLineTo represents the PathCommand `"line_to"`.
	PathCommandLineTo PathCommand = "line_to"
	// PathCommandBezCurveTo represents the PathCommand `"bez_curve_to"`.
	PathCommandBezCurveTo PathCommand = "bez_curve_to"
	// PathCommandNurbsCurveTo represents the PathCommand `"nurbs_curve_to"`.
	PathCommandNurbsCurveTo PathCommand = "nurbs_curve_to"
	// PathCommandAddArc represents the PathCommand `"add_arc"`.
	PathCommandAddArc PathCommand = "add_arc"
)

// PathGetInfo: The response from the `PathGetInfo` command.
type PathGetInfo struct {
	// Segments: All segments in the path, in the order they were added.
	Segments []PathSegmentInfo `json:"segments" yaml:"segments" schema:"segments,required"`
}

// PathSegmentAngleEnd: A cubic bezier curve segment. Start at the end of the current line, go through control point 1 and 2, then end at a given point.
type PathSegmentAngleEnd struct {
	// Control1: First control point.
	Control1 Point3D `json:"control1" yaml:"control1" schema:"control1,required"`
	// Control2: Second control point.
	Control2 Point3D `json:"control2" yaml:"control2" schema:"control2,required"`
	// End: Final control point.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentEnd: A straight line segment. Goes from the current path "pen" to the given endpoint.
type PathSegmentEnd struct {
	// End: End point of the line.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentInfo: Info about a path segment
type PathSegmentInfo struct {
	// Command: What is the path segment?
	Command PathCommand `json:"command" yaml:"command" schema:"command,required"`
	// CommandID: Which command created this path? This field is absent if the path command is not actually creating a path segment, e.g. moving the pen doesn't create a path segment.
	CommandID UUID `json:"command_id" yaml:"command_id" schema:"command_id"`
}

// PathSegmentLine: A circular arc segment.
type PathSegmentLine struct {
	// AngleEnd: Start of the arc along circle's perimeter.
	AngleEnd float64 `json:"angle_end" yaml:"angle_end" schema:"angle_end,required"`
	// AngleStart: Start of the arc along circle's perimeter.
	AngleStart float64 `json:"angle_start" yaml:"angle_start" schema:"angle_start,required"`
	// Center: Center of the circle
	Center Point2D `json:"center" yaml:"center" schema:"center,required"`
	// Radius: Radius of the circle
	Radius float64 `json:"radius" yaml:"radius" schema:"radius,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PaymentIntent: A payment intent response.
type PaymentIntent struct {
	// ClientSecret: The client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
	ClientSecret string `json:"client_secret" yaml:"client_secret" schema:"client_secret,required"`
}

// PaymentMethod: A payment method.
type PaymentMethod struct {
	// BillingInfo: The billing info for the payment method.
	BillingInfo BillingInfo `json:"billing_info" yaml:"billing_info" schema:"billing_info,required"`
	// Card: The card, if it is one. For our purposes, this is the only type of payment method that we support.
	Card CardDetails `json:"card" yaml:"card" schema:"card"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Type: The type of payment method.
	Type PaymentMethodType `json:"type" yaml:"type" schema:"type,required"`
}

// PaymentMethodCardChecks: Card checks.
type PaymentMethodCardChecks struct {
	// AddressLine1Check: If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressLine1Check string `json:"address_line1_check" yaml:"address_line1_check" schema:"address_line1_check"`
	// AddressPostalCodeCheck: If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressPostalCodeCheck string `json:"address_postal_code_check" yaml:"address_postal_code_check" schema:"address_postal_code_check"`
	// CvcCheck: If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	CvcCheck string `json:"cvc_check" yaml:"cvc_check" schema:"cvc_check"`
}

// PaymentMethodType: An enum representing the possible values of an `PaymentMethod`'s `type` field.
type PaymentMethodType string

const (
	// PaymentMethodTypeCard: A card payment method.
	PaymentMethodTypeCard PaymentMethodType = "card"
)

// PluginsInfo: Available plugins per type.
// **Note**: Only unmanaged (V1) plugins are included in this list. V1 plugins are \"lazily\" loaded, and are not returned in this list if there is no resource using the plugin.
type PluginsInfo struct {
	// Authorization: Names of available authorization plugins.
	Authorization []string `json:"authorization" yaml:"authorization" schema:"authorization"`
	// Log: Names of available logging-drivers, and logging-driver plugins.
	Log []string `json:"log" yaml:"log" schema:"log"`
	// Network: Names of available network-drivers, and network-driver plugins.
	Network []string `json:"network" yaml:"network" schema:"network"`
	// Volume: Names of available volume-drivers, and network-driver plugins.
	Volume []string `json:"volume" yaml:"volume" schema:"volume"`
}

// PlyStorage: The storage for the output PLY file.
type PlyStorage string

const (
	// PlyStorageAscii: Write numbers in their ascii representation (e.g. -13, 6.28, etc.). Properties are separated by spaces and elements are separated by line breaks.
	PlyStorageAscii PlyStorage = "ascii"
	// PlyStorageBinaryLittleEndian: Encode payload as binary using little endian.
	PlyStorageBinaryLittleEndian PlyStorage = "binary_little_endian"
	// PlyStorageBinaryBigEndian: Encode payload as binary using big endian.
	PlyStorageBinaryBigEndian PlyStorage = "binary_big_endian"
)

// Point2D: A point in 2D space
type Point2D struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
}

// Point3D: A point in 3D space
type Point3D struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
	// Z:
	Z float64 `json:"z" yaml:"z" schema:"z,required"`
}

// PointEmetadata: Metadata about our point-e instance.
// This is mostly used for internal purposes and debugging.
type PointEmetadata struct {
	// Ok: If the point-e service returned an ok response from ping.
	Ok bool `json:"ok" yaml:"ok" schema:"ok,required"`
}

// Pong: The response from the `/ping` endpoint.
type Pong struct {
	// Message: The pong response.
	Message string `json:"message" yaml:"message" schema:"message,required"`
}

// RawFile: A raw file with unencoded contents to be passed over binary websockets.
type RawFile struct {
	// Contents: The contents of the file.
	Contents []int `json:"contents" yaml:"contents" schema:"contents,required"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name,required"`
}

// RegistryServiceConfig: RegistryServiceConfig stores daemon registry services configuration.
type RegistryServiceConfig struct {
	// AllowNondistributableArtifactsCidRs: List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.
	//
	// **Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts.
	AllowNondistributableArtifactsCidRs []string `json:"allow_nondistributable_artifacts_cid_rs" yaml:"allow_nondistributable_artifacts_cid_rs" schema:"allow_nondistributable_artifacts_cid_rs"`
	// AllowNondistributableArtifactsHostnames: List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.
	//
	// **Warning**: Nondistributable artifacts typically have restrictions on how and where they can be distributed and shared. Only use this feature to push artifacts to private registries and ensure that you are in compliance with any terms that cover redistributing nondistributable artifacts.
	AllowNondistributableArtifactsHostnames []string `json:"allow_nondistributable_artifacts_hostnames" yaml:"allow_nondistributable_artifacts_hostnames" schema:"allow_nondistributable_artifacts_hostnames"`
	// IndexConfigs:
	IndexConfigs map[string]IndexInfo `json:"index_configs" yaml:"index_configs" schema:"index_configs"`
	// InsecureRegistryCidRs: List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.
	//
	// **Warning**: Using this option can be useful when running a local  registry, but introduces security vulnerabilities. This option should therefore ONLY be used for testing purposes. For increased security, users should add their CA to their system's list of trusted CAs instead of enabling this option.
	InsecureRegistryCidRs []string `json:"insecure_registry_cid_rs" yaml:"insecure_registry_cid_rs" schema:"insecure_registry_cid_rs"`
	// Mirrors: List of registry URLs that act as a mirror for the official (`docker.io`) registry.
	Mirrors []string `json:"mirrors" yaml:"mirrors" schema:"mirrors"`
}

// ResponseError: Error information from a response.
type ResponseError struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}

// RtcIceCandidateInit: ICECandidateInit is used to serialize ice candidates
type RtcIceCandidateInit struct {
	// Candidate: The candidate string associated with the object.
	Candidate string `json:"candidate" yaml:"candidate" schema:"candidate,required"`
	// SdpMlineIndex: The index (starting at zero) of the m-line in the SDP this candidate is associated with.
	SdpMlineIndex int `json:"sdpMLineIndex" yaml:"sdpMLineIndex" schema:"sdpMLineIndex"`
	// SdpMid: The identifier of the "media stream identification" as defined in [RFC 8841](https://tools.ietf.org/html/rfc8841).
	SdpMid string `json:"sdpMid" yaml:"sdpMid" schema:"sdpMid"`
	// UsernameFragment: The username fragment (as defined in [RFC 8445](https://tools.ietf.org/html/rfc8445#section-5.2.1)) associated with the object.
	UsernameFragment string `json:"usernameFragment" yaml:"usernameFragment" schema:"usernameFragment"`
}

// RtcSdpType: SDPType describes the type of an SessionDescription.
type RtcSdpType string

const (
	// RtcSdpTypeUnspecified: Unspecified indicates that the type is unspecified.
	RtcSdpTypeUnspecified RtcSdpType = "unspecified"
	// RtcSdpTypeOffer: indicates that a description MUST be treated as an SDP offer.
	RtcSdpTypeOffer RtcSdpType = "offer"
	// RtcSdpTypePranswer: indicates that a description MUST be treated as an SDP answer, but not a final answer. A description used as an SDP pranswer may be applied as a response to an SDP offer, or an update to a previously sent SDP pranswer.
	RtcSdpTypePranswer RtcSdpType = "pranswer"
	// RtcSdpTypeAnswer: indicates that a description MUST be treated as an SDP final answer, and the offer-answer exchange MUST be considered complete. A description used as an SDP answer may be applied as a response to an SDP offer or as an update to a previously sent SDP pranswer.
	RtcSdpTypeAnswer RtcSdpType = "answer"
	// RtcSdpTypeRollback: indicates that a description MUST be treated as canceling the current SDP negotiation and moving the SDP offer and answer back to what it was in the previous stable state. Note the local or remote SDP descriptions in the previous stable state could be null if there has not yet been a successful offer-answer negotiation.
	RtcSdpTypeRollback RtcSdpType = "rollback"
)

// RtcSessionDescription: SessionDescription is used to expose local and remote session descriptions.
type RtcSessionDescription struct {
	// Sdp: SDP string.
	Sdp string `json:"sdp" yaml:"sdp" schema:"sdp,required"`
	// Type: SDP type.
	Type RtcSdpType `json:"type" yaml:"type" schema:"type,required"`
}

// Runtime: Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux.
type Runtime struct {
	// Path: Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
	Path string `json:"path" yaml:"path" schema:"path"`
	// RuntimeArgs: List of command-line arguments to pass to the runtime when invoked.
	RuntimeArgs []string `json:"runtime_args" yaml:"runtime_args" schema:"runtime_args"`
}

// SceneSelectionType: The type of scene selection change
type SceneSelectionType string

const (
	// SceneSelectionTypeReplace: Replaces the selection
	SceneSelectionTypeReplace SceneSelectionType = "replace"
	// SceneSelectionTypeAdd: Adds to the selection
	SceneSelectionTypeAdd SceneSelectionType = "add"
	// SceneSelectionTypeRemove: Removes from the selection
	SceneSelectionTypeRemove SceneSelectionType = "remove"
)

// SceneToolType: The type of scene's active tool
type SceneToolType string

const (
	// SceneToolTypeCameraRevolve represents the SceneToolType `"camera_revolve"`.
	SceneToolTypeCameraRevolve SceneToolType = "camera_revolve"
	// SceneToolTypeSelect represents the SceneToolType `"select"`.
	SceneToolTypeSelect SceneToolType = "select"
	// SceneToolTypeMove represents the SceneToolType `"move"`.
	SceneToolTypeMove SceneToolType = "move"
	// SceneToolTypeSketchLine represents the SceneToolType `"sketch_line"`.
	SceneToolTypeSketchLine SceneToolType = "sketch_line"
	// SceneToolTypeSketchCurve represents the SceneToolType `"sketch_curve"`.
	SceneToolTypeSketchCurve SceneToolType = "sketch_curve"
	// SceneToolTypeSketchCurveMod represents the SceneToolType `"sketch_curve_mod"`.
	SceneToolTypeSketchCurveMod SceneToolType = "sketch_curve_mod"
)

// SelectGet: The response from the `SelectGet` command.
type SelectGet struct {
	// EntityIds: The UUIDs of the selected entities.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// SelectWithPoint: The response from the `SelectWithPoint` command.
type SelectWithPoint struct {
	// EntityID: The UUID of the entity that was selected.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id"`
}

// Session: An authentication session.
// For our UIs, these are automatically created by Next.js.
type Session struct {
	// CreatedAt: The date and time the session was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the session expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The unique identifier for the session.
	ID string `json:"id" yaml:"id" schema:"id"`
	// SessionToken: The session token.
	SessionToken UUID `json:"session_token" yaml:"session_token" schema:"session_token,required"`
	// UpdatedAt: The date and time the session was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user that the session belongs to.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// Solid3DGetAllEdgeFaces: The response from the `Solid3dGetAllEdgeFaces` command.
type Solid3DGetAllEdgeFaces struct {
	// Faces: The UUIDs of the faces.
	Faces []UUID `json:"faces" yaml:"faces" schema:"faces,required"`
}

// Solid3DGetAllOppositeEdges: The response from the `Solid3dGetAllOppositeEdges` command.
type Solid3DGetAllOppositeEdges struct {
	// Edges: The UUIDs of the edges.
	Edges []UUID `json:"edges" yaml:"edges" schema:"edges,required"`
}

// Solid3DGetNextAdjacentEdge: The response from the `Solid3dGetNextAdjacentEdge` command.
type Solid3DGetNextAdjacentEdge struct {
	// Edge: The UUID of the edge.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge,required"`
}

// Solid3DGetOppositeEdge: The response from the `Solid3dGetOppositeEdge` command.
type Solid3DGetOppositeEdge struct {
	// Edge: The UUID of the edge.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge,required"`
}

// Solid3DGetPrevAdjacentEdge: The response from the `Solid3dGetPrevAdjacentEdge` command.
type Solid3DGetPrevAdjacentEdge struct {
	// Edge: The UUID of the edge.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge,required"`
}

// StlStorage: Export storage.
type StlStorage string

const (
	// StlStorageAscii: Plaintext encoding.
	StlStorageAscii StlStorage = "ascii"
	// StlStorageBinary: Binary STL encoding.
	//
	// This is the default setting.
	StlStorageBinary StlStorage = "binary"
)

// SuccessWebSocketResponse: Successful Websocket response.
type SuccessWebSocketResponse struct {
	// RequestID: Which request this is a response to. If the request was a modeling command, this is the modeling command ID. If no request ID was sent, this will be null.
	RequestID UUID `json:"request_id" yaml:"request_id" schema:"request_id"`
	// Resp: The data sent with a successful response. This will be flattened into a 'type' and 'data' field.
	Resp any `json:"resp" yaml:"resp" schema:"resp,required"`
	// Success: Always true
	Success bool `json:"success" yaml:"success" schema:"success,required"`
}

// System: Co-ordinate system definition.
// The `up` axis must be orthogonal to the `forward` axis.
//
// See [cglearn.eu] for background reading.
//
// [cglearn.eu](https://cglearn.eu/pub/computer-graphics/introduction-to-geometry#material-coordinate-systems-1)
type System struct {
	// Forward: Axis the front face of a model looks along.
	Forward AxisDirectionPair `json:"forward" yaml:"forward" schema:"forward,required"`
	// Up: Axis pointing up and away from a model.
	Up AxisDirectionPair `json:"up" yaml:"up" schema:"up,required"`
}

// SystemInfoCgroupDriverEnum is the type definition for a SystemInfoCgroupDriverEnum.
type SystemInfoCgroupDriverEnum string

const (
	// SystemInfoCgroupDriverEnumEmpty represents the SystemInfoCgroupDriverEnum `""`.
	SystemInfoCgroupDriverEnumEmpty SystemInfoCgroupDriverEnum = ""
	// SystemInfoCgroupDriverEnumCgroupfs represents the SystemInfoCgroupDriverEnum `"cgroupfs"`.
	SystemInfoCgroupDriverEnumCgroupfs SystemInfoCgroupDriverEnum = "cgroupfs"
	// SystemInfoCgroupDriverEnumSystemd represents the SystemInfoCgroupDriverEnum `"systemd"`.
	SystemInfoCgroupDriverEnumSystemd SystemInfoCgroupDriverEnum = "systemd"
	// SystemInfoCgroupDriverEnumNone represents the SystemInfoCgroupDriverEnum `"none"`.
	SystemInfoCgroupDriverEnumNone SystemInfoCgroupDriverEnum = "none"
)

// SystemInfoCgroupVersionEnum is the type definition for a SystemInfoCgroupVersionEnum.
type SystemInfoCgroupVersionEnum string

const (
	// SystemInfoCgroupVersionEnumEmpty represents the SystemInfoCgroupVersionEnum `""`.
	SystemInfoCgroupVersionEnumEmpty SystemInfoCgroupVersionEnum = ""
	// SystemInfoCgroupVersionEnum1 represents the SystemInfoCgroupVersionEnum `"1"`.
	SystemInfoCgroupVersionEnum1 SystemInfoCgroupVersionEnum = "1"
	// SystemInfoCgroupVersionEnum2 represents the SystemInfoCgroupVersionEnum `"2"`.
	SystemInfoCgroupVersionEnum2 SystemInfoCgroupVersionEnum = "2"
)

// SystemInfoDefaultAddressPools is the type definition for a SystemInfoDefaultAddressPools.
type SystemInfoDefaultAddressPools struct {
	// Base: The network address in CIDR format
	Base string `json:"base" yaml:"base" schema:"base"`
	// Size: The network pool size
	Size int `json:"size" yaml:"size" schema:"size"`
}

// SystemInfoIsolationEnum is the type definition for a SystemInfoIsolationEnum.
type SystemInfoIsolationEnum string

const (
	// SystemInfoIsolationEnumEmpty represents the SystemInfoIsolationEnum `""`.
	SystemInfoIsolationEnumEmpty SystemInfoIsolationEnum = ""
	// SystemInfoIsolationEnumDefault represents the SystemInfoIsolationEnum `"default"`.
	SystemInfoIsolationEnumDefault SystemInfoIsolationEnum = "default"
	// SystemInfoIsolationEnumHyperv represents the SystemInfoIsolationEnum `"hyperv"`.
	SystemInfoIsolationEnumHyperv SystemInfoIsolationEnum = "hyperv"
	// SystemInfoIsolationEnumProcess represents the SystemInfoIsolationEnum `"process"`.
	SystemInfoIsolationEnumProcess SystemInfoIsolationEnum = "process"
)

// TakeSnapshot: The response from the `TakeSnapshot` command.
type TakeSnapshot struct {
	// Contents: Contents of the image.
	Contents Base64 `json:"contents" yaml:"contents" schema:"contents,required"`
}

// UnitAngle: The valid types of angle formats.
type UnitAngle string

const (
	// UnitAngleDegrees: Degrees <https://en.wikipedia.org/wiki/Degree_(angle)>
	UnitAngleDegrees UnitAngle = "degrees"
	// UnitAngleRadians: Radians <https://en.wikipedia.org/wiki/Radian>
	UnitAngleRadians UnitAngle = "radians"
)

// UnitAngleConversion: Result of converting between units.
type UnitAngleConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitAngle `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitAngle `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitArea: The valid types of area units.
type UnitArea string

const (
	// UnitAreaCm2: Square centimetres <https://en.wikipedia.org/wiki/Square_centimetre>
	UnitAreaCm2 UnitArea = "cm2"
	// UnitAreaDm2: Square decimetres <https://en.wikipedia.org/wiki/Square_decimetre>
	UnitAreaDm2 UnitArea = "dm2"
	// UnitAreaFt2: Square feet <https://en.wikipedia.org/wiki/Square_foot>
	UnitAreaFt2 UnitArea = "ft2"
	// UnitAreaIn2: Square inches <https://en.wikipedia.org/wiki/Square_inch>
	UnitAreaIn2 UnitArea = "in2"
	// UnitAreaKm2: Square kilometres <https://en.wikipedia.org/wiki/Square_kilometre>
	UnitAreaKm2 UnitArea = "km2"
	// UnitAreaM2: Square metres <https://en.wikipedia.org/wiki/Square_metre>
	UnitAreaM2 UnitArea = "m2"
	// UnitAreaMm2: Square millimetres <https://en.wikipedia.org/wiki/Square_millimetre>
	UnitAreaMm2 UnitArea = "mm2"
	// UnitAreaYd2: Square yards <https://en.wikipedia.org/wiki/Square_mile>
	UnitAreaYd2 UnitArea = "yd2"
)

// UnitAreaConversion: Result of converting between units.
type UnitAreaConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitArea `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitCurrent: The valid types of current units.
type UnitCurrent string

const (
	// UnitCurrentAmperes: Amperes <https://en.wikipedia.org/wiki/Ampere>
	UnitCurrentAmperes UnitCurrent = "amperes"
	// UnitCurrentMicroamperes: Microamperes <https://en.wikipedia.org/wiki/Microampere>
	UnitCurrentMicroamperes UnitCurrent = "microamperes"
	// UnitCurrentMilliamperes: Milliamperes <https://en.wikipedia.org/wiki/Milliampere>
	UnitCurrentMilliamperes UnitCurrent = "milliamperes"
	// UnitCurrentNanoamperes: Nanoamperes <https://en.wikipedia.org/wiki/Nanoampere>
	UnitCurrentNanoamperes UnitCurrent = "nanoamperes"
)

// UnitCurrentConversion: Result of converting between units.
type UnitCurrentConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitCurrent `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitCurrent `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitDensity: The valid types for density units.
type UnitDensity string

const (
	// UnitDensityLbft3: Pounds per cubic feet.
	UnitDensityLbft3 UnitDensity = "lb:ft3"
	// UnitDensityKgm3: Kilograms per cubic meter.
	UnitDensityKgm3 UnitDensity = "kg:m3"
)

// UnitEnergy: The valid types of energy units.
type UnitEnergy string

const (
	// UnitEnergyBtu: British Thermal Unit (BTU) <https://en.wikipedia.org/wiki/British_thermal_unit>
	UnitEnergyBtu UnitEnergy = "btu"
	// UnitEnergyElectronvolts: Electron Volts (eV) <https://en.wikipedia.org/wiki/Electronvolt>
	UnitEnergyElectronvolts UnitEnergy = "electronvolts"
	// UnitEnergyJoules: Joules (or watt-seconds) <https://en.wikipedia.org/wiki/Joule>
	UnitEnergyJoules UnitEnergy = "joules"
	// UnitEnergyKilocalories: Kilocalories (often just called calories) <https://en.wikipedia.org/wiki/Kilocalorie>
	UnitEnergyKilocalories UnitEnergy = "kilocalories"
	// UnitEnergyKilowattHours: Kilowatt hours (kWh) <https://en.wikipedia.org/wiki/Kilowatt-hour>
	UnitEnergyKilowattHours UnitEnergy = "kilowatt_hours"
	// UnitEnergyWattHours: Watt hours (Wh) <https://en.wikipedia.org/wiki/Kilowatt-hour>
	UnitEnergyWattHours UnitEnergy = "watt_hours"
)

// UnitEnergyConversion: Result of converting between units.
type UnitEnergyConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitEnergy `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitEnergy `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitForce: The valid types of force units.
type UnitForce string

const (
	// UnitForceDynes: Dynes <https://en.wikipedia.org/wiki/Dyne>
	UnitForceDynes UnitForce = "dynes"
	// UnitForceKiloponds: Kiloponds <https://en.wikipedia.org/wiki/Kilopond>
	UnitForceKiloponds UnitForce = "kiloponds"
	// UnitForceMicronewtons: Micronewtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceMicronewtons UnitForce = "micronewtons"
	// UnitForceMillinewtons: Millinewtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceMillinewtons UnitForce = "millinewtons"
	// UnitForceNewtons: Newtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceNewtons UnitForce = "newtons"
	// UnitForcePoundals: Poundals <https://en.wikipedia.org/wiki/Poundal>
	UnitForcePoundals UnitForce = "poundals"
	// UnitForcePounds: Pounds <https://en.wikipedia.org/wiki/Pound_(force)>
	UnitForcePounds UnitForce = "pounds"
)

// UnitForceConversion: Result of converting between units.
type UnitForceConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitForce `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitForce `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitFrequency: The valid types of frequency units.
type UnitFrequency string

const (
	// UnitFrequencyGigahertz: Gigahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyGigahertz UnitFrequency = "gigahertz"
	// UnitFrequencyHertz: Hertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyHertz UnitFrequency = "hertz"
	// UnitFrequencyKilohertz: Kilohertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyKilohertz UnitFrequency = "kilohertz"
	// UnitFrequencyMegahertz: Megahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMegahertz UnitFrequency = "megahertz"
	// UnitFrequencyMicrohertz: Microhertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMicrohertz UnitFrequency = "microhertz"
	// UnitFrequencyMillihertz: Millihertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMillihertz UnitFrequency = "millihertz"
	// UnitFrequencyNanohertz: Nanohertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyNanohertz UnitFrequency = "nanohertz"
	// UnitFrequencyTerahertz: Terahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyTerahertz UnitFrequency = "terahertz"
)

// UnitFrequencyConversion: Result of converting between units.
type UnitFrequencyConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitFrequency `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitFrequency `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitLength: The valid types of length units.
type UnitLength string

const (
	// UnitLengthCm: Centimetres <https://en.wikipedia.org/wiki/Centimetre>
	UnitLengthCm UnitLength = "cm"
	// UnitLengthFt: Feet <https://en.wikipedia.org/wiki/Foot_(unit)>
	UnitLengthFt UnitLength = "ft"
	// UnitLengthIn: Inches <https://en.wikipedia.org/wiki/Inch>
	UnitLengthIn UnitLength = "in"
	// UnitLengthM: Metres <https://en.wikipedia.org/wiki/Metre>
	UnitLengthM UnitLength = "m"
	// UnitLengthMm: Millimetres <https://en.wikipedia.org/wiki/Millimetre>
	UnitLengthMm UnitLength = "mm"
	// UnitLengthYd: Yards <https://en.wikipedia.org/wiki/Yard>
	UnitLengthYd UnitLength = "yd"
)

// UnitLengthConversion: Result of converting between units.
type UnitLengthConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitLength `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitMas: The valid types of mass units.
type UnitMas string

const (
	// UnitMasG: Grams <https://en.wikipedia.org/wiki/Gram>
	UnitMasG UnitMas = "g"
	// UnitMasKg: Kilograms <https://en.wikipedia.org/wiki/Kilogram>
	UnitMasKg UnitMas = "kg"
	// UnitMasLb: Pounds <https://en.wikipedia.org/wiki/Pound_(mass)>
	UnitMasLb UnitMas = "lb"
)

// UnitMassConversion: Result of converting between units.
type UnitMassConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitMas `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPower: The valid types of power units.
type UnitPower string

const (
	// UnitPowerBtuPerMinute: British thermal units (BTU) per minute <https://en.wikipedia.org/wiki/British_thermal_unit>
	UnitPowerBtuPerMinute UnitPower = "btu_per_minute"
	// UnitPowerHorsepower: Horsepower (hp) <https://en.wikipedia.org/wiki/Horsepower>
	UnitPowerHorsepower UnitPower = "horsepower"
	// UnitPowerKilowatts: Kilowatts <https://en.wikipedia.org/wiki/Kilowatt>
	UnitPowerKilowatts UnitPower = "kilowatts"
	// UnitPowerMetricHorsepower: Metric horsepower (PS) <https://en.wikipedia.org/wiki/Horsepower#Metric_horsepower>
	UnitPowerMetricHorsepower UnitPower = "metric_horsepower"
	// UnitPowerMicrowatts: Microwatts <https://en.wikipedia.org/wiki/Microwatt>
	UnitPowerMicrowatts UnitPower = "microwatts"
	// UnitPowerMilliwatts: Millwatts <https://en.wikipedia.org/wiki/Milliwatt>
	UnitPowerMilliwatts UnitPower = "milliwatts"
	// UnitPowerWatts: Watts <https://en.wikipedia.org/wiki/Watt>
	UnitPowerWatts UnitPower = "watts"
)

// UnitPowerConversion: Result of converting between units.
type UnitPowerConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitPower `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitPower `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitPressure: The valid types of pressure units.
type UnitPressure string

const (
	// UnitPressureAtmospheres: Atmospheres <https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)>
	UnitPressureAtmospheres UnitPressure = "atmospheres"
	// UnitPressureBars: Bars <https://en.wikipedia.org/wiki/Bar_(unit)>
	UnitPressureBars UnitPressure = "bars"
	// UnitPressureHectopascals: Hectopascals <https://en.wikipedia.org/wiki/Hectopascal>
	UnitPressureHectopascals UnitPressure = "hectopascals"
	// UnitPressureKilopascals: Kilopascals <https://en.wikipedia.org/wiki/Kilopascal>
	UnitPressureKilopascals UnitPressure = "kilopascals"
	// UnitPressureMillibars: Millibars <https://en.wikipedia.org/wiki/Bar_(unit)>
	UnitPressureMillibars UnitPressure = "millibars"
	// UnitPressurePascals: Pascals <https://en.wikipedia.org/wiki/Pascal_(unit)>
	UnitPressurePascals UnitPressure = "pascals"
	// UnitPressurePsi: Pounds per square inch (PSI) - <https://en.wikipedia.org/wiki/Pound_per_square_inch>
	UnitPressurePsi UnitPressure = "psi"
)

// UnitPressureConversion: Result of converting between units.
type UnitPressureConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitPressure `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitPressure `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitTemperature: The valid types of temperature units.
type UnitTemperature string

const (
	// UnitTemperatureCelsius: Celsius <https://en.wikipedia.org/wiki/Celsius>
	UnitTemperatureCelsius UnitTemperature = "celsius"
	// UnitTemperatureFahrenheit: Fahrenheit <https://en.wikipedia.org/wiki/Fahrenheit>
	UnitTemperatureFahrenheit UnitTemperature = "fahrenheit"
	// UnitTemperatureKelvin: Kelvin <https://en.wikipedia.org/wiki/Kelvin>
	UnitTemperatureKelvin UnitTemperature = "kelvin"
	// UnitTemperatureRankine: Rankine <https://en.wikipedia.org/wiki/Rankine_scale>
	UnitTemperatureRankine UnitTemperature = "rankine"
)

// UnitTemperatureConversion: Result of converting between units.
type UnitTemperatureConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitTemperature `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitTemperature `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitTorque: The valid types of torque units.
type UnitTorque string

const (
	// UnitTorqueNewtonMetres: Newton metres <https://en.wikipedia.org/wiki/Newton_metre>
	UnitTorqueNewtonMetres UnitTorque = "newton_metres"
	// UnitTorquePoundFoot: Pound foot <https://en.wikipedia.org/wiki/Pound-foot_(torque)>
	UnitTorquePoundFoot UnitTorque = "pound_foot"
)

// UnitTorqueConversion: Result of converting between units.
type UnitTorqueConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitTorque `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitTorque `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UnitVolume: The valid types of volume units.
type UnitVolume string

const (
	// UnitVolumeCm3: Cubic centimetres (cc or cm³) <https://en.wikipedia.org/wiki/Cubic_centimetre>
	UnitVolumeCm3 UnitVolume = "cm3"
	// UnitVolumeFt3: Cubic feet (ft³) <https://en.wikipedia.org/wiki/Cubic_foot>
	UnitVolumeFt3 UnitVolume = "ft3"
	// UnitVolumeIn3: Cubic inches (cu in or in³) <https://en.wikipedia.org/wiki/Cubic_inch>
	UnitVolumeIn3 UnitVolume = "in3"
	// UnitVolumeM3: Cubic metres (m³) <https://en.wikipedia.org/wiki/Cubic_metre>
	UnitVolumeM3 UnitVolume = "m3"
	// UnitVolumeYd3: Cubic yards (yd³) <https://en.wikipedia.org/wiki/Cubic_yard>
	UnitVolumeYd3 UnitVolume = "yd3"
	// UnitVolumeUsfloz: US Fluid Ounces (fl oz) <https://en.wikipedia.org/wiki/Fluid_ounce>
	UnitVolumeUsfloz UnitVolume = "usfloz"
	// UnitVolumeUsgal: US Gallons (gal US) <https://en.wikipedia.org/wiki/Gallon>
	UnitVolumeUsgal UnitVolume = "usgal"
	// UnitVolumeL: Liters (l) <https://en.wikipedia.org/wiki/Litre>
	UnitVolumeL UnitVolume = "l"
	// UnitVolumeMl: Milliliters (ml) <https://en.wikipedia.org/wiki/Litre>
	UnitVolumeMl UnitVolume = "ml"
)

// UnitVolumeConversion: Result of converting between units.
type UnitVolumeConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitVolume `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id"`
}

// UpdateUser: The user-modifiable parts of a User.
type UpdateUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// User: A user.
type User struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// UserResultsPage: A single page of results
type UserResultsPage struct {
	// Items: list of items on this page of results
	Items []User `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// VerificationToken: A verification token for a user.
// This is typically used to verify a user's email address.
type VerificationToken struct {
	// CreatedAt: The date and time the verification token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the verification token expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The token used for verification. This is used as the id for the table since it is unique per record.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Identifier: The identifier for the user. This is typically the user's email address since that is what we are verifying.
	Identifier string `json:"identifier" yaml:"identifier" schema:"identifier"`
	// UpdatedAt: The date and time the verification token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// WebSocketRequestCandidate: The trickle ICE candidate request.
type WebSocketRequestCandidate struct {
	// Candidate: Information about the ICE candidate.
	Candidate RtcIceCandidateInit `json:"candidate" yaml:"candidate" schema:"candidate,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestOffer: The modeling command request.
type WebSocketRequestOffer struct {
	// Cmd: Which command to submit to the Kittycad engine.
	Cmd any `json:"cmd" yaml:"cmd" schema:"cmd,required"`
	// CmdID: ID of command being submitted.
	CmdID UUID `json:"cmd_id" yaml:"cmd_id" schema:"cmd_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestSdpOffer: The client-to-server Ping to ensure the WebSocket stays alive.
type WebSocketRequestSdpOffer struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestTrickleIce: The SDP offer request.
type WebSocketRequestTrickleIce struct {
	// Offer: The session description.
	Offer RtcSessionDescription `json:"offer" yaml:"offer" schema:"offer,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}
