// Code generated by `generate`. DO NOT EDIT.

package kittycad

// APICallQueryGroup: A response for a query on the API call table that is grouped by something.
type APICallQueryGroup struct {
	// Count:
	Count int `json:"count" yaml:"count" schema:"count,required"`
	// Query:
	Query string `json:"query" yaml:"query" schema:"query,required"`
}

// APICallQueryGroupBy: The field of an API call to group by.
type APICallQueryGroupBy string

const (
	// APICallQueryGroupByEmail: The email of the user that requested the API call.
	APICallQueryGroupByEmail APICallQueryGroupBy = "email"
	// APICallQueryGroupByMethod: The HTTP method of the API call.
	APICallQueryGroupByMethod APICallQueryGroupBy = "method"
	// APICallQueryGroupByEndpoint: The endpoint of the API call.
	APICallQueryGroupByEndpoint APICallQueryGroupBy = "endpoint"
	// APICallQueryGroupByUserID: The user ID of the user that requested the API call.
	APICallQueryGroupByUserID APICallQueryGroupBy = "user_id"
	// APICallQueryGroupByOrigin: The origin of the API call. This is parsed from the `Origin` header.
	APICallQueryGroupByOrigin APICallQueryGroupBy = "origin"
	// APICallQueryGroupByIpAddress: The IP address of the user making the API call.
	APICallQueryGroupByIpAddress APICallQueryGroupBy = "ip_address"
)

// APICallStatus: The status of an async API call.
type APICallStatus string

const (
	// APICallStatusQueued: The async API call is queued.
	APICallStatusQueued APICallStatus = "queued"
	// APICallStatusUploaded: The async API call was uploaded to be converted.
	APICallStatusUploaded APICallStatus = "uploaded"
	// APICallStatusInProgress: The async API call is in progress.
	APICallStatusInProgress APICallStatus = "in_progress"
	// APICallStatusCompleted: The async API call has completed.
	APICallStatusCompleted APICallStatus = "completed"
	// APICallStatusFailed: The async API call has failed.
	APICallStatusFailed APICallStatus = "failed"
)

// APICallWithPrice: An API call with the price.
// This is a join of the `ApiCall` and `ApiCallPrice` tables.
type APICallWithPrice struct {
	// CompletedAt: The date and time the API call completed billing.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The date and time the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Duration: The duration of the API call.
	Duration int `json:"duration" yaml:"duration" schema:"duration"`
	// Email: The user's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// Endpoint: The endpoint requested by the API call.
	Endpoint string `json:"endpoint" yaml:"endpoint" schema:"endpoint"`
	// ID: The unique identifier for the API call.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IPAddress: The ip address of the origin.
	IPAddress IP `json:"ip_address" yaml:"ip_address" schema:"ip_address"`
	// Method: The HTTP method requested by the API call.
	Method Method `json:"method" yaml:"method" schema:"method,required"`
	// Minutes: The number of minutes the API call was billed for.
	Minutes int `json:"minutes" yaml:"minutes" schema:"minutes"`
	// OrgID: The organization ID of the API call if it is billable through an organization.
	OrgID UUID `json:"org_id" yaml:"org_id" schema:"org_id"`
	// Origin: The origin of the API call.
	Origin string `json:"origin" yaml:"origin" schema:"origin"`
	// Price: The price of the API call.
	Price float64 `json:"price" yaml:"price" schema:"price"`
	// RequestBody: The request body sent by the API call.
	RequestBody string `json:"request_body" yaml:"request_body" schema:"request_body"`
	// RequestQueryParams: The request query params sent by the API call.
	RequestQueryParams string `json:"request_query_params" yaml:"request_query_params" schema:"request_query_params"`
	// ResponseBody: The response body returned by the API call. We do not store this information if it is above a certain size.
	ResponseBody string `json:"response_body" yaml:"response_body" schema:"response_body"`
	// StartedAt: The date and time the API call started billing.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// StatusCode: The status code returned by the API call.
	StatusCode int `json:"status_code" yaml:"status_code" schema:"status_code"`
	// StripeInvoiceItemID: The Stripe invoice item ID of the API call if it is billable.
	StripeInvoiceItemID string `json:"stripe_invoice_item_id" yaml:"stripe_invoice_item_id" schema:"stripe_invoice_item_id"`
	// Token: The API token that made the API call.
	Token UUID `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserAgent: The user agent of the request.
	UserAgent string `json:"user_agent" yaml:"user_agent" schema:"user_agent,required"`
	// UserID: The ID of the user that made the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// APICallWithPriceResultsPage: A single page of results
type APICallWithPriceResultsPage struct {
	// Items: list of items on this page of results
	Items []APICallWithPrice `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// APIEndpoint: Types of API endpoints.
type APIEndpoint string

const (
	// APIendpointModeling: The modeling API.
	APIendpointModeling APIEndpoint = "modeling"
	// APIendpointMl: Machine learning API.
	APIendpointMl APIEndpoint = "ml"
	// APIendpointFile: File API.
	APIendpointFile APIEndpoint = "file"
)

// APIError: An error.
type APIError struct {
	// ErrorCode: The error code.
	ErrorCode ErrorCode `json:"error_code" yaml:"error_code" schema:"error_code,required"`
	// Message: The error message.
	Message string `json:"message" yaml:"message" schema:"message,required"`
}

// APIToken: An API token.
// These are used to authenticate users with Bearer authentication.
type APIToken struct {
	// CreatedAt: The date and time the API token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the API token.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IsValid: If the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token.
	IsValid bool `json:"is_valid" yaml:"is_valid" schema:"is_valid,required"`
	// Label: An optional label for the API token.
	Label string `json:"label" yaml:"label" schema:"label"`
	// Token: The API token itself.
	Token string `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The ID of the user that owns the API token.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// APITokenResultsPage: A single page of results
type APITokenResultsPage struct {
	// Items: list of items on this page of results
	Items []APIToken `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AccountProvider: An account provider.
type AccountProvider string

const (
	// AccountProviderApple: The Apple account provider.
	AccountProviderApple AccountProvider = "apple"
	// AccountProviderDiscord: The Discord account provider.
	AccountProviderDiscord AccountProvider = "discord"
	// AccountProviderGoogle: The Google account provider.
	AccountProviderGoogle AccountProvider = "google"
	// AccountProviderGithub: The GitHub account provider.
	AccountProviderGithub AccountProvider = "github"
	// AccountProviderMicrosoft: The Microsoft account provider.
	AccountProviderMicrosoft AccountProvider = "microsoft"
	// AccountProviderSaml: The SAML account provider.
	AccountProviderSaml AccountProvider = "saml"
	// AccountProviderTencent: The Tencent QQ account provider.
	AccountProviderTencent AccountProvider = "tencent"
)

// AddHoleFromOffset: The response from the `AddHoleFromOffset` command.
type AddHoleFromOffset struct {
	// EntityIds: If the offset path splits into multiple paths, this will contain the UUIDs of the new paths. If the offset path remains as a single path, this will be empty, and the resulting ID of the (single) new path will be the ID of the `AddHoleFromOffset` command.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// AddOrgMember: Data for adding a member to an org.
type AddOrgMember struct {
	// Email: The email address of the user to add to the org.
	Email string `json:"email" yaml:"email" schema:"email,required"`
	// Role: The organization role to give the user.
	Role UserOrgRole `json:"role" yaml:"role" schema:"role,required"`
}

// AddressDetails: Address details.
type AddressDetails struct {
	// City: The city component.
	City string `json:"city" yaml:"city" schema:"city"`
	// Country: The country component. This is a two-letter ISO country code.
	Country string `json:"country" yaml:"country" schema:"country,required"`
	// State: The state component.
	State string `json:"state" yaml:"state" schema:"state"`
	// Street1: The first street component.
	Street1 string `json:"street1" yaml:"street1" schema:"street1"`
	// Street2: The second street component.
	Street2 string `json:"street2" yaml:"street2" schema:"street2"`
	// Zip: The zip component.
	Zip string `json:"zip" yaml:"zip" schema:"zip"`
}

// AdjacencyInfo: Edge info struct (useful for maintaining mappings between edges and faces and adjacent/opposite edges).
type AdjacencyInfo struct {
	// AdjacentInfo: Adjacent edge and face info.
	AdjacentInfo EdgeInfo `json:"adjacent_info" yaml:"adjacent_info" schema:"adjacent_info"`
	// OppositeInfo: Opposite edge and face info.
	OppositeInfo EdgeInfo `json:"opposite_info" yaml:"opposite_info" schema:"opposite_info"`
	// OriginalInfo: Original edge id and face info.
	OriginalInfo EdgeInfo `json:"original_info" yaml:"original_info" schema:"original_info"`
}

// Angle: An angle, with a specific unit.
type Angle struct {
	// Unit: What unit is the measurement?
	Unit UnitAngle `json:"unit" yaml:"unit" schema:"unit,required"`
	// Value: The size of the angle, measured in the chosen unit.
	Value float64 `json:"value" yaml:"value" schema:"value,required"`
}

// AnnotationLineEnd: Annotation line end type
type AnnotationLineEnd string

const (
	// AnnotationLineEndNone represents the AnnotationLineEnd `"none"`.
	AnnotationLineEndNone AnnotationLineEnd = "none"
	// AnnotationLineEndArrow represents the AnnotationLineEnd `"arrow"`.
	AnnotationLineEndArrow AnnotationLineEnd = "arrow"
)

// AnnotationLineEndOptions: Options for annotation text
type AnnotationLineEndOptions struct {
	// End: How to style the end of the annotation line.
	End AnnotationLineEnd `json:"end" yaml:"end" schema:"end,required"`
	// Start: How to style the start of the annotation line.
	Start AnnotationLineEnd `json:"start" yaml:"start" schema:"start,required"`
}

// AnnotationOptions: Options for annotations
type AnnotationOptions struct {
	// Color: Color to render the annotation
	Color Color `json:"color" yaml:"color" schema:"color"`
	// LineEnds: How to style the start and end of the line
	LineEnds AnnotationLineEndOptions `json:"line_ends" yaml:"line_ends" schema:"line_ends"`
	// LineWidth: Width of the annotation's line
	LineWidth float64 `json:"line_width" yaml:"line_width" schema:"line_width"`
	// Position: Position to put the annotation
	Position Point3D `json:"position" yaml:"position" schema:"position"`
	// Text: Text displayed on the annotation
	Text AnnotationTextOptions `json:"text" yaml:"text" schema:"text"`
}

// AnnotationTextAlignmentX: Horizontal Text alignment
type AnnotationTextAlignmentX string

const (
	// AnnotationTextAlignmentXLeft represents the AnnotationTextAlignmentX `"left"`.
	AnnotationTextAlignmentXLeft AnnotationTextAlignmentX = "left"
	// AnnotationTextAlignmentXCenter represents the AnnotationTextAlignmentX `"center"`.
	AnnotationTextAlignmentXCenter AnnotationTextAlignmentX = "center"
	// AnnotationTextAlignmentXRight represents the AnnotationTextAlignmentX `"right"`.
	AnnotationTextAlignmentXRight AnnotationTextAlignmentX = "right"
)

// AnnotationTextAlignmentY: Vertical Text alignment
type AnnotationTextAlignmentY string

const (
	// AnnotationTextAlignmentYBottom represents the AnnotationTextAlignmentY `"bottom"`.
	AnnotationTextAlignmentYBottom AnnotationTextAlignmentY = "bottom"
	// AnnotationTextAlignmentYCenter represents the AnnotationTextAlignmentY `"center"`.
	AnnotationTextAlignmentYCenter AnnotationTextAlignmentY = "center"
	// AnnotationTextAlignmentYTop represents the AnnotationTextAlignmentY `"top"`.
	AnnotationTextAlignmentYTop AnnotationTextAlignmentY = "top"
)

// AnnotationTextOptions: Options for annotation text
type AnnotationTextOptions struct {
	// PointSize: Text font's point size
	PointSize int `json:"point_size" yaml:"point_size" schema:"point_size,required"`
	// Text: Text displayed on the annotation
	Text string `json:"text" yaml:"text" schema:"text,required"`
	// X: Alignment along the X axis
	X AnnotationTextAlignmentX `json:"x" yaml:"x" schema:"x,required"`
	// Y: Alignment along the Y axis
	Y AnnotationTextAlignmentY `json:"y" yaml:"y" schema:"y,required"`
}

// AnnotationType: The type of annotation
type AnnotationType string

const (
	// AnnotationTypeT2D: 2D annotation type (screen or planar space)
	AnnotationTypeT2D AnnotationType = "t2d"
	// AnnotationTypeT3D: 3D annotation type
	AnnotationTypeT3D AnnotationType = "t3d"
)

// AppClientInfo: Information about a third party app client.
type AppClientInfo struct {
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// AsyncAPICall: An async API call.
type AsyncAPICall struct {
	// Attempts: The number of times we've attempted to process this job.
	Attempts int `json:"attempts" yaml:"attempts" schema:"attempts"`
	// CompletedAt: The time and date the async API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the async API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the async API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The JSON input for the API call. These are determined by the endpoint that is run.
	Input any `json:"input" yaml:"input" schema:"input"`
	// Output: The JSON output for the API call. These are determined by the endpoint that is run.
	Output any `json:"output" yaml:"output" schema:"output"`
	// StartedAt: The time and date the async API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the async API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type: The type of async API call.
	Type AsyncAPICallType `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the async API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the async API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
	// Worker: The worker node that is performing or performed the async API call.
	Worker string `json:"worker" yaml:"worker" schema:"worker"`
}

// AsyncAPICallOutputCompletedAt: A file conversion.
type AsyncAPICallOutputCompletedAt struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// OutputFormatOptions: The output format options of the file conversion.
	OutputFormatOptions any `json:"output_format_options" yaml:"output_format_options" schema:"output_format_options"`
	// Outputs: The converted files (if multiple file conversion), if completed, base64 encoded. The key of the map is the path of the output file.
	Outputs map[string]Base64 `json:"outputs" yaml:"outputs" schema:"outputs"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// SrcFormatOptions: The source format options of the file conversion.
	SrcFormatOptions any `json:"src_format_options" yaml:"src_format_options" schema:"src_format_options"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputCreatedAt: File center of mass.
type AsyncAPICallOutputCreatedAt struct {
	// CenterOfMass: The resulting center of mass.
	CenterOfMass Point3D `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the center of mass.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputError: A file mass.
type AsyncAPICallOutputError struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// MaterialDensityUnit: The material density unit.
	MaterialDensityUnit UnitDensity `json:"material_density_unit" yaml:"material_density_unit" schema:"material_density_unit,required"`
	// OutputUnit: The output unit for the mass.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputID: A file volume.
type AsyncAPICallOutputID struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the volume.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// AsyncAPICallOutputOutputFormat: A file density.
type AsyncAPICallOutputOutputFormat struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// MaterialMassUnit: The material mass unit.
	MaterialMassUnit UnitMas `json:"material_mass_unit" yaml:"material_mass_unit" schema:"material_mass_unit,required"`
	// OutputUnit: The output unit for the density.
	OutputUnit UnitDensity `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputOutputFormatOptions: A file surface area.
type AsyncAPICallOutputOutputFormatOptions struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the surface area.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// SurfaceArea: The resulting surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputOutputs: Text to CAD.
type AsyncAPICallOutputOutputs struct {
	// Code: The code for the model. This is optional but will be required in the future once we are at v1.
	Code string `json:"code" yaml:"code" schema:"code"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// KclVersion: The version of kcl requested.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// Model: The model being used.
	Model TextToCadModel `json:"model" yaml:"model" schema:"model,required"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// OutputFormat: The output format of the model.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// Outputs: The output of the model in the given file format the user requested, base64 encoded. The key of the map is the path of the output file.
	Outputs map[string]Base64 `json:"outputs" yaml:"outputs" schema:"outputs"`
	// Prompt: The prompt.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputSrcFormat: Text to CAD iteration.
type AsyncAPICallOutputSrcFormat struct {
	// Code: The code for the new model.
	Code string `json:"code" yaml:"code" schema:"code,required"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Model: The model being used.
	Model TextToCadModel `json:"model" yaml:"model" schema:"model,required"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// OriginalSourceCode: The original source code for the model, previous to the changes.
	OriginalSourceCode string `json:"original_source_code" yaml:"original_source_code" schema:"original_source_code,required"`
	// Prompt: The prompt for the overall changes. This is optional if you only want changes on specific source ranges.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// SourceRanges: The source ranges the user suggested to change.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallOutputSrcFormatOptions: Text to CAD multi-file iteration.
type AsyncAPICallOutputSrcFormatOptions struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// KclVersion: The version of kcl to use. If empty, the latest version will be used.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// Model: The model being used.
	Model TextToCadModel `json:"model" yaml:"model" schema:"model,required"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// Outputs: The output files. Returns a map of the file name to the file contents. The file contents are not encoded since kcl files are not binary.
	Outputs map[string]string `json:"outputs" yaml:"outputs" schema:"outputs"`
	// ProjectName: The project name. This is used to tie the prompt to a project. Which helps us make our models better over time.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name"`
	// Prompt: The prompt for the overall changes. This is optional if you only want changes on specific source ranges. This will apply to all the files.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// SourceRanges: The source ranges the user suggested to change.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// AsyncAPICallResultsPage: A single page of results
type AsyncAPICallResultsPage struct {
	// Items: list of items on this page of results
	Items []AsyncAPICall `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// AsyncAPICallType: The type of async API call.
type AsyncAPICallType string

const (
	// AsyncAPICallTypeFileConversion: File conversion.
	AsyncAPICallTypeFileConversion AsyncAPICallType = "file_conversion"
	// AsyncAPICallTypeFileVolume: File volume.
	AsyncAPICallTypeFileVolume AsyncAPICallType = "file_volume"
	// AsyncAPICallTypeFileCenterOfMass: File center of mass.
	AsyncAPICallTypeFileCenterOfMass AsyncAPICallType = "file_center_of_mass"
	// AsyncAPICallTypeFileMass: File mass.
	AsyncAPICallTypeFileMass AsyncAPICallType = "file_mass"
	// AsyncAPICallTypeFileDensity: File density.
	AsyncAPICallTypeFileDensity AsyncAPICallType = "file_density"
	// AsyncAPICallTypeFileSurfaceArea: File surface area.
	AsyncAPICallTypeFileSurfaceArea AsyncAPICallType = "file_surface_area"
	// AsyncAPICallTypeTextToCad: Text to CAD.
	AsyncAPICallTypeTextToCad AsyncAPICallType = "text_to_cad"
	// AsyncAPICallTypeTextToCadIteration: Text to CAD iteration.
	AsyncAPICallTypeTextToCadIteration AsyncAPICallType = "text_to_cad_iteration"
	// AsyncAPICallTypeTextToCadMultiFileIteration: Text to CAD multi-file iteration.
	AsyncAPICallTypeTextToCadMultiFileIteration AsyncAPICallType = "text_to_cad_multi_file_iteration"
)

// AuthAPIKeyResponse: The response from the `/auth/api-key` endpoint.
type AuthAPIKeyResponse struct {
	// SessionToken: The session token
	SessionToken string `json:"session_token" yaml:"session_token" schema:"session_token,required"`
}

// AuthCallback: The authentication callback from the OAuth 2.0 client. This is typically posted to the redirect URL as query params after authenticating.
type AuthCallback struct {
	// Code: The authorization code.
	Code string `json:"code" yaml:"code" schema:"code"`
	// IdToken: For Apple only, a JSON web token containing the user’s identity information.
	IdToken string `json:"id_token" yaml:"id_token" schema:"id_token"`
	// State: The state that we had passed in through the user consent URL.
	State string `json:"state" yaml:"state" schema:"state"`
	// User: For Apple only, a JSON string containing the data requested in the scope property. The returned data is in the following format: `{ "name": { "firstName": string, "lastName": string }, "email": string }`
	User string `json:"user" yaml:"user" schema:"user"`
}

// Axi: Co-ordinate axis specifier.
// See [cglearn.eu] for background reading.
//
// [cglearn.eu]: https://cglearn.eu/pub/computer-graphics/introduction-to-geometry#material-coordinate-systems-1
type Axi string

const (
	// AxiY: 'Y' axis.
	AxiY Axi = "y"
	// AxiZ: 'Z' axis.
	AxiZ Axi = "z"
)

// AxisDirectionPair: An [`Axis`] paired with a [`Direction`].
type AxisDirectionPair struct {
	// Axis: Axis specifier.
	Axis Axi `json:"axis" yaml:"axis" schema:"axis,required"`
	// Direction: Specifies which direction the axis is pointing.
	Direction Direction `json:"direction" yaml:"direction" schema:"direction,required"`
}

// BillingInfo: The billing information for payments.
type BillingInfo struct {
	// Address: The address of the customer.
	Address AddressDetails `json:"address" yaml:"address" schema:"address"`
	// Name: The name of the customer.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The phone for the customer.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// BlockReason: The reason for blocking a user.
type BlockReason string

const (
	// BlockReasonMissingPaymentMethod: The user is missing a payment method and has exceeded their free API call credits for the month.
	BlockReasonMissingPaymentMethod BlockReason = "missing_payment_method"
	// BlockReasonPaymentMethodFailed: The users payment method has failed.
	BlockReasonPaymentMethodFailed BlockReason = "payment_method_failed"
)

// BooleanIntersection: The response from the 'BooleanIntersection'.
type BooleanIntersection struct {
	// ExtraSolidIds: If the operation produced just one solid, then its ID will be the ID of the modeling command request. But if any extra solids are produced, then their IDs will be included here.
	ExtraSolidIds []UUID `json:"extra_solid_ids" yaml:"extra_solid_ids" schema:"extra_solid_ids"`
}

// BooleanSubtract: The response from the 'BooleanSubtract'.
type BooleanSubtract struct {
	// ExtraSolidIds: If the operation produced just one solid, then its ID will be the ID of the modeling command request. But if any extra solids are produced, then their IDs will be included here.
	ExtraSolidIds []UUID `json:"extra_solid_ids" yaml:"extra_solid_ids" schema:"extra_solid_ids"`
}

// BooleanUnion: The response from the 'BooleanUnion'.
type BooleanUnion struct {
	// ExtraSolidIds: If the operation produced just one solid, then its ID will be the ID of the modeling command request. But if any extra solids are produced, then their IDs will be included here.
	ExtraSolidIds []UUID `json:"extra_solid_ids" yaml:"extra_solid_ids" schema:"extra_solid_ids"`
}

// CameraDragEnd: The response from the `CameraDragEnd` command.
type CameraDragEnd struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}

// CameraDragInteractionType: The type of camera drag interaction.
type CameraDragInteractionType string

const (
	// CameraDragInteractionTypePan: Camera pan
	CameraDragInteractionTypePan CameraDragInteractionType = "pan"
	// CameraDragInteractionTypeRotate: Camera rotate (spherical camera revolve/orbit)
	CameraDragInteractionTypeRotate CameraDragInteractionType = "rotate"
	// CameraDragInteractionTypeRotatetrackball: Camera rotate (trackball with 3 degrees of freedom)
	CameraDragInteractionTypeRotatetrackball CameraDragInteractionType = "rotatetrackball"
	// CameraDragInteractionTypeZoom: Camera zoom (increase or decrease distance to reference point center)
	CameraDragInteractionTypeZoom CameraDragInteractionType = "zoom"
)

// CameraDragMove: The response from the `CameraDragMove` command. Note this is an "unreliable" channel message, so this data may need more data like a "sequence"
type CameraDragMove struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}

// CameraDragStart: The response from the `CameraDragStart` endpoint.
type CameraDragStart struct {
}

// CameraMovement: A type of camera movement applied after certain camera operations
type CameraMovement string

const (
	// CameraMovementVantage: Adjusts the camera position during the camera operation
	CameraMovementVantage CameraMovement = "vantage"
	// CameraMovementNone: Keeps the camera position in place
	CameraMovementNone CameraMovement = "none"
)

// CameraSettings: Camera settings including position, center, fov etc
type CameraSettings struct {
	// Center: Camera's look-at center (center-pos gives viewing vector)
	Center Point3D `json:"center" yaml:"center" schema:"center,required"`
	// FovY: Camera's field-of-view angle (if ortho is false)
	FovY float64 `json:"fov_y" yaml:"fov_y" schema:"fov_y"`
	// Orientation: The Camera's orientation (in the form of a quaternion)
	Orientation Point4D `json:"orientation" yaml:"orientation" schema:"orientation,required"`
	// Ortho: Whether or not the camera is in ortho mode
	Ortho bool `json:"ortho" yaml:"ortho" schema:"ortho,required"`
	// OrthoScale: The camera's ortho scale (derived from viewing distance if ortho is true)
	OrthoScale float64 `json:"ortho_scale" yaml:"ortho_scale" schema:"ortho_scale"`
	// Pos: Camera position (vantage)
	Pos Point3D `json:"pos" yaml:"pos" schema:"pos,required"`
	// Up: Camera's world-space up vector
	Up Point3D `json:"up" yaml:"up" schema:"up,required"`
}

// CameraViewState is the type definition for a CameraViewState.
type CameraViewState struct {
	// EyeOffset:
	EyeOffset float64 `json:"eye_offset" yaml:"eye_offset" schema:"eye_offset,required"`
	// FovY:
	FovY float64 `json:"fov_y" yaml:"fov_y" schema:"fov_y,required"`
	// IsOrtho:
	IsOrtho bool `json:"is_ortho" yaml:"is_ortho" schema:"is_ortho,required"`
	// OrthoScaleEnabled:
	OrthoScaleEnabled bool `json:"ortho_scale_enabled" yaml:"ortho_scale_enabled" schema:"ortho_scale_enabled,required"`
	// OrthoScaleFactor:
	OrthoScaleFactor float64 `json:"ortho_scale_factor" yaml:"ortho_scale_factor" schema:"ortho_scale_factor,required"`
	// PivotPosition: A point in 3D space
	PivotPosition Point3D `json:"pivot_position" yaml:"pivot_position" schema:"pivot_position,required"`
	// PivotRotation: A point in homogeneous (4D) space
	PivotRotation Point4D `json:"pivot_rotation" yaml:"pivot_rotation" schema:"pivot_rotation,required"`
	// WorldCoordSystem:
	WorldCoordSystem WorldCoordinateSystem `json:"world_coord_system" yaml:"world_coord_system" schema:"world_coord_system,required"`
}

// CardDetails: The card details of a payment method.
type CardDetails struct {
	// Brand: Card brand.
	//
	// Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
	Brand string `json:"brand" yaml:"brand" schema:"brand"`
	// Checks: Checks on Card address and CVC if provided.
	Checks PaymentMethodCardChecks `json:"checks" yaml:"checks" schema:"checks"`
	// Country: Two-letter ISO code representing the country of the card.
	Country string `json:"country" yaml:"country" schema:"country"`
	// ExpMonth: Two-digit number representing the card's expiration month.
	ExpMonth int `json:"exp_month" yaml:"exp_month" schema:"exp_month"`
	// ExpYear: Four-digit number representing the card's expiration year.
	ExpYear int `json:"exp_year" yaml:"exp_year" schema:"exp_year"`
	// Fingerprint: Uniquely identifies this particular card number.
	Fingerprint string `json:"fingerprint" yaml:"fingerprint" schema:"fingerprint"`
	// Funding: Card funding type.
	//
	// Can be `credit`, `debit`, `prepaid`, or `unknown`.
	Funding string `json:"funding" yaml:"funding" schema:"funding"`
	// Last4: The last four digits of the card.
	Last4 string `json:"last4" yaml:"last4" schema:"last4"`
}

// CenterOfMass: The center of mass response.
type CenterOfMass struct {
	// CenterOfMass: The center of mass.
	CenterOfMass Point3D `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass,required"`
	// OutputUnit: The output unit for the center of mass.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
}

// ClientMetrics: ClientMetrics contains information regarding the state of the peer.
type ClientMetrics struct {
	// RtcFrameHeight: The height of the inbound video stream in pixels.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-frameheight
	RtcFrameHeight int `json:"rtc_frame_height" yaml:"rtc_frame_height" schema:"rtc_frame_height"`
	// RtcFrameWidth: The width of the inbound video stream in pixels.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-framewidth
	RtcFrameWidth int `json:"rtc_frame_width" yaml:"rtc_frame_width" schema:"rtc_frame_width"`
	// RtcFramesDecoded: Counter of the number of WebRTC frames that the client has decoded from the inbound video stream.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-freezecount
	RtcFramesDecoded int `json:"rtc_frames_decoded" yaml:"rtc_frames_decoded" schema:"rtc_frames_decoded"`
	// RtcFramesDropped: Counter of the number of WebRTC frames the client has dropped from the inbound video stream.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-framesdropped
	RtcFramesDropped int `json:"rtc_frames_dropped" yaml:"rtc_frames_dropped" schema:"rtc_frames_dropped"`
	// RtcFramesPerSecond: Current number of frames being rendered in the last second. A good target is 60 frames per second, but it can fluctuate depending on network conditions.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-freezecount
	RtcFramesPerSecond int `json:"rtc_frames_per_second" yaml:"rtc_frames_per_second" schema:"rtc_frames_per_second"`
	// RtcFramesReceived: Counter of the number of WebRTC frames that the client has received from the inbound video stream.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-freezecount
	RtcFramesReceived int `json:"rtc_frames_received" yaml:"rtc_frames_received" schema:"rtc_frames_received"`
	// RtcFreezeCount: Number of times the inbound video playback has frozen. This is usually due to network conditions.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-freezecount
	RtcFreezeCount int `json:"rtc_freeze_count" yaml:"rtc_freeze_count" schema:"rtc_freeze_count"`
	// RtcJitterSec: Amount of "jitter" in the inbound video stream. Network latency is the time it takes a packet to traverse the network. The amount that the latency varies is the jitter. Video latency is the time it takes to render a frame sent by the server (including network latency). A low jitter means the video latency can be reduced without impacting smooth playback. High jitter means clients will increase video latency to ensure smooth playback.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcreceivedrtpstreamstats-jitter
	RtcJitterSec float64 `json:"rtc_jitter_sec" yaml:"rtc_jitter_sec" schema:"rtc_jitter_sec"`
	// RtcKeyframesDecoded: Number of "key frames" decoded in the inbound h.264 stream. A key frame is an expensive (bandwidth-wise) "full image" of the video frame. Data after the keyframe become -- effectively -- "diff" operations on that key frame. The Engine will only send a keyframe if required, which is an indication that some of the "diffs" have been lost, usually an indication of poor network conditions. We like this metric to understand times when the connection has had to recover.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-keyframesdecoded
	RtcKeyframesDecoded int `json:"rtc_keyframes_decoded" yaml:"rtc_keyframes_decoded" schema:"rtc_keyframes_decoded"`
	// RtcPacketsLost: Amount of packets lost in the inbound video stream.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcreceivedrtpstreamstats-packetslost
	RtcPacketsLost int `json:"rtc_packets_lost" yaml:"rtc_packets_lost" schema:"rtc_packets_lost"`
	// RtcPauseCount: Count of the total number of video pauses experienced by this receiver.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-pausecount
	RtcPauseCount int `json:"rtc_pause_count" yaml:"rtc_pause_count" schema:"rtc_pause_count"`
	// RtcPliCount: Count the total number of Picture Loss Indication (PLI) packets.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-plicount
	RtcPliCount int `json:"rtc_pli_count" yaml:"rtc_pli_count" schema:"rtc_pli_count"`
	// RtcStunRttSec: Total duration of pauses in seconds.
	//
	// This is the "ping" between the client and the STUN server. Not to be confused with the E2E RTT documented [here](https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats-roundtriptime)
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime
	RtcStunRttSec float64 `json:"rtc_stun_rtt_sec" yaml:"rtc_stun_rtt_sec" schema:"rtc_stun_rtt_sec"`
	// RtcTotalFreezesDurationSec: Number of seconds of frozen video the user has been subjected to.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-totalfreezesduration
	RtcTotalFreezesDurationSec float64 `json:"rtc_total_freezes_duration_sec" yaml:"rtc_total_freezes_duration_sec" schema:"rtc_total_freezes_duration_sec"`
	// RtcTotalPausesDurationSec: Count of the total number of video pauses experienced by this receiver.
	//
	// https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-totalpausesduration
	RtcTotalPausesDurationSec float64 `json:"rtc_total_pauses_duration_sec" yaml:"rtc_total_pauses_duration_sec" schema:"rtc_total_pauses_duration_sec"`
}

// ClosePath: The response from the `ClosePath` command.
type ClosePath struct {
	// FaceID: The UUID of the lone face of the resulting solid2D.
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
}

// CodeLanguage: The language code is written in.
// <details><summary>JSON schema</summary>
//
// ```json { "description": "The language code is written in.", "oneOf": [ { "description": "The `go` programming language.", "type": "string", "enum": [ "go" ] }, { "description": "The `python` programming language.", "type": "string", "enum": [ "python" ] }, { "description": "The `node` programming language.", "type": "string", "enum": [ "node" ] } ] } ``` </details>
type CodeLanguage string

const (
	// CodeLanguageGo: The `go` programming language.
	CodeLanguageGo CodeLanguage = "go"
	// CodeLanguagePython: The `python` programming language.
	CodeLanguagePython CodeLanguage = "python"
	// CodeLanguageNode: The `node` programming language.
	CodeLanguageNode CodeLanguage = "node"
)

// CodeOption: Code option for running and verifying kcl.
// <details><summary>JSON schema</summary>
//
// ```json { "title": "CodeOption", "description": "Code option for running and verifying kcl.", "type": "string", "enum": [ "parse", "execute", "cleanup", "mock_execute" ] } ``` </details>
type CodeOption string

const (
	// CodeOptionParse represents the CodeOption `"parse"`.
	CodeOptionParse CodeOption = "parse"
	// CodeOptionExecute represents the CodeOption `"execute"`.
	CodeOptionExecute CodeOption = "execute"
	// CodeOptionCleanup represents the CodeOption `"cleanup"`.
	CodeOptionCleanup CodeOption = "cleanup"
	// CodeOptionMockExecute represents the CodeOption `"mock_execute"`.
	CodeOptionMockExecute CodeOption = "mock_execute"
)

// CodeOutput: Output of the code being executed.
// <details><summary>JSON schema</summary>
//
// ```json { "description": "Output of the code being executed.", "type": "object", "properties": { "output_files": { "description": "The contents of the files requested if they were passed.", "type": "array", "items": { "$ref": "#/components/schemas/OutputFile" } }, "stderr": { "description": "The stderr of the code.", "default": "", "type": "string" }, "stdout": { "description": "The stdout of the code.", "default": "", "type": "string" } } } ``` </details>
type CodeOutput struct {
	// OutputFiles: The contents of the files requested if they were passed.
	OutputFiles []OutputFile `json:"output_files" yaml:"output_files" schema:"output_files"`
	// Stderr: The stderr of the code.
	Stderr string `json:"stderr" yaml:"stderr" schema:"stderr"`
	// Stdout: The stdout of the code.
	Stdout string `json:"stdout" yaml:"stdout" schema:"stdout"`
}

// Color: An RGBA color
type Color struct {
	// A: Alpha
	A float64 `json:"a" yaml:"a" schema:"a,required"`
	// B: Blue
	B float64 `json:"b" yaml:"b" schema:"b,required"`
	// G: Green
	G float64 `json:"g" yaml:"g" schema:"g,required"`
	// R: Red
	R float64 `json:"r" yaml:"r" schema:"r,required"`
}

// ComplementaryEdges: Struct to contain the edge information of a wall of an extrude/rotate/loft/sweep.
type ComplementaryEdges struct {
	// AdjacentIds: Every edge that shared one common vertex with the original edge.
	AdjacentIds []UUID `json:"adjacent_ids" yaml:"adjacent_ids" schema:"adjacent_ids,required"`
	// OppositeID: The opposite edge has no common vertices with the original edge. A wall may not have an opposite edge (i.e. a revolve that touches the axis of rotation).
	OppositeID UUID `json:"opposite_id" yaml:"opposite_id" schema:"opposite_id"`
}

// ComponentTransform: Container that holds a translate, rotate and scale. Defaults to no change, everything stays the same (i.e. the identity function).
type ComponentTransform struct {
	// RotateAngleAxis: Rotate component of the transform. The rotation is specified as an axis and an angle (xyz are the components of the axis, w is the angle in degrees).
	RotateAngleAxis TransformByForPoint4D `json:"rotate_angle_axis" yaml:"rotate_angle_axis" schema:"rotate_angle_axis"`
	// RotateRpy: Rotate component of the transform. The rotation is specified as a roll, pitch, yaw.
	RotateRpy TransformByForPoint3D `json:"rotate_rpy" yaml:"rotate_rpy" schema:"rotate_rpy"`
	// Scale: Scale component of the transform.
	Scale TransformByForPoint3D `json:"scale" yaml:"scale" schema:"scale"`
	// Translate: Translate component of the transform.
	Translate TransformByForPoint3D `json:"translate" yaml:"translate" schema:"translate"`
}

// ConversionParams: Describes the file to convert (src) and what it should be converted into (output).
type ConversionParams struct {
	// OutputFormat: Describes the output file(s).
	OutputFormat any `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// SrcFormat: Describes the input file(s).
	SrcFormat any `json:"src_format" yaml:"src_format" schema:"src_format,required"`
}

// Coupon: The resource representing a Coupon.
type Coupon struct {
	// AmountOff: Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
	AmountOff float64 `json:"amount_off" yaml:"amount_off" schema:"amount_off"`
	// Deleted: Always true for a deleted object.
	Deleted bool `json:"deleted" yaml:"deleted" schema:"deleted"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Name: Name of the coupon displayed to customers on, for instance invoices, or receipts.
	//
	// By default the `id` is shown if `name` is not set.
	Name string `json:"name" yaml:"name" schema:"name"`
	// PercentOff: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon.
	//
	// For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
	PercentOff float64 `json:"percent_off" yaml:"percent_off" schema:"percent_off"`
}

// CreateShortlinkRequest: Request to create a shortlink.
type CreateShortlinkRequest struct {
	// Password: The password for the shortlink, if you want to restrict access to it. This can only be set if your subscription allows for it. Otherwise, it will return an error. When you access the link it will be required to enter this password through basic auth. The username will be `{anything}` and the password will be the password you set here.
	Password string `json:"password" yaml:"password" schema:"password"`
	// RestrictToOrg: If the shortlink should be restricted to the user's organization to view. This only applies to org shortlinks. If you are creating a user shortlink and you are not a member of a team or enterprise and you try to set this to true, it will fail.
	RestrictToOrg bool `json:"restrict_to_org" yaml:"restrict_to_org" schema:"restrict_to_org"`
	// Url: The URL to redirect back to.
	Url URL `json:"url" yaml:"url" schema:"url,required"`
}

// CreateShortlinkResponse: Response from creating a shortlink.
type CreateShortlinkResponse struct {
	// Key: The key for this url. This is what you use to update or delete the specific shortlink.
	Key string `json:"key" yaml:"key" schema:"key,required"`
	// Url: The shortened url.
	Url URL `json:"url" yaml:"url" schema:"url,required"`
}

// CreatedAtSortMode: Supported set of sort modes for scanning by created_at only.
// Currently, we only support scanning in ascending order.
type CreatedAtSortMode string

const (
	// CreatedAtSortModeCreatedAtAscending: Sort in increasing order of "created_at".
	CreatedAtSortModeCreatedAtAscending CreatedAtSortMode = "created_at_ascending"
	// CreatedAtSortModeCreatedAtDescending: Sort in decreasing order of "created_at".
	CreatedAtSortModeCreatedAtDescending CreatedAtSortMode = "created_at_descending"
)

// CrmData: The data for subscribing a user to the newsletter.
type CrmData struct {
	// CadIndustry: The industry of the user.
	CadIndustry string `json:"cad_industry" yaml:"cad_industry" schema:"cad_industry"`
	// CadUserType: The user type.
	CadUserType string `json:"cad_user_type" yaml:"cad_user_type" schema:"cad_user_type"`
	// NumberOfCadUsers: The user count of the user.
	NumberOfCadUsers string `json:"number_of_cad_users" yaml:"number_of_cad_users" schema:"number_of_cad_users"`
}

// CurveGetControlPoints: The response from the `CurveGetControlPoints` command.
type CurveGetControlPoints struct {
	// ControlPoints: Control points in the curve.
	ControlPoints []Point3D `json:"control_points" yaml:"control_points" schema:"control_points,required"`
}

// CurveGetEndPoints: Endpoints of a curve
type CurveGetEndPoints struct {
	// End: End
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
	// Start: Start
	Start Point3D `json:"start" yaml:"start" schema:"start,required"`
}

// CurveGetType: The response from the `CurveGetType` command.
type CurveGetType struct {
	// CurveType: Curve type
	CurveType CurveType `json:"curve_type" yaml:"curve_type" schema:"curve_type,required"`
}

// CurveSetConstraint: The response from the `CurveSetConstraint` endpoint.
type CurveSetConstraint struct {
}

// CurveType: The type of Curve (embedded within path)
type CurveType string

const (
	// CurveTypeLine represents the CurveType `"line"`.
	CurveTypeLine CurveType = "line"
	// CurveTypeArc represents the CurveType `"arc"`.
	CurveTypeArc CurveType = "arc"
	// CurveTypeNurbs represents the CurveType `"nurbs"`.
	CurveTypeNurbs CurveType = "nurbs"
)

// Customer: The resource representing a payment "Customer".
type Customer struct {
	// Address: The customer's address.
	Address AddressDetails `json:"address" yaml:"address" schema:"address"`
	// Balance: Current balance, if any, being stored on the customer in the payments service.
	//
	// If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
	Balance float64 `json:"balance" yaml:"balance" schema:"balance"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.
	Currency string `json:"currency" yaml:"currency" schema:"currency"`
	// Delinquent: When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed.
	//
	// When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.  If an invoice is marked uncollectible by dunning, `delinquent` doesn't get reset to `false`.
	Delinquent bool `json:"delinquent" yaml:"delinquent" schema:"delinquent"`
	// Email: The customer's email address.
	Email string `json:"email" yaml:"email" schema:"email"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Name: The customer's full name or business name.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The customer's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// CustomerBalance: A balance for a customer.
// This holds information about the financial balance for the customer.
type CustomerBalance struct {
	// CreatedAt: The date and time the balance was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the balance.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MapID: The mapping id of the user or org.
	MapID UUID `json:"map_id" yaml:"map_id" schema:"map_id,required"`
	// ModelingAppEnterprisePrice: The enterprise price for the Modeling App subscription, if they are on the enterprise plan.
	ModelingAppEnterprisePrice any `json:"modeling_app_enterprise_price" yaml:"modeling_app_enterprise_price" schema:"modeling_app_enterprise_price"`
	// MonthlyAPICreditsRemaining: The number of monthly API credits remaining in the balance. This is the number of credits remaining in the balance.
	//
	// Both the monetary value and the number of credits are returned, but they reflect the same value in the database.
	MonthlyAPICreditsRemaining int `json:"monthly_api_credits_remaining" yaml:"monthly_api_credits_remaining" schema:"monthly_api_credits_remaining,required"`
	// MonthlyAPICreditsRemainingMonetaryValue: The monetary value of the monthly API credits remaining in the balance. This gets re-upped every month, but if the credits are not used for a month they do not carry over to the next month.
	//
	// Both the monetary value and the number of credits are returned, but they reflect the same value in the database.
	MonthlyAPICreditsRemainingMonetaryValue float64 `json:"monthly_api_credits_remaining_monetary_value" yaml:"monthly_api_credits_remaining_monetary_value" schema:"monthly_api_credits_remaining_monetary_value,required"`
	// StableAPICreditsRemaining: The number of stable API credits remaining in the balance. These do not get reset or re-upped every month. This is separate from the monthly credits. Credits will first pull from the monthly credits, then the stable credits. Stable just means that they do not get reset every month. A user will have stable credits if a Zoo employee granted them credits.
	//
	// Both the monetary value and the number of credits are returned, but they reflect the same value in the database.
	StableAPICreditsRemaining int `json:"stable_api_credits_remaining" yaml:"stable_api_credits_remaining" schema:"stable_api_credits_remaining,required"`
	// StableAPICreditsRemainingMonetaryValue: The monetary value of stable API credits remaining in the balance. These do not get reset or re-upped every month. This is separate from the monthly credits. Credits will first pull from the monthly credits, then the stable credits. Stable just means that they do not get reset every month. A user will have stable credits if a Zoo employee granted them credits.
	//
	// Both the monetary value and the number of credits are returned, but they reflect the same value in the database.
	StableAPICreditsRemainingMonetaryValue float64 `json:"stable_api_credits_remaining_monetary_value" yaml:"stable_api_credits_remaining_monetary_value" schema:"stable_api_credits_remaining_monetary_value,required"`
	// SubscriptionDetails: Details about the subscription.
	SubscriptionDetails ZooProductSubscriptions `json:"subscription_details" yaml:"subscription_details" schema:"subscription_details"`
	// SubscriptionID: The subscription ID for the user.
	SubscriptionID string `json:"subscription_id" yaml:"subscription_id" schema:"subscription_id"`
	// TotalDue: This includes any outstanding, draft, or open invoices and any pending invoice items. This does not include any credits the customer has on their account. This amount is only returned if requested from the api.
	TotalDue float64 `json:"total_due" yaml:"total_due" schema:"total_due"`
	// UpdatedAt: The date and time the balance was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// CutStrategy: What strategy (algorithm) should be used for cutting? Defaults to Automatic.
type CutStrategy string

const (
	// CutStrategyBasic: Basic fillet cut. This has limitations, like the filletted edges can't touch each other. But it's very fast and simple.
	CutStrategyBasic CutStrategy = "basic"
	// CutStrategyCsg: More complicated fillet cut. It works for more use-cases, like edges that touch each other. But it's slower than the Basic method.
	CutStrategyCsg CutStrategy = "csg"
	// CutStrategyAutomatic: Tries the Basic method, and if that doesn't work, tries the CSG strategy.
	CutStrategyAutomatic CutStrategy = "automatic"
)

// CutType: What kind of cut to do
type CutType string

const (
	// CutTypeFillet: Round off an edge.
	CutTypeFillet CutType = "fillet"
	// CutTypeChamfer: Cut away an edge.
	CutTypeChamfer CutType = "chamfer"
)

// Data is the type definition for a Data.
type Data struct {
	// Name: Instance name. This may or may not mean something.
	Name string `json:"name" yaml:"name" schema:"name,required"`
}

// DefaultCameraCenterToScene: The response from the `DefaultCameraCenterToScene` endpoint.
type DefaultCameraCenterToScene struct {
}

// DefaultCameraCenterToSelection: The response from the `DefaultCameraCenterToSelection` endpoint.
type DefaultCameraCenterToSelection struct {
}

// DefaultCameraFocusOn: The response from the `DefaultCameraFocusOn` command.
type DefaultCameraFocusOn struct {
}

// DefaultCameraGetSettings: The response from the `DefaultCameraGetSettings` command.
type DefaultCameraGetSettings struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}

// DefaultCameraGetView: The response from the `DefaultCameraGetView` command.
type DefaultCameraGetView struct {
	// View: Camera view state
	View CameraViewState `json:"view" yaml:"view" schema:"view,required"`
}

// DefaultCameraLookAt: The response from the `DefaultCameraLookAt` endpoint.
type DefaultCameraLookAt struct {
}

// DefaultCameraPerspectiveSettings: The response from the `DefaultCameraPerspectiveSettings` endpoint.
type DefaultCameraPerspectiveSettings struct {
}

// DefaultCameraSetOrthographic: The response from the `DefaultCameraSetOrthographic` endpoint.
type DefaultCameraSetOrthographic struct {
}

// DefaultCameraSetPerspective: The response from the `DefaultCameraSetPerspective` endpoint.
type DefaultCameraSetPerspective struct {
}

// DefaultCameraSetView: The response from the `DefaultCameraSetView` command.
type DefaultCameraSetView struct {
}

// DefaultCameraZoom: The response from the `DefaultCameraZoom` command.
type DefaultCameraZoom struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}

// Density: The density response.
type Density struct {
	// Density: The density.
	Density float64 `json:"density" yaml:"density" schema:"density,required"`
	// OutputUnit: The output unit for the density.
	OutputUnit UnitDensity `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
}

// DerEncodedKeyPair: The DER encoded key pair.
type DerEncodedKeyPair struct {
	// PrivateKey: The request signing private key (pem file).
	PrivateKey Base64 `json:"private_key" yaml:"private_key" schema:"private_key,required"`
	// PublicCert: The request signing public certificate (pem file).
	PublicCert Base64 `json:"public_cert" yaml:"public_cert" schema:"public_cert,required"`
}

// DeviceAccessTokenRequestForm: The form for a device access token request.
type DeviceAccessTokenRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
	// DeviceCode: The device code.
	DeviceCode UUID `json:"device_code" yaml:"device_code" schema:"device_code,required"`
	// GrantType: The grant type.
	GrantType Oauth2GrantType `json:"grant_type" yaml:"grant_type" schema:"grant_type,required"`
}

// DeviceAuthConfirmParams: The request parameters to confirm the `user_code` for the OAuth 2.0 Device Authorization Grant.
type DeviceAuthConfirmParams struct {
	// UserCode: The user code.
	UserCode string `json:"user_code" yaml:"user_code" schema:"user_code,required"`
}

// DeviceAuthRequestForm: The request parameters for the OAuth 2.0 Device Authorization Grant flow.
type DeviceAuthRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
}

// Direction: Specifies the sign of a co-ordinate axis.
type Direction string

const (
	// DirectionPositive: Increasing numbers.
	DirectionPositive Direction = "positive"
	// DirectionNegative: Decreasing numbers.
	DirectionNegative Direction = "negative"
)

// DisableDryRun: The response from the `DisableDryRun` endpoint.
type DisableDryRun struct {
}

// Discount: The resource representing a Discount.
type Discount struct {
	// Coupon: The coupon that applied to create this discount.
	Coupon Coupon `json:"coupon" yaml:"coupon" schema:"coupon,required"`
}

// DiscountCode: A discount code for a store.
type DiscountCode struct {
	// Code: The code for the discount.
	Code string `json:"code" yaml:"code" schema:"code,required"`
	// ExpiresAt: The date the discount code expires.
	ExpiresAt Time `json:"expires_at" yaml:"expires_at" schema:"expires_at"`
	// PercentOff: The percent off for the discount.
	PercentOff int `json:"percent_off" yaml:"percent_off" schema:"percent_off,required"`
}

// DistanceTypeAxis: The distance between objects along the specified axis
type DistanceTypeAxis struct {
	// Axis: Global axis
	Axis GlobalAxi `json:"axis" yaml:"axis" schema:"axis,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// DistanceTypeEuclidean: Euclidean Distance.
type DistanceTypeEuclidean struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// DxfStorage: Export storage.
type DxfStorage string

const (
	// DxfStorageAscii: Plaintext encoding.
	//
	// This is the default setting.
	DxfStorageAscii DxfStorage = "ascii"
	// DxfStorageBinary: Binary encoding.
	DxfStorageBinary DxfStorage = "binary"
)

// EdgeInfo: A list of faces for a specific edge.
type EdgeInfo struct {
	// EdgeID: The UUID of the id.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// Faces: The faces of each edge.
	Faces []UUID `json:"faces" yaml:"faces" schema:"faces,required"`
}

// EdgeLinesVisible: The response from the `EdgeLinesVisible` endpoint.
type EdgeLinesVisible struct {
}

// EmailAuthenticationForm: The body of the form for email authentication.
type EmailAuthenticationForm struct {
	// CallbackUrl: The URL to redirect back to after we have authenticated.
	CallbackUrl URL `json:"callback_url" yaml:"callback_url" schema:"callback_url"`
	// Email: The user's email.
	Email string `json:"email" yaml:"email" schema:"email,required"`
}

// EnableDryRun: The response from the `EnableDryRun` endpoint.
type EnableDryRun struct {
}

// EnableSketchMode: The response from the `EnableSketchMode` endpoint.
type EnableSketchMode struct {
}

// EngineUtilEvaluatePath: The response of the `EngineUtilEvaluatePath` endpoint
type EngineUtilEvaluatePath struct {
	// Pos: The evaluated path curve position
	Pos Point3D `json:"pos" yaml:"pos" schema:"pos,required"`
}

// EnterpriseSubscriptionTierPriceInterval: A flat price that we publicly list.
type EnterpriseSubscriptionTierPriceInterval struct {
	// Interval: The interval the price is charged.
	Interval PlanInterval `json:"interval" yaml:"interval" schema:"interval,required"`
	// Price: The price.
	Price float64 `json:"price" yaml:"price" schema:"price,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// EnterpriseSubscriptionTierPricePrice: A per user price that we publicly list.
type EnterpriseSubscriptionTierPricePrice struct {
	// Interval: The interval the price is charged.
	Interval PlanInterval `json:"interval" yaml:"interval" schema:"interval,required"`
	// Price: The price.
	Price float64 `json:"price" yaml:"price" schema:"price,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// EntityCircularPattern: The response from the `EntityCircularPattern` command.
type EntityCircularPattern struct {
	// EntityFaceEdgeIds: The Face, edge, and entity ids of the patterned entities.
	EntityFaceEdgeIds []FaceEdgeInfo `json:"entity_face_edge_ids" yaml:"entity_face_edge_ids" schema:"entity_face_edge_ids"`
}

// EntityClone: The response from the `EntityClone` command.
type EntityClone struct {
	// FaceEdgeIds: The Face and Edge Ids of the cloned entity.
	FaceEdgeIds []FaceEdgeInfo `json:"face_edge_ids" yaml:"face_edge_ids" schema:"face_edge_ids"`
}

// EntityFade: The response from the `EntityFade` endpoint.
type EntityFade struct {
}

// EntityGetAllChildUuids: The response from the `EntityGetAllChildUuids` command.
type EntityGetAllChildUuids struct {
	// EntityIds: The UUIDs of the child entities.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// EntityGetChildUuid: The response from the `EntityGetChildUuid` command.
type EntityGetChildUuid struct {
	// EntityID: The UUID of the child entity.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
}

// EntityGetDistance: The response from the `EntitiesGetDistance` command.
type EntityGetDistance struct {
	// MaxDistance: The maximum distance between the input entities.
	MaxDistance float64 `json:"max_distance" yaml:"max_distance" schema:"max_distance,required"`
	// MinDistance: The minimum distance between the input entities.
	MinDistance float64 `json:"min_distance" yaml:"min_distance" schema:"min_distance,required"`
}

// EntityGetNumChildren: The response from the `EntityGetNumChildren` command.
type EntityGetNumChildren struct {
	// Num: The number of children the entity has.
	Num int `json:"num" yaml:"num" schema:"num,required"`
}

// EntityGetParentID: The response from the `EntityGetParentId` command.
type EntityGetParentID struct {
	// EntityID: The UUID of the parent entity.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
}

// EntityGetSketchPaths: The response from the `EntityGetSketchPaths` command.
type EntityGetSketchPaths struct {
	// EntityIds: The UUIDs of the sketch paths.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// EntityLinearPattern: The response from the `EntityLinearPattern` command.
type EntityLinearPattern struct {
	// EntityFaceEdgeIds: The Face, edge, and entity ids of the patterned entities.
	EntityFaceEdgeIds []FaceEdgeInfo `json:"entity_face_edge_ids" yaml:"entity_face_edge_ids" schema:"entity_face_edge_ids"`
}

// EntityLinearPatternTransform: The response from the `EntityLinearPatternTransform` command.
type EntityLinearPatternTransform struct {
	// EntityFaceEdgeIds: The Face, edge, and entity ids of the patterned entities.
	EntityFaceEdgeIds []FaceEdgeInfo `json:"entity_face_edge_ids" yaml:"entity_face_edge_ids" schema:"entity_face_edge_ids"`
}

// EntityMakeHelix: The response from the `EntityMakeHelix` endpoint.
type EntityMakeHelix struct {
}

// EntityMakeHelixFromEdge: The response from the `EntityMakeHelixFromEdge` endpoint.
type EntityMakeHelixFromEdge struct {
}

// EntityMakeHelixFromParams: The response from the `EntityMakeHelixFromParams` endpoint.
type EntityMakeHelixFromParams struct {
}

// EntityMirror: The response from the `EntityMirror` endpoint.
type EntityMirror struct {
	// EntityFaceEdgeIds: The Face, edge, and entity ids of the patterned entities.
	EntityFaceEdgeIds []FaceEdgeInfo `json:"entity_face_edge_ids" yaml:"entity_face_edge_ids" schema:"entity_face_edge_ids"`
}

// EntityMirrorAcrossEdge: The response from the `EntityMirrorAcrossEdge` endpoint.
type EntityMirrorAcrossEdge struct {
	// EntityFaceEdgeIds: The Face, edge, and entity ids of the patterned entities.
	EntityFaceEdgeIds []FaceEdgeInfo `json:"entity_face_edge_ids" yaml:"entity_face_edge_ids" schema:"entity_face_edge_ids"`
}

// EntitySetOpacity: The response from the `EntitySetOpacity` endpoint.
type EntitySetOpacity struct {
}

// EntityType: The type of entity
type EntityType string

const (
	// EntityTypeEntity represents the EntityType `"entity"`.
	EntityTypeEntity EntityType = "entity"
	// EntityTypeObject represents the EntityType `"object"`.
	EntityTypeObject EntityType = "object"
	// EntityTypePath represents the EntityType `"path"`.
	EntityTypePath EntityType = "path"
	// EntityTypeCurve represents the EntityType `"curve"`.
	EntityTypeCurve EntityType = "curve"
	// EntityTypeSolid2D represents the EntityType `"solid2d"`.
	EntityTypeSolid2D EntityType = "solid2d"
	// EntityTypeSolid3D represents the EntityType `"solid3d"`.
	EntityTypeSolid3D EntityType = "solid3d"
	// EntityTypeEdge represents the EntityType `"edge"`.
	EntityTypeEdge EntityType = "edge"
	// EntityTypeFace represents the EntityType `"face"`.
	EntityTypeFace EntityType = "face"
	// EntityTypePlane represents the EntityType `"plane"`.
	EntityTypePlane EntityType = "plane"
	// EntityTypeVertex represents the EntityType `"vertex"`.
	EntityTypeVertex EntityType = "vertex"
)

// Error: Error information from a response.
type Error struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}

// ErrorCode: The type of error sent by the KittyCAD API.
type ErrorCode string

const (
	// ErrorCodeInternalEngine: Graphics engine failed to complete request, consider retrying
	ErrorCodeInternalEngine ErrorCode = "internal_engine"
	// ErrorCodeInternalAPI: API failed to complete request, consider retrying
	ErrorCodeInternalAPI ErrorCode = "internal_api"
	// ErrorCodeBadRequest: User requested something geometrically or graphically impossible. Don't retry this request, as it's inherently impossible. Instead, read the error message and change your request.
	ErrorCodeBadRequest ErrorCode = "bad_request"
	// ErrorCodeAuthTokenMissing: Auth token is missing from the request
	ErrorCodeAuthTokenMissing ErrorCode = "auth_token_missing"
	// ErrorCodeAuthTokenInvalid: Auth token is invalid in some way (expired, incorrect format, etc)
	ErrorCodeAuthTokenInvalid ErrorCode = "auth_token_invalid"
	// ErrorCodeInvalidJson: Client sent invalid JSON.
	ErrorCodeInvalidJson ErrorCode = "invalid_json"
	// ErrorCodeInvalidBson: Client sent invalid BSON.
	ErrorCodeInvalidBson ErrorCode = "invalid_bson"
	// ErrorCodeWrongProtocol: Client sent a message which is not accepted over this protocol.
	ErrorCodeWrongProtocol ErrorCode = "wrong_protocol"
	// ErrorCodeConnectionProblem: Problem sending data between client and KittyCAD API.
	ErrorCodeConnectionProblem ErrorCode = "connection_problem"
	// ErrorCodeMessageTypeNotAccepted: Client sent a Websocket message type which the KittyCAD API does not handle.
	ErrorCodeMessageTypeNotAccepted ErrorCode = "message_type_not_accepted"
	// ErrorCodeMessageTypeNotAcceptedForWebRTC: Client sent a Websocket message intended for WebRTC but it was configured as a WebRTC connection.
	ErrorCodeMessageTypeNotAcceptedForWebRTC ErrorCode = "message_type_not_accepted_for_web_r_t_c"
)

// Event: An event related to modeling app files
type Event struct {
	// AttachmentUri: Attachment URI for where the attachment is stored.
	AttachmentUri string `json:"attachment_uri" yaml:"attachment_uri" schema:"attachment_uri"`
	// CreatedAt: Time this event was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// EventType: The specific event type from the modeling app.
	EventType ModelingAppEventType `json:"event_type" yaml:"event_type" schema:"event_type,required"`
	// LastCompiledAt: Time the associated attachment was last compiled.
	LastCompiledAt Time `json:"last_compiled_at" yaml:"last_compiled_at" schema:"last_compiled_at"`
	// ProjectDescription: Project descriptino as given by the user.
	ProjectDescription string `json:"project_description" yaml:"project_description" schema:"project_description"`
	// ProjectName: Project name as given by the user.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name,required"`
	// SourceID: The source app for this event, uuid that is unique to the app.
	SourceID UUID `json:"source_id" yaml:"source_id" schema:"source_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UserID: An anonymous user id generated client-side.
	UserID string `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// Export: The response from the `Export` endpoint.
type Export struct {
	// Files: The files that were exported.
	Files []ExportFile `json:"files" yaml:"files" schema:"files,required"`
}

// Export2D: The response from the `Export2d` endpoint.
type Export2D struct {
	// Files: The files that were exported.
	Files []ExportFile `json:"files" yaml:"files" schema:"files,required"`
}

// Export3D: The response from the `Export3d` endpoint.
type Export3D struct {
	// Files: The files that were exported.
	Files []ExportFile `json:"files" yaml:"files" schema:"files,required"`
}

// ExportFile: A file to be exported to the client.
type ExportFile struct {
	// Contents: The contents of the file, base64 encoded.
	Contents Base64 `json:"contents" yaml:"contents" schema:"contents,required"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name,required"`
}

// ExtendPath: The response from the `ExtendPath` endpoint.
type ExtendPath struct {
}

// ExtendedUser: Extended user information.
// This is mostly used for internal purposes. It returns a mapping of the user's information, including that of our third party services we use for users: Stripe
type ExtendedUser struct {
	// Block: If the user should be blocked and the reason why.
	Block BlockReason `json:"block" yaml:"block" schema:"block"`
	// CanTrainOnData: If we can train on the user's data. If the user is a member of an organization, the organization's setting will override this.
	CanTrainOnData bool `json:"can_train_on_data" yaml:"can_train_on_data" schema:"can_train_on_data"`
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// DeletionScheduled: If the user is scheduled for deletion
	DeletionScheduled bool `json:"deletion_scheduled" yaml:"deletion_scheduled" schema:"deletion_scheduled"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// HubspotContactID: The user's Hubspot ID. This is mostly used for internal mapping.
	HubspotContactID string `json:"hubspot_contact_id" yaml:"hubspot_contact_id" schema:"hubspot_contact_id"`
	// ID: The unique identifier for the user.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// IsOnboarded: If the user has finished onboarding.
	IsOnboarded bool `json:"is_onboarded" yaml:"is_onboarded" schema:"is_onboarded"`
	// IsServiceAccount: If the user is tied to a service account.
	IsServiceAccount bool `json:"is_service_account" yaml:"is_service_account" schema:"is_service_account"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// StripeID: The user's Stripe ID. This is mostly used for internal mapping.
	StripeID string `json:"stripe_id" yaml:"stripe_id" schema:"stripe_id"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ExtendedUserResultsPage: A single page of results
type ExtendedUserResultsPage struct {
	// Items: list of items on this page of results
	Items []ExtendedUser `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// Extrude: The response from the `Extrude` endpoint.
type Extrude struct {
}

// ExtrudeMethod: Extrusion method determining if the extrusion will be part of the existing object or an entirely new object.
type ExtrudeMethod string

const (
	// ExtrudeMethodNew: Create a new object that is not connected to the object it is extruded from. This will result in two objects after the operation.
	ExtrudeMethodNew ExtrudeMethod = "new"
	// ExtrudeMethodMerge: This extrusion will be part of object it is extruded from. This will result in one object after the operation.
	ExtrudeMethodMerge ExtrudeMethod = "merge"
)

// ExtrudedFaceInfo: IDs for the extruded faces.
type ExtrudedFaceInfo struct {
	// Bottom: The face made from the original 2D shape being extruded. If the solid is extruded from a shape which already has an ID (e.g. extruding something which was sketched on a face), this doesn't need to be sent.
	Bottom UUID `json:"bottom" yaml:"bottom" schema:"bottom"`
	// Sides: Any intermediate sides between the top and bottom.
	Sides []SideFace `json:"sides" yaml:"sides" schema:"sides,required"`
	// Top: Top face of the extrusion (parallel and further away from the original 2D shape being extruded).
	Top UUID `json:"top" yaml:"top" schema:"top,required"`
}

// ExtrusionFaceCapType: Possible types of faces which can be extruded from a 3D solid.
type ExtrusionFaceCapType string

const (
	// ExtrusionFaceCapTypeNone: Uncapped.
	ExtrusionFaceCapTypeNone ExtrusionFaceCapType = "none"
	// ExtrusionFaceCapTypeTop: Capped on top.
	ExtrusionFaceCapTypeTop ExtrusionFaceCapType = "top"
	// ExtrusionFaceCapTypeBottom: Capped below.
	ExtrusionFaceCapTypeBottom ExtrusionFaceCapType = "bottom"
	// ExtrusionFaceCapTypeBoth: Capped on both ends.
	ExtrusionFaceCapTypeBoth ExtrusionFaceCapType = "both"
)

// ExtrusionFaceInfo: Extrusion face info struct (useful for maintaining mappings between source path segment ids and extrusion faces)
type ExtrusionFaceInfo struct {
	// Cap: Whether or not this extrusion face is a top/bottom cap face or not. Note that top/bottom cap faces will not have associated curve IDs.
	Cap ExtrusionFaceCapType `json:"cap" yaml:"cap" schema:"cap,required"`
	// CurveID: Path component (curve) UUID.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id"`
	// FaceID: Face uuid.
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id"`
}

// FaceEdgeInfo: Faces and edges id info (most used in identifying geometry in patterned and mirrored objects).
type FaceEdgeInfo struct {
	// Edges: The edges of each object.
	Edges []UUID `json:"edges" yaml:"edges" schema:"edges,required"`
	// Faces: The faces of each object.
	Faces []UUID `json:"faces" yaml:"faces" schema:"faces,required"`
	// ObjectID: The UUID of the object.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
}

// FaceGetCenter: The 3D center of mass on the surface
type FaceGetCenter struct {
	// Pos: The 3D position on the surface center of mass
	Pos Point3D `json:"pos" yaml:"pos" schema:"pos,required"`
}

// FaceGetGradient: The gradient (dFdu, dFdv) + normal vector on a brep face
type FaceGetGradient struct {
	// DfDu: dFdu
	DfDu Point3D `json:"df_du" yaml:"df_du" schema:"df_du,required"`
	// DfDv: dFdv
	DfDv Point3D `json:"df_dv" yaml:"df_dv" schema:"df_dv,required"`
	// Normal: Normal (||dFdu x dFdv||)
	Normal Point3D `json:"normal" yaml:"normal" schema:"normal,required"`
}

// FaceGetPosition: The 3D position on the surface that was evaluated
type FaceGetPosition struct {
	// Pos: The 3D position on the surface that was evaluated
	Pos Point3D `json:"pos" yaml:"pos" schema:"pos,required"`
}

// FaceIsPlanar: Surface-local planar axes (if available)
type FaceIsPlanar struct {
	// Origin: plane's origin
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin"`
	// XAxis: plane's local x-axis
	XAxis Point3D `json:"x_axis" yaml:"x_axis" schema:"x_axis"`
	// YAxis: plane's local y-axis
	YAxis Point3D `json:"y_axis" yaml:"y_axis" schema:"y_axis"`
	// ZAxis: plane's local z-axis (normal)
	ZAxis Point3D `json:"z_axis" yaml:"z_axis" schema:"z_axis"`
}

// FailureWebSocketResponse: Unsuccessful Websocket response.
type FailureWebSocketResponse struct {
	// Errors: The errors that occurred.
	Errors []APIError `json:"errors" yaml:"errors" schema:"errors,required"`
	// RequestID: Which request this is a response to. If the request was a modeling command, this is the modeling command ID. If no request ID was sent, this will be null.
	RequestID UUID `json:"request_id" yaml:"request_id" schema:"request_id"`
	// Success: Always false
	Success bool `json:"success" yaml:"success" schema:"success,required"`
}

// FbxStorage: Describes the storage format of an FBX file.
type FbxStorage string

const (
	// FbxStorageAscii: ASCII FBX encoding.
	FbxStorageAscii FbxStorage = "ascii"
	// FbxStorageBinary: Binary FBX encoding.
	FbxStorageBinary FbxStorage = "binary"
)

// FileCenterOfMass: A file center of mass result.
type FileCenterOfMass struct {
	// CenterOfMass: The resulting center of mass.
	CenterOfMass Point3D `json:"center_of_mass" yaml:"center_of_mass" schema:"center_of_mass"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the center of mass.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// FileConversion: A file conversion.
type FileConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputFormat: The output format of the file conversion.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// OutputFormatOptions: The output format options of the file conversion.
	OutputFormatOptions any `json:"output_format_options" yaml:"output_format_options" schema:"output_format_options"`
	// Outputs: The converted files (if multiple file conversion), if completed, base64 encoded. The key of the map is the path of the output file.
	Outputs map[string]Base64 `json:"outputs" yaml:"outputs" schema:"outputs"`
	// SrcFormat: The source format of the file conversion.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// SrcFormatOptions: The source format options of the file conversion.
	SrcFormatOptions any `json:"src_format_options" yaml:"src_format_options" schema:"src_format_options"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// FileDensity: A file density result.
type FileDensity struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Density: The resulting density.
	Density float64 `json:"density" yaml:"density" schema:"density"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// MaterialMass: The material mass as denoted by the user.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass"`
	// MaterialMassUnit: The material mass unit.
	MaterialMassUnit UnitMas `json:"material_mass_unit" yaml:"material_mass_unit" schema:"material_mass_unit,required"`
	// OutputUnit: The output unit for the density.
	OutputUnit UnitDensity `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// FileExportFormat: The valid types of output file formats.
type FileExportFormat string

const (
	// FileExportFormatFbx: Autodesk Filmbox (FBX) format. <https://en.wikipedia.org/wiki/FBX>
	FileExportFormatFbx FileExportFormat = "fbx"
	// FileExportFormatGlb: Binary glTF 2.0.
	//
	// This is a single binary with .glb extension.
	//
	// This is better if you want a compressed format as opposed to the human readable glTF that lacks compression.
	FileExportFormatGlb FileExportFormat = "glb"
	// FileExportFormatGltf: glTF 2.0. Embedded glTF 2.0 (pretty printed).
	//
	// Single JSON file with .gltf extension binary data encoded as base64 data URIs.
	//
	// The JSON contents are pretty printed.
	//
	// It is human readable, single file, and you can view the diff easily in a git commit.
	FileExportFormatGltf FileExportFormat = "gltf"
	// FileExportFormatObj: The OBJ file format. <https://en.wikipedia.org/wiki/Wavefront_.obj_file> It may or may not have an an attached material (mtl // mtllib) within the file, but we interact with it as if it does not.
	FileExportFormatObj FileExportFormat = "obj"
	// FileExportFormatPly: The PLY file format. <https://en.wikipedia.org/wiki/PLY_(file_format)>
	FileExportFormatPly FileExportFormat = "ply"
	// FileExportFormatStep: The STEP file format. <https://en.wikipedia.org/wiki/ISO_10303-21>
	FileExportFormatStep FileExportFormat = "step"
	// FileExportFormatStl: The STL file format. <https://en.wikipedia.org/wiki/STL_(file_format)>
	FileExportFormatStl FileExportFormat = "stl"
)

// FileImportFormat: The valid types of source file formats.
type FileImportFormat string

const (
	// FileImportFormatFbx: Autodesk Filmbox (FBX) format. <https://en.wikipedia.org/wiki/FBX>
	FileImportFormatFbx FileImportFormat = "fbx"
	// FileImportFormatGltf: glTF 2.0.
	FileImportFormatGltf FileImportFormat = "gltf"
	// FileImportFormatObj: The OBJ file format. <https://en.wikipedia.org/wiki/Wavefront_.obj_file> It may or may not have an an attached material (mtl // mtllib) within the file, but we interact with it as if it does not.
	FileImportFormatObj FileImportFormat = "obj"
	// FileImportFormatPly: The PLY file format. <https://en.wikipedia.org/wiki/PLY_(file_format)>
	FileImportFormatPly FileImportFormat = "ply"
	// FileImportFormatSldprt: SolidWorks part (SLDPRT) format.
	FileImportFormatSldprt FileImportFormat = "sldprt"
	// FileImportFormatStep: The STEP file format. <https://en.wikipedia.org/wiki/ISO_10303-21>
	FileImportFormatStep FileImportFormat = "step"
	// FileImportFormatStl: The STL file format. <https://en.wikipedia.org/wiki/STL_(file_format)>
	FileImportFormatStl FileImportFormat = "stl"
)

// FileMass: A file mass result.
type FileMass struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Mass: The resulting mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass"`
	// MaterialDensity: The material density as denoted by the user.
	MaterialDensity float64 `json:"material_density" yaml:"material_density" schema:"material_density"`
	// MaterialDensityUnit: The material density unit.
	MaterialDensityUnit UnitDensity `json:"material_density_unit" yaml:"material_density_unit" schema:"material_density_unit,required"`
	// OutputUnit: The output unit for the mass.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// FileSurfaceArea: A file surface area result.
type FileSurfaceArea struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the surface area.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// SurfaceArea: The resulting surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// FileVolume: A file volume result.
type FileVolume struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// OutputUnit: The output unit for the volume.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SrcFormat: The source format of the file.
	SrcFormat FileImportFormat `json:"src_format" yaml:"src_format" schema:"src_format,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
	// Volume: The resulting volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume"`
}

// GetEntityType: The response from the `GetEntityType` command.
type GetEntityType struct {
	// EntityType: The type of the entity.
	EntityType EntityType `json:"entity_type" yaml:"entity_type" schema:"entity_type,required"`
}

// GetNumObjects: The response from the `GetNumObjects` command.
type GetNumObjects struct {
	// NumObjects: The number of objects in the scene.
	NumObjects int `json:"num_objects" yaml:"num_objects" schema:"num_objects,required"`
}

// GetSketchModePlane: The plane for sketch mode.
type GetSketchModePlane struct {
	// Origin: The origin.
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin,required"`
	// XAxis: The x axis.
	XAxis Point3D `json:"x_axis" yaml:"x_axis" schema:"x_axis,required"`
	// YAxis: The y axis.
	YAxis Point3D `json:"y_axis" yaml:"y_axis" schema:"y_axis,required"`
	// ZAxis: The z axis (normal).
	ZAxis Point3D `json:"z_axis" yaml:"z_axis" schema:"z_axis,required"`
}

// GlobalAxi: The global axes.
type GlobalAxi string

const (
	// GlobalAxiX: The X axis
	GlobalAxiX GlobalAxi = "x"
	// GlobalAxiY: The Y axis
	GlobalAxiY GlobalAxi = "y"
	// GlobalAxiZ: The Z axis
	GlobalAxiZ GlobalAxi = "z"
)

// GltfPresentation: Describes the presentation style of the glTF JSON.
type GltfPresentation string

const (
	// GltfPresentationCompact: Condense the JSON into the smallest possible size.
	GltfPresentationCompact GltfPresentation = "compact"
	// GltfPresentationPretty: Expand the JSON into a more human readable format.
	//
	// This is the default setting.
	GltfPresentationPretty GltfPresentation = "pretty"
)

// GltfStorage: Describes the storage format of a glTF 2.0 scene.
type GltfStorage string

const (
	// GltfStorageBinary: Binary glTF 2.0.
	//
	// This is a single binary with .glb extension.
	GltfStorageBinary GltfStorage = "binary"
	// GltfStorageStandard: Standard glTF 2.0.
	//
	// This is a JSON file with .gltf extension paired with a separate binary blob file with .bin extension.
	GltfStorageStandard GltfStorage = "standard"
	// GltfStorageEmbedded: Embedded glTF 2.0.
	//
	// Single JSON file with .gltf extension binary data encoded as base64 data URIs.
	//
	// This is the default setting.
	GltfStorageEmbedded GltfStorage = "embedded"
)

// HandleMouseDragEnd: The response from the `HandleMouseDragEnd` endpoint.
type HandleMouseDragEnd struct {
}

// HandleMouseDragMove: The response from the `HandleMouseDragMove` endpoint.
type HandleMouseDragMove struct {
}

// HandleMouseDragStart: The response from the `HandleMouseDragStart` endpoint.
type HandleMouseDragStart struct {
}

// HighlightSetEntities: The response from the `HighlightSetEntities` endpoint.
type HighlightSetEntities struct {
}

// HighlightSetEntity: The response from the `HighlightSetEntity` command.
type HighlightSetEntity struct {
	// EntityID: The UUID of the entity that was highlighted.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id"`
	// Sequence: If the client sent a sequence ID with its request, the backend sends it back.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
}

// IceServer: Representation of an ICE server used for STUN/TURN Used to initiate WebRTC connections based on <https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer>
type IceServer struct {
	// Credential: Credentials for a given TURN server.
	Credential string `json:"credential" yaml:"credential" schema:"credential"`
	// Urls: URLs for a given STUN/TURN server. IceServer urls can either be a string or an array of strings But, we choose to always convert to an array of strings for consistency
	Urls []string `json:"urls" yaml:"urls" schema:"urls,required"`
	// Username: Username for a given TURN server.
	Username string `json:"username" yaml:"username" schema:"username"`
}

// IdpMetadataSourceIdpMetadataSourceUrl: A base64 encoded XML document containing the identity provider metadata descriptor.
type IdpMetadataSourceIdpMetadataSourceUrl struct {
	// Data: The base64 encoded XML document containing the identity provider metadata descriptor.
	Data Base64 `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// IdpMetadataSourceUrl: A URL to the identity provider metadata descriptor.
type IdpMetadataSourceUrl struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Url: The URL of the identity provider metadata descriptor.
	Url URL `json:"url" yaml:"url" schema:"url,required"`
}

// ImageFormat: Enum containing the variety of image formats snapshots may be exported to.
type ImageFormat string

const (
	// ImageFormatPng: .png format
	ImageFormatPng ImageFormat = "png"
	// ImageFormatJpeg: .jpeg format
	ImageFormatJpeg ImageFormat = "jpeg"
)

// ImportFile: File to import into the current model. If you are sending binary data for a file, be sure to send the WebSocketRequest as binary/bson, not text/json.
type ImportFile struct {
	// Data: The raw bytes of the file
	Data []int `json:"data" yaml:"data" schema:"data,required"`
	// Path: The file's full path, including file extension.
	Path string `json:"path" yaml:"path" schema:"path,required"`
}

// ImportFiles: Data from importing the files
type ImportFiles struct {
	// ObjectID: ID of the imported 3D models within the scene.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
}

// ImportedGeometry: Data from importing the files
type ImportedGeometry struct {
	// ID: ID of the imported 3D models within the scene.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Value: The original file paths that held the geometry.
	Value []string `json:"value" yaml:"value" schema:"value,required"`
}

// InputFormat3Dcoords: ISO 10303-21 (STEP) format.
type InputFormat3Dcoords struct {
	// SplitClosedFaces: Splits all closed faces into two open faces.
	//
	// Defaults to `false` but is implicitly `true` when importing into the engine.
	SplitClosedFaces bool `json:"split_closed_faces" yaml:"split_closed_faces" schema:"split_closed_faces"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InputFormat3Dfbx: Autodesk Filmbox (FBX) format.
type InputFormat3Dfbx struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InputFormat3Dgltf: Binary glTF 2.0. We refer to this as glTF since that is how our customers refer to it, but this can also import binary glTF (glb).
type InputFormat3Dgltf struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InputFormat3Dobj: The PLY Polygon File Format.
type InputFormat3Dobj struct {
	// Coords: Co-ordinate system of input data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: The units of the input data.
	//
	// This is very important for correct scaling and when calculating physics properties like mass, etc.
	//
	// Defaults to millimeters.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// InputFormat3Dply: *ST**ereo**L**ithography format.
type InputFormat3Dply struct {
	// Coords: Co-ordinate system of input data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: The units of the input data.
	//
	// This is very important for correct scaling and when calculating physics properties like mass, etc.
	//
	// Defaults to millimeters.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// InputFormat3Dunits: SolidWorks part (SLDPRT) format.
type InputFormat3Dunits struct {
	// SplitClosedFaces: Splits all closed faces into two open faces.
	//
	// Defaults to `false` but is implicitly `true` when importing into the engine.
	SplitClosedFaces bool `json:"split_closed_faces" yaml:"split_closed_faces" schema:"split_closed_faces"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// InquiryForm: The form for a public inquiry submission.
type InquiryForm struct {
	// Company: The company name.
	Company string `json:"company" yaml:"company" schema:"company"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email,required"`
	// FirstName: The first name of the user.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name,required"`
	// Industry: The industry of the user.
	Industry string `json:"industry" yaml:"industry" schema:"industry"`
	// InquiryType: The type of inquiry.
	InquiryType InquiryType `json:"inquiry_type" yaml:"inquiry_type" schema:"inquiry_type,required"`
	// LastName: The last name of the user.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name,required"`
	// Message: The message content.
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// Phone: The phone number of the user.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// InquiryType: The type of inquiry.
type InquiryType string

const (
	// InquiryTypeGeneralInquiry: General inquiry about the service or product.
	InquiryTypeGeneralInquiry InquiryType = "general_inquiry"
	// InquiryTypeSalesQuestion: Questions related to sales or purchasing.
	InquiryTypeSalesQuestion InquiryType = "sales_question"
	// InquiryTypeDeveloperInquiry: Inquiry from a developer, typically technical in nature.
	InquiryTypeDeveloperInquiry InquiryType = "developer_inquiry"
	// InquiryTypePartnershipOpportunity: Opportunity for partnership or collaboration.
	InquiryTypePartnershipOpportunity InquiryType = "partnership_opportunity"
	// InquiryTypeOtherSalesInquiry: Other inquiries related to sales that do not fit predefined categories.
	InquiryTypeOtherSalesInquiry InquiryType = "other_sales_inquiry"
	// InquiryTypeTechnicalSupport: Request for technical support or troubleshooting.
	InquiryTypeTechnicalSupport InquiryType = "technical_support"
	// InquiryTypeAccountManagement: Questions or requests related to account management.
	InquiryTypeAccountManagement InquiryType = "account_management"
	// InquiryTypeOtherSupportInquiry: Other support-related inquiries that do not fit predefined categories.
	InquiryTypeOtherSupportInquiry InquiryType = "other_support_inquiry"
)

// Invoice: An invoice.
type Invoice struct {
	// AmountDue: Final amount due at this time for this invoice.
	//
	// If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
	AmountDue float64 `json:"amount_due" yaml:"amount_due" schema:"amount_due"`
	// AmountPaid: The amount, in USD, that was paid.
	AmountPaid float64 `json:"amount_paid" yaml:"amount_paid" schema:"amount_paid"`
	// AmountRemaining: The amount remaining, in USD, that is due.
	AmountRemaining float64 `json:"amount_remaining" yaml:"amount_remaining" schema:"amount_remaining"`
	// AttemptCount: Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.
	//
	// Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
	AttemptCount int `json:"attempt_count" yaml:"attempt_count" schema:"attempt_count"`
	// Attempted: Whether an attempt has been made to pay the invoice.
	//
	// An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
	Attempted bool `json:"attempted" yaml:"attempted" schema:"attempted"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency string `json:"currency" yaml:"currency" schema:"currency"`
	// CustomerEmail: The email address for the customer. Until the invoice is finalized, this field will equal customer.email. Once the invoice is finalized, this field will no longer be updated.
	CustomerEmail string `json:"customer_email" yaml:"customer_email" schema:"customer_email"`
	// CustomerID: Customer ID. The unique identifier for the customer this invoice belongs to. This is the customer ID in the payments service, not our database customer ID.
	CustomerID string `json:"customer_id" yaml:"customer_id" schema:"customer_id"`
	// DefaultPaymentMethod: Default payment method.
	DefaultPaymentMethod string `json:"default_payment_method" yaml:"default_payment_method" schema:"default_payment_method"`
	// Description: Description of the invoice.
	Description string `json:"description" yaml:"description" schema:"description"`
	// Discounts: The discounts applied to the invoice. This is an array of discount objects.
	Discounts []Discount `json:"discounts" yaml:"discounts" schema:"discounts"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Lines: The individual line items that make up the invoice.
	//
	// `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
	Lines []InvoiceLineItem `json:"lines" yaml:"lines" schema:"lines"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Number: A unique, identifying string that appears on emails sent to the customer for this invoice.
	Number string `json:"number" yaml:"number" schema:"number"`
	// Paid: Whether payment was successfully collected for this invoice.
	//
	// An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
	Paid bool `json:"paid" yaml:"paid" schema:"paid"`
	// Pdf: The link to download the PDF for the invoice.
	Pdf URL `json:"pdf" yaml:"pdf" schema:"pdf"`
	// ReceiptNumber: This is the transaction number that appears on email receipts sent for this invoice.
	ReceiptNumber string `json:"receipt_number" yaml:"receipt_number" schema:"receipt_number"`
	// StatementDescriptor: Extra information about an invoice for the customer's credit card statement.
	StatementDescriptor string `json:"statement_descriptor" yaml:"statement_descriptor" schema:"statement_descriptor"`
	// Status: The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`.
	Status InvoiceStatus `json:"status" yaml:"status" schema:"status"`
	// Subtotal: Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied.
	//
	// Item discounts are already incorporated.
	Subtotal float64 `json:"subtotal" yaml:"subtotal" schema:"subtotal"`
	// Tax: The amount of tax on this invoice.
	//
	// This is the sum of all the tax amounts on this invoice.
	Tax float64 `json:"tax" yaml:"tax" schema:"tax"`
	// Total: Total after discounts and taxes.
	Total float64 `json:"total" yaml:"total" schema:"total"`
	// Url: The URL for the hosted invoice page, which allows customers to view and pay an invoice.
	Url URL `json:"url" yaml:"url" schema:"url"`
}

// InvoiceLineItem: An invoice line item.
type InvoiceLineItem struct {
	// Amount: The amount, in USD.
	Amount float64 `json:"amount" yaml:"amount" schema:"amount"`
	// Currency: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
	Currency string `json:"currency" yaml:"currency" schema:"currency"`
	// Description: The description.
	Description string `json:"description" yaml:"description" schema:"description"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// InvoiceItem: The ID of the invoice item associated with this line item if any.
	InvoiceItem string `json:"invoice_item" yaml:"invoice_item" schema:"invoice_item"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
}

// InvoiceStatus: An enum representing the possible values of an `Invoice`'s `status` field.
type InvoiceStatus string

const (
	// InvoiceStatusDraft: Draft.
	InvoiceStatusDraft InvoiceStatus = "draft"
	// InvoiceStatusOpen: Open.
	InvoiceStatusOpen InvoiceStatus = "open"
	// InvoiceStatusPaid: Paid.
	InvoiceStatusPaid InvoiceStatus = "paid"
	// InvoiceStatusUncollectible: Uncollectible.
	InvoiceStatusUncollectible InvoiceStatus = "uncollectible"
	// InvoiceStatusVoid: Void.
	InvoiceStatusVoid InvoiceStatus = "void"
)

// IpAddrInfo: Information about an ip address. Represents geographical and network-related information.
type IpAddrInfo struct {
	// Asn: Autonomous System Number.
	Asn int `json:"asn" yaml:"asn" schema:"asn"`
	// City: City name.
	City string `json:"city" yaml:"city" schema:"city"`
	// ContinentCode: Continent code (e.g., "EU" for Europe).
	ContinentCode string `json:"continent_code" yaml:"continent_code" schema:"continent_code"`
	// Country: Country name.
	Country string `json:"country" yaml:"country" schema:"country"`
	// CountryCode: Two-letter country code (e.g., "NL" for Netherlands).
	CountryCode string `json:"country_code" yaml:"country_code" schema:"country_code"`
	// CountryCode3: Three-letter country code (e.g., "NLD" for Netherlands).
	CountryCode3 string `json:"country_code3" yaml:"country_code3" schema:"country_code3"`
	// Ip: IP address of the user.
	Ip IP `json:"ip" yaml:"ip" schema:"ip"`
	// IsInEuropeanUnion: Flag indicating whether the country is in the European Union.
	IsInEuropeanUnion bool `json:"is_in_european_union" yaml:"is_in_european_union" schema:"is_in_european_union"`
	// Latitude: Geographic latitude.
	Latitude float64 `json:"latitude" yaml:"latitude" schema:"latitude"`
	// Longitude: Geographic longitude.
	Longitude float64 `json:"longitude" yaml:"longitude" schema:"longitude"`
	// Offset: Time offset in seconds from UTC.
	Offset int `json:"offset" yaml:"offset" schema:"offset"`
	// Organization: Organization name (e.g., "RIPE NCC").
	Organization string `json:"organization" yaml:"organization" schema:"organization"`
	// PostalCode: Postal code.
	PostalCode string `json:"postal_code" yaml:"postal_code" schema:"postal_code"`
	// Region: Name of the region (e.g., "North Holland").
	Region string `json:"region" yaml:"region" schema:"region"`
	// RegionCode: Region code (e.g., "NH" for North Holland).
	RegionCode string `json:"region_code" yaml:"region_code" schema:"region_code"`
	// Timezone: Timezone (e.g., "Europe/Amsterdam").
	Timezone string `json:"timezone" yaml:"timezone" schema:"timezone"`
}

// KclCodeCompletionParams: Extra params for the completions.
type KclCodeCompletionParams struct {
	// Language: The language of the code.
	Language string `json:"language" yaml:"language" schema:"language"`
	// NextIndent: The next indent of the code.
	NextIndent int `json:"next_indent" yaml:"next_indent" schema:"next_indent"`
	// PromptTokens: The prompt tokens for the completions.
	PromptTokens int `json:"prompt_tokens" yaml:"prompt_tokens" schema:"prompt_tokens"`
	// SuffixTokens: The suffix tokens for the completions.
	SuffixTokens int `json:"suffix_tokens" yaml:"suffix_tokens" schema:"suffix_tokens"`
	// TrimByIndentation: If we should trim by indentation.
	TrimByIndentation bool `json:"trim_by_indentation" yaml:"trim_by_indentation" schema:"trim_by_indentation"`
}

// KclCodeCompletionRequest: A request to generate KCL code completions.
type KclCodeCompletionRequest struct {
	// Extra: Extra parameters for the completions.
	Extra KclCodeCompletionParams `json:"extra" yaml:"extra" schema:"extra"`
	// MaxTokens: The maximum number of tokens that can be generated for the completions. The total length of input tokens and generated tokens is limited by the model’s context length.
	MaxTokens int `json:"max_tokens" yaml:"max_tokens" schema:"max_tokens"`
	// N: How many completion choices to generate for each input message.
	N int `json:"n" yaml:"n" schema:"n"`
	// Nwo: For GitHub copilot this is the `{org}/{repo}`. This does not do anything yet. But we wanted the same API as GitHub Copilot. It might be used in the future.
	Nwo string `json:"nwo" yaml:"nwo" schema:"nwo"`
	// Prompt: The prompt for the model.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// Stop: Up to 4 sequences where the API will stop generating further tokens.
	Stop []string `json:"stop" yaml:"stop" schema:"stop"`
	// Stream: If set, partial message deltas will be sent, like in ChatGPT or OpenAPI. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
	Stream bool `json:"stream" yaml:"stream" schema:"stream"`
	// Suffix: The suffix for the model.
	Suffix string `json:"suffix" yaml:"suffix" schema:"suffix"`
	// Temperature: The temperature for the model.
	Temperature float64 `json:"temperature" yaml:"temperature" schema:"temperature"`
	// TopP: The top p for the model.
	TopP float64 `json:"top_p" yaml:"top_p" schema:"top_p"`
}

// KclCodeCompletionResponse: A response with KCL code completions.
type KclCodeCompletionResponse struct {
	// Completions: The completions.
	Completions []string `json:"completions" yaml:"completions" schema:"completions,required"`
}

// KclModel: The response containing the KCL code.
type KclModel struct {
	// Code: The KCL code.
	Code string `json:"code" yaml:"code" schema:"code,required"`
}

// Loft: The response from the `Loft` command.
type Loft struct {
	// SolidID: The UUID of the newly created solid loft.
	SolidID UUID `json:"solid_id" yaml:"solid_id" schema:"solid_id,required"`
}

// MakeAxesGizmo: The response from the `MakeAxesGizmo` endpoint.
type MakeAxesGizmo struct {
}

// MakeOffsetPath: The response from the `MakeOffsetPath` command.
type MakeOffsetPath struct {
	// EntityIds: If the offset path splits into multiple paths, this will contain the UUIDs of the new paths. If the offset path remains as a single path, this will be empty, and the resulting ID of the (single) new path will be the ID of the `MakeOffsetPath` command.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// MakePlane: The response from the `MakePlane` endpoint.
type MakePlane struct {
}

// Mass: The mass response.
type Mass struct {
	// Mass: The mass.
	Mass float64 `json:"mass" yaml:"mass" schema:"mass,required"`
	// OutputUnit: The output unit for the mass.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
}

// Method: The Request Method (VERB)
// This type also contains constants for a number of common HTTP methods such as GET, POST, etc.
//
// Currently includes 8 variants representing the 8 methods defined in [RFC 7230](https://tools.ietf.org/html/rfc7231#section-4.1), plus PATCH, and an Extension variant for all extensions.
type Method string

const (
	// MethodOptions: The `OPTIONS` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.2.1).
	MethodOptions Method = "OPTIONS"
	// MethodGet: The `GET` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodGet Method = "GET"
	// MethodPost: The `POST` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodPost Method = "POST"
	// MethodPut: The `PUT` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1).
	MethodPut Method = "PUT"
	// MethodDelete: The `DELETE` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.5).
	MethodDelete Method = "DELETE"
	// MethodHead: The `HEAD` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.2).
	MethodHead Method = "HEAD"
	// MethodTrace: The `TRACE` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3).
	MethodTrace Method = "TRACE"
	// MethodConnect: The `CONNECT` method as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.6).
	MethodConnect Method = "CONNECT"
	// MethodPatch: The `PATCH` method as defined in [RFC 5789](https://tools.ietf.org/html/rfc5789).
	MethodPatch Method = "PATCH"
	// MethodExtension: A catch all.
	MethodExtension Method = "EXTENSION"
)

// MlFeedback: Human feedback on an ML response.
type MlFeedback string

const (
	// MlFeedbackThumbsUp: Thumbs up.
	MlFeedbackThumbsUp MlFeedback = "thumbs_up"
	// MlFeedbackThumbsDown: Thumbs down.
	MlFeedbackThumbsDown MlFeedback = "thumbs_down"
	// MlFeedbackAccepted: Accepted.
	MlFeedbackAccepted MlFeedback = "accepted"
	// MlFeedbackRejected: Rejected.
	MlFeedbackRejected MlFeedback = "rejected"
)

// MlPrompt: A ML prompt.
type MlPrompt struct {
	// CompletedAt: When the prompt was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The date and time the ML prompt was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error message if the prompt failed.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier for the ML prompt.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// KclVersion: The KCL version being used.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// Metadata: The metadata for the prompt.
	Metadata MlPromptMetadata `json:"metadata" yaml:"metadata" schema:"metadata"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// OutputFile: The output file. In the case of TextToCad this is a link to a file in a GCP bucket.
	OutputFile string `json:"output_file" yaml:"output_file" schema:"output_file"`
	// ProjectName: The name of the project, if any. This allows us to group prompts together that come from the same project and user.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name"`
	// Prompt: The prompt.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt,required"`
	// StartedAt: When the prompt was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the prompt.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// Type: The type of prompt.
	Type MlPromptType `json:"type" yaml:"type" schema:"type,required"`
	// UpdatedAt: The date and time the ML prompt was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the ML prompt.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// MlPromptMetadata: Metadata for a ML prompt.
type MlPromptMetadata struct {
	// Code: Code for the model.
	Code string `json:"code" yaml:"code" schema:"code"`
	// OriginalSourceCode: The original source code for the model.
	OriginalSourceCode string `json:"original_source_code" yaml:"original_source_code" schema:"original_source_code"`
	// SourceRanges: The source ranges the user suggested to change.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges"`
}

// MlPromptResultsPage: A single page of results
type MlPromptResultsPage struct {
	// Items: list of items on this page of results
	Items []MlPrompt `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// MlPromptType: A type of ML prompt.
type MlPromptType string

const (
	// MlPromptTypeTextToCad: Text to CAD.
	MlPromptTypeTextToCad MlPromptType = "text_to_cad"
	// MlPromptTypeTextToKcl: Text to KCL.
	MlPromptTypeTextToKcl MlPromptType = "text_to_kcl"
	// MlPromptTypeTextToKclIteration: Text to KCL iteration.
	MlPromptTypeTextToKclIteration MlPromptType = "text_to_kcl_iteration"
	// MlPromptTypeTextToKclMultiFileIteration: Text to KCL iteration with multiple files.
	MlPromptTypeTextToKclMultiFileIteration MlPromptType = "text_to_kcl_multi_file_iteration"
)

// ModelingAppEventType: Type for modeling-app events
type ModelingAppEventType string

const (
	// ModelingAppEventTypeSuccessfulCompileBeforeClose: This event is sent before the modeling app or project is closed. The attachment should contain the contents of the most recent successful compile.
	ModelingAppEventTypeSuccessfulCompileBeforeClose ModelingAppEventType = "successful_compile_before_close"
)

// ModelingAppIndividualSubscriptionTier: The subscription tiers we offer for the Modeling App to individuals.
type ModelingAppIndividualSubscriptionTier string

const (
	// ModelingAppIndividualSubscriptionTierFree: The free tier.
	ModelingAppIndividualSubscriptionTierFree ModelingAppIndividualSubscriptionTier = "free"
	// ModelingAppIndividualSubscriptionTierPro: The pro tier.
	ModelingAppIndividualSubscriptionTierPro ModelingAppIndividualSubscriptionTier = "pro"
)

// ModelingAppOrganizationSubscriptionTier: The subscription tiers we offer for the Modeling App to organizations.
type ModelingAppOrganizationSubscriptionTier string

const (
	// ModelingAppOrganizationSubscriptionTierTeam: The team tier.
	ModelingAppOrganizationSubscriptionTierTeam ModelingAppOrganizationSubscriptionTier = "team"
	// ModelingAppOrganizationSubscriptionTierEnterprise: The enterprise tier.
	ModelingAppOrganizationSubscriptionTierEnterprise ModelingAppOrganizationSubscriptionTier = "enterprise"
)

// ModelingAppShareLinks: The options for sharable links through the modeling app.
type ModelingAppShareLinks string

const (
	// ModelingAppShareLinksPublic: Public.
	ModelingAppShareLinksPublic ModelingAppShareLinks = "public"
	// ModelingAppShareLinksPasswordProtected: Password protected.
	ModelingAppShareLinksPasswordProtected ModelingAppShareLinks = "password_protected"
	// ModelingAppShareLinksOrganizationOnly: Organization only. Links can be made only available to members of the organization.
	ModelingAppShareLinksOrganizationOnly ModelingAppShareLinks = "organization_only"
)

// ModelingAppSubscriptionTier: A subscription tier we offer for the Modeling App.
type ModelingAppSubscriptionTier struct {
	// AnnualDiscount: Annual discount. The percentage off the monthly price if the user pays annually.
	AnnualDiscount float64 `json:"annual_discount" yaml:"annual_discount" schema:"annual_discount"`
	// Description: A description of the tier.
	Description string `json:"description" yaml:"description" schema:"description,required"`
	// EndpointsIncluded: The Zoo API endpoints that are included when through an approved zoo tool.
	EndpointsIncluded []APIEndpoint `json:"endpoints_included" yaml:"endpoints_included" schema:"endpoints_included"`
	// Features: Features that are included in the subscription.
	Features []SubscriptionTierFeature `json:"features" yaml:"features" schema:"features"`
	// MonthlyPayAsYouGoAPICredits: The amount of pay-as-you-go API credits the individual or org gets outside the modeling app per month. This re-ups on the 1st of each month. This is equivalent to the monetary value divided by the price of an API credit.
	MonthlyPayAsYouGoAPICredits int `json:"monthly_pay_as_you_go_api_credits" yaml:"monthly_pay_as_you_go_api_credits" schema:"monthly_pay_as_you_go_api_credits"`
	// MonthlyPayAsYouGoAPICreditsMonetaryValue: The monetary value of pay-as-you-go API credits the individual or org gets outside the modeling app per month. This re-ups on the 1st of each month.
	MonthlyPayAsYouGoAPICreditsMonetaryValue float64 `json:"monthly_pay_as_you_go_api_credits_monetary_value" yaml:"monthly_pay_as_you_go_api_credits_monetary_value" schema:"monthly_pay_as_you_go_api_credits_monetary_value,required"`
	// Name: The name of the tier.
	Name ModelingAppSubscriptionTierName `json:"name" yaml:"name" schema:"name,required"`
	// PayAsYouGoAPICreditPrice: The price of an API credit (meaning 1 credit = 1 minute of API usage).
	PayAsYouGoAPICreditPrice float64 `json:"pay_as_you_go_api_credit_price" yaml:"pay_as_you_go_api_credit_price" schema:"pay_as_you_go_api_credit_price"`
	// Price: The price of the tier per month. If this is for an individual, this is the price they pay. If this is for an organization, this is the price the organization pays per member in the org. This is in USD.
	Price any `json:"price" yaml:"price" schema:"price,required"`
	// ShareLinks: The options for sharable links through the modeling app.
	ShareLinks []ModelingAppShareLinks `json:"share_links" yaml:"share_links" schema:"share_links"`
	// SupportTier: The support tier the subscription provides.
	SupportTier SupportTier `json:"support_tier" yaml:"support_tier" schema:"support_tier,required"`
	// TrainingDataBehavior: The behavior of the users data (can it be used for training, etc).
	TrainingDataBehavior SubscriptionTrainingDataBehavior `json:"training_data_behavior" yaml:"training_data_behavior" schema:"training_data_behavior,required"`
	// Type: If the tier is offered for an individual or an org.
	Type any `json:"type" yaml:"type" schema:"type,required"`
	// ZooToolsIncluded: The Zoo tools that you can call unlimited times with this tier.
	ZooToolsIncluded []ZooTool `json:"zoo_tools_included" yaml:"zoo_tools_included" schema:"zoo_tools_included"`
}

// ModelingAppSubscriptionTierName: An enum representing a Modeling App subscription tier name.
type ModelingAppSubscriptionTierName string

const (
	// ModelingAppSubscriptionTierNameFree: The free tier.
	ModelingAppSubscriptionTierNameFree ModelingAppSubscriptionTierName = "free"
	// ModelingAppSubscriptionTierNamePro: The pro tier.
	ModelingAppSubscriptionTierNamePro ModelingAppSubscriptionTierName = "pro"
	// ModelingAppSubscriptionTierNameTeam: The team tier.
	ModelingAppSubscriptionTierNameTeam ModelingAppSubscriptionTierName = "team"
	// ModelingAppSubscriptionTierNameEnterprise: The enterprise tier.
	ModelingAppSubscriptionTierNameEnterprise ModelingAppSubscriptionTierName = "enterprise"
)

// ModelingCmdAngle: Create a pattern using this entity by specifying the transform for each desired repetition. Transformations are performed in the following order (first applied to last applied): scale, rotate, translate.
type ModelingCmdAngle struct {
	// EntityID: ID of the entity being cloned.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdAngleStepSize: Gets the default camera's view state
type ModelingCmdAngleStepSize struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdArcDegrees: Get the number of objects in the scene
type ModelingCmdArcDegrees struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdAxis: Create a pattern using this entity by specifying the transform for each desired repetition. Transformations are performed in the following order (first applied to last applied): scale, rotate, translate.
type ModelingCmdAxis struct {
	// EntityID: ID of the entity being copied.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Transform: How to transform each repeated solid. The 0th transform will create the first copy of the entity. The total number of (optional) repetitions equals the size of this list.
	Transform []Transform `json:"transform" yaml:"transform" schema:"transform"`
	// Transforms: Alternatively, you could set this key instead. If you want to use multiple transforms per item. If this is non-empty then the `transform` key must be empty, and vice-versa.
	Transforms [][]Transform `json:"transforms" yaml:"transforms" schema:"transforms"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdAxisIs2D: Create a linear pattern using this entity.
type ModelingCmdAxisIs2D struct {
	// Axis: Axis along which to make the copies. For Solid2d patterns, the z component is ignored.
	Axis Point3D `json:"axis" yaml:"axis" schema:"axis,required"`
	// EntityID: ID of the entity being copied.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// NumRepetitions: Number of repetitions to make.
	NumRepetitions int `json:"num_repetitions" yaml:"num_repetitions" schema:"num_repetitions,required"`
	// Spacing: Spacing between repetitions.
	Spacing float64 `json:"spacing" yaml:"spacing" schema:"spacing,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdBaseCurveIndex: Hide or show an object
type ModelingCmdBaseCurveIndex struct {
	// Hidden: Whether or not the object should be hidden.
	Hidden bool `json:"hidden" yaml:"hidden" schema:"hidden,required"`
	// ObjectID: Which object to change
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdBezApproximateRational: Bring an object to the front of the scene
type ModelingCmdBezApproximateRational struct {
	// ObjectID: Which object to change
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCameraDragEnd: Send object to front or back.
type ModelingCmdCameraDragEnd struct {
	// Front: Bring to front = true, send to back = false.
	Front bool `json:"front" yaml:"front" schema:"front,required"`
	// ObjectID: Which object is being changed.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCameraDragMove: Determines a position on a brep face evaluated by parameters u,v
type ModelingCmdCameraDragMove struct {
	// ObjectID: Which face is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Uv: The 2D parameter-space u,v position to evaluate the surface at
	Uv Point2D `json:"uv" yaml:"uv" schema:"uv,required"`
}

// ModelingCmdCameraDragStart: Gets the previous adjacent edge for the given edge, along the given face.
type ModelingCmdCameraDragStart struct {
	// EdgeID: Which edge you want the opposite of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// FaceID: Which face is used to figure out the opposite edge?
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCenter: Send a mouse move event
type ModelingCmdCenter struct {
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: Where the mouse is
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdCenter2D: Sets the default camera's view state
type ModelingCmdCenter2D struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// View: Camera view state
	View CameraViewState `json:"view" yaml:"view" schema:"view,required"`
}

// ModelingCmdChildIndex: Reconfigure the stream.
type ModelingCmdChildIndex struct {
	// Bitrate: Video feed's constant bitrate (CBR)
	Bitrate int `json:"bitrate" yaml:"bitrate" schema:"bitrate"`
	// Fps: Frames per second.
	Fps int `json:"fps" yaml:"fps" schema:"fps,required"`
	// Height: Height of the stream.
	Height int `json:"height" yaml:"height" schema:"height,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Width: Width of the stream.
	Width int `json:"width" yaml:"width" schema:"width,required"`
}

// ModelingCmdClosePath: Gets the edge opposite the given edge, along the given face.
type ModelingCmdClosePath struct {
	// EdgeID: Which edge you want the opposite of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// FaceID: Which face is used to figure out the opposite edge?
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdCylinderID: Align the grid with a plane or a planar face.
type ModelingCmdCylinderID struct {
	// GridID: The grid to be moved.
	GridID UUID `json:"grid_id" yaml:"grid_id" schema:"grid_id,required"`
	// ReferenceID: The plane or face that the grid will be aligned to. If a face, it must be planar to succeed.
	ReferenceID UUID `json:"reference_id" yaml:"reference_id" schema:"reference_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraGetSettings: Fade entity in or out.
type ModelingCmdDefaultCameraGetSettings struct {
	// DurationSeconds: How many seconds the animation should take.
	DurationSeconds float64 `json:"duration_seconds" yaml:"duration_seconds" schema:"duration_seconds"`
	// EntityID: Which entity is being changed.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// FadeIn: Fade in = true, fade out = false.
	FadeIn bool `json:"fade_in" yaml:"fade_in" schema:"fade_in,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraGetView: Make a new plane
type ModelingCmdDefaultCameraGetView struct {
	// Clobber: If true, any existing drawables within the obj will be replaced (the object will be reset)
	Clobber bool `json:"clobber" yaml:"clobber" schema:"clobber,required"`
	// Hide: If true, the plane will be created but hidden initially.
	Hide bool `json:"hide" yaml:"hide" schema:"hide"`
	// Origin: Origin of the plane
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin,required"`
	// Size: What should the plane's span/extent? When rendered visually, this is both the width and height along X and Y axis respectively.
	Size float64 `json:"size" yaml:"size" schema:"size,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// XAxis: What should the plane's X axis be?
	XAxis Point3D `json:"x_axis" yaml:"x_axis" schema:"x_axis,required"`
	// YAxis: What should the plane's Y axis be?
	YAxis Point3D `json:"y_axis" yaml:"y_axis" schema:"y_axis,required"`
}

// ModelingCmdDefaultCameraLookAt: Disable sketch mode. If you are sketching on a face, be sure to not disable sketch mode until you have extruded. Otherwise, your object will not be fused with the face.
type ModelingCmdDefaultCameraLookAt struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraPerspectiveSettings: Set the background color of the scene.
type ModelingCmdDefaultCameraPerspectiveSettings struct {
	// Color: The color to set the background to.
	Color Color `json:"color" yaml:"color" schema:"color,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraSetView: Set the color of a plane.
type ModelingCmdDefaultCameraSetView struct {
	// Color: What color it should be.
	Color Color `json:"color" yaml:"color" schema:"color,required"`
	// PlaneID: Which plane is being changed.
	PlaneID UUID `json:"plane_id" yaml:"plane_id" schema:"plane_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdDefaultCameraZoom: Project a list of points on to a plane.
type ModelingCmdDefaultCameraZoom struct {
	// PlaneID: The id of the plane used for the projection.
	PlaneID UUID `json:"plane_id" yaml:"plane_id" schema:"plane_id,required"`
	// Points: The list of points that will be projected.
	Points []Point3D `json:"points" yaml:"points" schema:"points,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UsePlaneCoords: If true: the projected points are returned in the plane_id's coordinate sysetm. else: the projected points are returned in the world coordinate system.
	UsePlaneCoords bool `json:"use_plane_coords" yaml:"use_plane_coords" schema:"use_plane_coords,required"`
}

// ModelingCmdDistance: Command for lofting sections to create a solid
type ModelingCmdDistance struct {
	// BaseCurveIndex: This can be set to override the automatically determined topological base curve, which is usually the first section encountered.
	BaseCurveIndex int `json:"base_curve_index" yaml:"base_curve_index" schema:"base_curve_index"`
	// BezApproximateRational: Attempt to approximate rational curves (such as arcs) using a bezier. This will remove banding around interpolations between arcs and non-arcs.  It may produce errors in other scenarios Over time, this field won't be necessary.
	BezApproximateRational bool `json:"bez_approximate_rational" yaml:"bez_approximate_rational" schema:"bez_approximate_rational,required"`
	// SectionIds: The closed section curves to create a lofted solid from. Currently, these must be Solid2Ds
	SectionIds []UUID `json:"section_ids" yaml:"section_ids" schema:"section_ids,required"`
	// Tolerance: Tolerance
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// VDegree: Degree of the interpolation. Must be greater than zero. For example, use 2 for quadratic, or 3 for cubic interpolation in the V direction.
	VDegree int `json:"v_degree" yaml:"v_degree" schema:"v_degree,required"`
}

// ModelingCmdDistanceType: Get the surface area of entities in the scene or the default scene.
type ModelingCmdDistanceType struct {
	// EntityIds: IDs of the entities to get the surface area of. If this is empty, then the default scene is included in the surface area.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// OutputUnit: The output unit for the surface area.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEdgeID: Changes the current highlighted entity to whichever one is at the given window coordinate. If there's no entity at this location, clears the highlight.
type ModelingCmdEdgeID struct {
	// SelectedAtWindow: Coordinates of the window being clicked
	SelectedAtWindow Point2D `json:"selected_at_window" yaml:"selected_at_window" schema:"selected_at_window,required"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEngineUtilEvaluatePath: Move the path's "pen". If you're in sketch mode, these coordinates are in the local coordinate system, not the world's coordinate system. For example, say you're sketching on the plane {x: (1,0,0), y: (0,1,0), origin: (0, 0, 50)}. In other words, the plane 50 units above the default XY plane. Then, moving the pen to (1, 1, 0) with this command uses local coordinates. So, it would move the pen to (1, 1, 50) in global coordinates.
type ModelingCmdEngineUtilEvaluatePath struct {
	// Path: The ID of the command which created the path.
	Path UUID `json:"path" yaml:"path" schema:"path,required"`
	// To: Where the path's pen should be.
	To Point3D `json:"to" yaml:"to" schema:"to,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityCircularPattern: Add a hole to a closed path by offsetting it a uniform distance inward.
type ModelingCmdEntityCircularPattern struct {
	// ObjectID: The closed path to add a hole to.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Offset: The distance to offset the path (positive for outset, negative for inset)
	Offset float64 `json:"offset" yaml:"offset" schema:"offset,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityClone: Use perspective projection.
type ModelingCmdEntityClone struct {
	// Parameters: If this is not given, use the same parameters as last time the perspective camera was used.
	Parameters PerspectiveCameraParameters `json:"parameters" yaml:"parameters" schema:"parameters"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetAllChildUuids: Get the density of entities in the scene or the default scene.
type ModelingCmdEntityGetAllChildUuids struct {
	// EntityIds: IDs of the entities to get the density of. If this is empty, then the default scene is included in the density.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// MaterialMass: The material mass.
	MaterialMass float64 `json:"material_mass" yaml:"material_mass" schema:"material_mass,required"`
	// MaterialMassUnit: The material mass unit.
	MaterialMassUnit UnitMas `json:"material_mass_unit" yaml:"material_mass_unit" schema:"material_mass_unit,required"`
	// OutputUnit: The output unit for the density.
	OutputUnit UnitDensity `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetChildUuid: Set the units of the scene. For all following commands, the units will be interpreted as the given units. Any previously executed commands will not be affected or have their units changed. They will remain in the units they were originally executed in.
type ModelingCmdEntityGetChildUuid struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Unit: Which units the scene uses.
	Unit UnitLength `json:"unit" yaml:"unit" schema:"unit,required"`
}

// ModelingCmdEntityGetDistance: What kind of entities can be selected?
type ModelingCmdEntityGetDistance struct {
	// Filter: If vector is empty, clear all filters. If vector is non-empty, only the given entity types will be selectable.
	Filter []EntityType `json:"filter" yaml:"filter" schema:"filter,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetNumChildren: Find the start and end of a curve.
type ModelingCmdEntityGetNumChildren struct {
	// CurveID: ID of the curve being queried.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetParentID: Remove scene objects.
type ModelingCmdEntityGetParentID struct {
	// ObjectIds: Objects to remove.
	ObjectIds []UUID `json:"object_ids" yaml:"object_ids" schema:"object_ids,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityGetSketchPaths: Get the center of mass of entities in the scene or the default scene.
type ModelingCmdEntityGetSketchPaths struct {
	// EntityIds: IDs of the entities to get the center of mass of. If this is empty, then the default scene is included in the center of mass.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// OutputUnit: The output unit for the center of mass.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityID: Stop dragging the mouse.
type ModelingCmdEntityID struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdEntityId1: Focus the default camera upon an object in the scene.
type ModelingCmdEntityId1 struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Uuid: UUID of object to focus on.
	Uuid UUID `json:"uuid" yaml:"uuid" schema:"uuid,required"`
}

// ModelingCmdEntityId2: When you select some entity with the current tool, what should happen to the entity?
type ModelingCmdEntityId2 struct {
	// SelectionType: What type of selection should occur when you select something?
	SelectionType SceneSelectionType `json:"selection_type" yaml:"selection_type" schema:"selection_type,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityIds: Take a snapshot of the current view.
type ModelingCmdEntityIds struct {
	// Format: What image format to return.
	Format ImageFormat `json:"format" yaml:"format" schema:"format,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityLinearPattern: Find all IDs of selected entities
type ModelingCmdEntityLinearPattern struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdEntityLinearPatternTransform: Looks along the normal of the specified face (if it is planar!), and fits the view to it.
type ModelingCmdEntityLinearPatternTransform struct {
	// Animated: Whether or not to animate the camera movement. (Animation is currently not supported.)
	Animated bool `json:"animated" yaml:"animated" schema:"animated"`
	// FaceID: Which face to orient camera to. If the face is not planar, no action will occur.
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// Padding: How much to pad the view frame by, as a fraction of the face bounding box size. Negative padding will crop the view of the face proportionally. e.g. padding = 0.2 means the view will span 120% of the face bounding box, and padding = -0.2 means the view will span 80% of the face bounding box.
	Padding float64 `json:"padding" yaml:"padding" schema:"padding"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdExport: Continue dragging the mouse.
type ModelingCmdExport struct {
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdExport2D: Query the given path.
type ModelingCmdExport2D struct {
	// PathID: Which path to query
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdExport3D: Obtain vertex ids for a path
type ModelingCmdExport3D struct {
	// PathID: Which path to query
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdExtendPath: Command for revolving a solid 2d about a brep edge
type ModelingCmdExtendPath struct {
	// Angle: The signed angle of revolution (in degrees, must be <= 360 in either direction)
	Angle Angle `json:"angle" yaml:"angle" schema:"angle,required"`
	// EdgeID: The edge to use as the axis of revolution, must be linear and lie in the plane of the solid
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// Opposite: Should the revolution also revolve in the opposite direction along the given axis? If so, this specifies its angle.
	Opposite string `json:"opposite" yaml:"opposite" schema:"opposite"`
	// Target: Which sketch to revolve. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Tolerance: The maximum acceptable surface gap computed between the revolution surface joints. Must be positive (i.e. greater than zero).
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdExtrude: Gets the default camera's camera settings
type ModelingCmdExtrude struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdExtrudeMethod: Closes a path, converting it to a 2D solid.
type ModelingCmdExtrudeMethod struct {
	// PathID: Which path to close.
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdFaceIds: Mirror the input entities over the specified edge. (Currently only supports sketches)
type ModelingCmdFaceIds struct {
	// EdgeID: The edge to use as the mirror axis, must be linear and lie in the plane of the solid
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// Ids: ID of the mirror entities.
	Ids []UUID `json:"ids" yaml:"ids" schema:"ids,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdFaces: Camera drag started.
type ModelingCmdFaces struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The initial mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdFormat: Add a gizmo showing the axes.
type ModelingCmdFormat struct {
	// Clobber: If true, any existing drawables within the obj will be replaced (the object will be reset)
	Clobber bool `json:"clobber" yaml:"clobber" schema:"clobber,required"`
	// GizmoMode: If true, axes gizmo will be placed in the corner of the screen. If false, it will be placed at the origin of the scene.
	GizmoMode bool `json:"gizmo_mode" yaml:"gizmo_mode" schema:"gizmo_mode,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdFovY: Sets whether or not changes to the scene or its objects will be done as a "dry run" In a dry run, successful commands won't actually change the model. This is useful for catching errors before actually making the change.
type ModelingCmdFovY struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdHollow: Modifies the selection by simulating a "mouse click" at the given x,y window coordinate Returns ID of whatever was selected.
type ModelingCmdHollow struct {
	// SelectedAtWindow: Where in the window was selected
	SelectedAtWindow Point2D `json:"selected_at_window" yaml:"selected_at_window" schema:"selected_at_window,required"`
	// SelectionType: What entity was selected?
	SelectionType SceneSelectionType `json:"selection_type" yaml:"selection_type" schema:"selection_type,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdInteraction: Gets the next adjacent edge for the given edge, along the given face.
type ModelingCmdInteraction struct {
	// EdgeID: Which edge you want the opposite of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// FaceID: Which face is used to figure out the opposite edge?
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdIsClockwise: Set the scale of the grid lines in the video feed.
type ModelingCmdIsClockwise struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: Which units the `value` field uses.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
	// Value: Distance between grid lines represents this much distance.
	Value float64 `json:"value" yaml:"value" schema:"value,required"`
}

// ModelingCmdLength: Set the grid lines to auto scale. The grid will get larger the further you zoom out, and smaller the more you zoom in.
type ModelingCmdLength struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdLoft: Gets all faces which use the given edge.
type ModelingCmdLoft struct {
	// EdgeID: Which edge you want the faces of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdMagnitude: Project an entity on to a plane.
type ModelingCmdMagnitude struct {
	// EntityID: Which entity to project (vertex or edge).
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// PlaneID: Which plane to project entity_id onto.
	PlaneID UUID `json:"plane_id" yaml:"plane_id" schema:"plane_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// UsePlaneCoords: If true: the projected points are returned in the plane_id's coordinate system, else: the projected points are returned in the world coordinate system.
	UsePlaneCoords bool `json:"use_plane_coords" yaml:"use_plane_coords" schema:"use_plane_coords,required"`
}

// ModelingCmdModelingCmdAngle: Replaces current selection with these entities (by UUID).
type ModelingCmdModelingCmdAngle struct {
	// Entities: Which entities to select
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdAxis: Set the transform of an object.
type ModelingCmdModelingCmdAxis struct {
	// ObjectID: Id of the object whose transform is to be set.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Transforms: List of transforms to be applied to the object.
	Transforms []ComponentTransform `json:"transforms" yaml:"transforms" schema:"transforms,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdCenter: Create a new solid from combining other smaller solids. In other words, every part of the input solids will be included in the output solid.
type ModelingCmdModelingCmdCenter struct {
	// SolidIds: Which solids to union together. Cannot be empty.
	SolidIds []UUID `json:"solid_ids" yaml:"solid_ids" schema:"solid_ids,required"`
	// Tolerance: The maximum acceptable surface gap computed between the joined solids. Must be positive (i.e. greater than zero).
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdDistance: Change what the default camera is looking at.
type ModelingCmdModelingCmdDistance struct {
	// Center: What the camera is looking at. Center of the camera's field of vision
	Center Point3D `json:"center" yaml:"center" schema:"center,required"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Up: Which way is "up", from the camera's point of view.
	Up Point3D `json:"up" yaml:"up" schema:"up,required"`
	// Vantage: Where the camera is positioned
	Vantage Point3D `json:"vantage" yaml:"vantage" schema:"vantage,required"`
}

// ModelingCmdModelingCmdEntityID: Create a new solid from intersecting several other solids. In other words, the part of the input solids where they all overlap will be the output solid.
type ModelingCmdModelingCmdEntityID struct {
	// SolidIds: Which solids to intersect together
	SolidIds []UUID `json:"solid_ids" yaml:"solid_ids" schema:"solid_ids,required"`
	// Tolerance: The maximum acceptable surface gap computed between the joined solids. Must be positive (i.e. greater than zero).
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdEntityIds: Obtain the sketch target id (if the path was drawn in sketchmode) for a path
type ModelingCmdModelingCmdEntityIds struct {
	// PathID: Which path to query
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdFaces: Change what the default camera is looking at.
type ModelingCmdModelingCmdFaces struct {
	// Center: What the camera is looking at. Center of the camera's field of vision
	Center Point3D `json:"center" yaml:"center" schema:"center,required"`
	// FovY: The field of view angle in the y direction, in degrees.
	FovY float64 `json:"fov_y" yaml:"fov_y" schema:"fov_y"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Up: Which way is "up", from the camera's point of view.
	Up Point3D `json:"up" yaml:"up" schema:"up,required"`
	// Vantage: Where the camera is positioned
	Vantage Point3D `json:"vantage" yaml:"vantage" schema:"vantage,required"`
	// ZFar: The distance to the far clipping plane.
	ZFar float64 `json:"z_far" yaml:"z_far" schema:"z_far"`
	// ZNear: The distance to the near clipping plane.
	ZNear float64 `json:"z_near" yaml:"z_near" schema:"z_near"`
}

// ModelingCmdModelingCmdFormat: Start dragging the mouse.
type ModelingCmdModelingCmdFormat struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdModelingCmdInteraction: Determines the gradient (dFdu, dFdv) + normal vector on a brep face evaluated by parameters u,v
type ModelingCmdModelingCmdInteraction struct {
	// ObjectID: Which face is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Uv: The 2D parameter-space u,v position to evaluate the surface at
	Uv Point2D `json:"uv" yaml:"uv" schema:"uv,required"`
}

// ModelingCmdModelingCmdNumRepetitions: Create a new solid from subtracting several other solids. The 'target' is what will be cut from. The 'tool' is what will be cut out from 'target'.
type ModelingCmdModelingCmdNumRepetitions struct {
	// TargetIds: Geometry to cut out from.
	TargetIds []UUID `json:"target_ids" yaml:"target_ids" schema:"target_ids,required"`
	// Tolerance: The maximum acceptable surface gap computed between the target and the solids cut out from it. Must be positive (i.e. greater than zero).
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// ToolIds: Will be cut out from the 'target'.
	ToolIds []UUID `json:"tool_ids" yaml:"tool_ids" schema:"tool_ids,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdOpposite: Changes the current highlighted entity to these entities.
type ModelingCmdModelingCmdOpposite struct {
	// Entities: Highlight these entities.
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdPath: Command for revolving a solid 2d.
type ModelingCmdModelingCmdPath struct {
	// Angle: The signed angle of revolution (in degrees, must be <= 360 in either direction)
	Angle Angle `json:"angle" yaml:"angle" schema:"angle,required"`
	// Axis: The axis of the extrusion (taken from the origin)
	Axis Point3D `json:"axis" yaml:"axis" schema:"axis,required"`
	// AxisIs2D: If true, the axis is interpreted within the 2D space of the solid 2D's plane
	AxisIs2D bool `json:"axis_is_2d" yaml:"axis_is_2d" schema:"axis_is_2d,required"`
	// Opposite: Should the revolution also revolve in the opposite direction along the given axis? If so, this specifies its angle.
	Opposite string `json:"opposite" yaml:"opposite" schema:"opposite"`
	// Origin: The origin of the extrusion axis
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin,required"`
	// Target: Which sketch to revolve. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Tolerance: The maximum acceptable surface gap computed between the revolution surface joints. Must be positive (i.e. greater than zero).
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdSequence: Sets whether or not changes to the scene or its objects will be done as a "dry run" In a dry run, successful commands won't actually change the model. This is useful for catching errors before actually making the change.
type ModelingCmdModelingCmdSequence struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdTarget: Create a new annotation
type ModelingCmdModelingCmdTarget struct {
	// AnnotationType: What type of annotation to create.
	AnnotationType AnnotationType `json:"annotation_type" yaml:"annotation_type" schema:"annotation_type,required"`
	// Clobber: If true, any existing drawables within the obj will be replaced (the object will be reset)
	Clobber bool `json:"clobber" yaml:"clobber" schema:"clobber,required"`
	// Options: What should the annotation contain?
	Options AnnotationOptions `json:"options" yaml:"options" schema:"options,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdTolerance: What type of entity is this?
type ModelingCmdModelingCmdTolerance struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdUp: Set the properties of the tool lines for the scene.
type ModelingCmdModelingCmdUp struct {
	// Color: The color to set the tool line to.
	Color Color `json:"color" yaml:"color" schema:"color"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdVantage: Set the default system properties used when a specific property isn't set.
type ModelingCmdModelingCmdVantage struct {
	// Color: The default system color.
	Color Color `json:"color" yaml:"color" schema:"color"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdModelingCmdWindow: Set opacity of the entity.
type ModelingCmdModelingCmdWindow struct {
	// EntityID: Which entity is being changed.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Opacity: How transparent should it be? 0 or lower is totally transparent. 1 or greater is totally opaque.
	Opacity float64 `json:"opacity" yaml:"opacity" schema:"opacity,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdMovePathPen: Extrude the object along a path.
type ModelingCmdMovePathPen struct {
	// RelativeTo: What is this sweep relative to?
	RelativeTo RelativeTo `json:"relative_to" yaml:"relative_to" schema:"relative_to"`
	// Sectional: If true, the sweep will be broken up into sub-sweeps (extrusions, revolves, sweeps) based on the trajectory path components.
	Sectional bool `json:"sectional" yaml:"sectional" schema:"sectional,required"`
	// Target: Which sketch to sweep. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Tolerance: The maximum acceptable surface gap computed between the revolution surface joints. Must be positive (i.e. greater than zero).
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// Trajectory: Path along which to sweep.
	Trajectory UUID `json:"trajectory" yaml:"trajectory" schema:"trajectory,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdNumRepetitions: Get a concise description of all of solids edges.
type ModelingCmdNumRepetitions struct {
	// EdgeID: Any edge that lies on the extrusion base path.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// ObjectID: The Solid3d object whose info is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdObjectID: Adds one or more entities (by UUID) to the selection.
type ModelingCmdObjectID struct {
	// Entities: Which entities to select
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdOpposite: Camera drag continued.
type ModelingCmdOpposite struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Sequence: Logical timestamp. The client should increment this with every event in the current mouse drag. That way, if the events are being sent over an unordered channel, the API can ignore the older events.
	Sequence int `json:"sequence" yaml:"sequence" schema:"sequence"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The current mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdOrigin: Create a helix using the input cylinder and other specified parameters.
type ModelingCmdOrigin struct {
	// CylinderID: ID of the cylinder.
	CylinderID UUID `json:"cylinder_id" yaml:"cylinder_id" schema:"cylinder_id,required"`
	// IsClockwise: Is the helix rotation clockwise?
	IsClockwise bool `json:"is_clockwise" yaml:"is_clockwise" schema:"is_clockwise,required"`
	// Length: Length of the helix.
	Length float64 `json:"length" yaml:"length" schema:"length,required"`
	// Revolutions: Number of revolutions.
	Revolutions float64 `json:"revolutions" yaml:"revolutions" schema:"revolutions,required"`
	// StartAngle: Start angle.
	StartAngle Angle `json:"start_angle" yaml:"start_angle" schema:"start_angle"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdPath: Command for extruding a solid 2d.
type ModelingCmdPath struct {
	// Distance: How far off the plane to extrude
	Distance float64 `json:"distance" yaml:"distance" schema:"distance,required"`
	// ExtrudeMethod: Should the extrusion create a new object or be part of the existing object. If a new object is created, the command id will be the id of the newly created object.
	ExtrudeMethod ExtrudeMethod `json:"extrude_method" yaml:"extrude_method" schema:"extrude_method"`
	// Faces: Which IDs should the new faces have? If this isn't given, the engine will generate IDs.
	Faces ExtrudedFaceInfo `json:"faces" yaml:"faces" schema:"faces"`
	// Opposite: Should the extrusion also extrude in the opposite direction? If so, this specifies its distance.
	Opposite string `json:"opposite" yaml:"opposite" schema:"opposite"`
	// Target: Which sketch to extrude. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdPathID: Gets all edges which are opposite the given edge, across all possible faces.
type ModelingCmdPathID struct {
	// AlongVector: If given, only faces parallel to this vector will be considered.
	AlongVector Point3D `json:"along_vector" yaml:"along_vector" schema:"along_vector"`
	// EdgeID: Which edge you want the opposites of.
	EdgeID UUID `json:"edge_id" yaml:"edge_id" schema:"edge_id,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdPathJson: Evaluates the position of a path in one shot (engine utility for kcl executor)
type ModelingCmdPathJson struct {
	// PathJson: The path in json form (the serialized result of the kcl Sketch/Path object
	PathJson string `json:"path_json" yaml:"path_json" schema:"path_json,required"`
	// T: The evaluation parameter (path curve parameter in the normalized domain [0, 1])
	T float64 `json:"t" yaml:"t" schema:"t,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdRelativeTo: What is this entity's parent?
type ModelingCmdRelativeTo struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdReq: A graphics command submitted to the KittyCAD engine via the Modeling API.
type ModelingCmdReq struct {
	// Cmd: Which command to submit to the Kittycad engine.
	Cmd any `json:"cmd" yaml:"cmd" schema:"cmd,required"`
	// CmdID: ID of command being submitted.
	CmdID UUID `json:"cmd_id" yaml:"cmd_id" schema:"cmd_id,required"`
}

// ModelingCmdRevolve: Mirror the input entities over the specified axis. (Currently only supports sketches)
type ModelingCmdRevolve struct {
	// Axis: Axis to use as mirror.
	Axis Point3D `json:"axis" yaml:"axis" schema:"axis,required"`
	// Ids: ID of the mirror entities.
	Ids []UUID `json:"ids" yaml:"ids" schema:"ids,required"`
	// Point: Point through which the mirror axis passes.
	Point Point3D `json:"point" yaml:"point" schema:"point,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdRevolveAboutEdge: Changes visibility of scene-wide edge lines on brep solids
type ModelingCmdRevolveAboutEdge struct {
	// Hidden: Whether or not the edge lines should be hidden.
	Hidden bool `json:"hidden" yaml:"hidden" schema:"hidden,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdRotateDuplicates: Make a new path by offsetting an object by a given distance. The new path's ID will be the ID of this command.
type ModelingCmdRotateDuplicates struct {
	// FaceID: If the object is a solid, this is the ID of the face to base the offset on. If given, and `object_id` refers to a solid, then this face on the solid will be offset. If given but `object_id` doesn't refer to a solid, responds with an error. If not given, then `object_id` itself will be offset directly.
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id"`
	// ObjectID: The object that will be offset (can be a path, sketch, or a solid)
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Offset: The distance to offset the path (positive for outset, negative for inset)
	Offset float64 `json:"offset" yaml:"offset" schema:"offset,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSectionIds: Set the material properties of an object
type ModelingCmdSectionIds struct {
	// AmbientOcclusion: Ambient Occlusion of the new material
	AmbientOcclusion float64 `json:"ambient_occlusion" yaml:"ambient_occlusion" schema:"ambient_occlusion,required"`
	// Color: Color of the new material
	Color Color `json:"color" yaml:"color" schema:"color,required"`
	// Metalness: Metalness of the new material
	Metalness float64 `json:"metalness" yaml:"metalness" schema:"metalness,required"`
	// ObjectID: Which object to change
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Roughness: Roughness of the new material
	Roughness float64 `json:"roughness" yaml:"roughness" schema:"roughness,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSectional: How many children does the entity have?
type ModelingCmdSectional struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSegment: Command for shelling a solid3d face
type ModelingCmdSegment struct {
	// FaceIds: Which faces to remove, leaving only the shell.
	FaceIds []UUID `json:"face_ids" yaml:"face_ids" schema:"face_ids,required"`
	// Hollow: If true, the Solid3D is made hollow instead of removing the selected faces
	Hollow bool `json:"hollow" yaml:"hollow" schema:"hollow"`
	// ObjectID: Which Solid3D is being shelled.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// ShellThickness: How thick the shell should be. Smaller values mean a thinner shell.
	ShellThickness float64 `json:"shell_thickness" yaml:"shell_thickness" schema:"shell_thickness,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSequence: Determines whether a brep face is planar and returns its surface-local planar axes if so
type ModelingCmdSequence struct {
	// ObjectID: Which face is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdShellThickness: Removes one or more entities (by UUID) from the selection.
type ModelingCmdShellThickness struct {
	// Entities: Which entities to unselect
	Entities []UUID `json:"entities" yaml:"entities" schema:"entities,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSolid3DshellFace: Removes all of the Objects in the scene
type ModelingCmdSolid3DshellFace struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSpacing: Clear the selection
type ModelingCmdSpacing struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdStartPath: Extend a path by adding a new segment which starts at the path's "pen". If no "pen" location has been set before (via `MovePen`), then the pen is at the origin.
type ModelingCmdStartPath struct {
	// Path: The ID of the command which created the path.
	Path UUID `json:"path" yaml:"path" schema:"path,required"`
	// Segment: Segment to append to the path. This segment will implicitly begin at the current "pen" location.
	Segment any `json:"segment" yaml:"segment" schema:"segment,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdSweep: What is the distance between these two entities?
type ModelingCmdSweep struct {
	// DistanceType: Type of distance to be measured.
	DistanceType any `json:"distance_type" yaml:"distance_type" schema:"distance_type,required"`
	// EntityId1: ID of the first entity being queried.
	EntityId1 UUID `json:"entity_id1" yaml:"entity_id1" schema:"entity_id1,required"`
	// EntityId2: ID of the second entity being queried.
	EntityId2 UUID `json:"entity_id2" yaml:"entity_id2" schema:"entity_id2,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdT: Start a new path.
type ModelingCmdT struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTarget: Camera drag ended
type ModelingCmdTarget struct {
	// Interaction: The type of camera drag interaction.
	Interaction CameraDragInteractionType `json:"interaction" yaml:"interaction" schema:"interaction,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Window: The final mouse position.
	Window Point2D `json:"window" yaml:"window" schema:"window,required"`
}

// ModelingCmdTo: Command for twist extruding a solid 2d.
type ModelingCmdTo struct {
	// AngleStepSize: Angle step interval (converted to whole number degrees and bounded between 4° and 90°)
	AngleStepSize Angle `json:"angle_step_size" yaml:"angle_step_size" schema:"angle_step_size"`
	// Center2D: Center to twist about (relative to 2D sketch)
	Center2D Point2D `json:"center_2d" yaml:"center_2d" schema:"center_2d"`
	// Distance: How far off the plane to extrude
	Distance float64 `json:"distance" yaml:"distance" schema:"distance,required"`
	// Faces: Which IDs should the new faces have? If this isn't given, the engine will generate IDs.
	Faces ExtrudedFaceInfo `json:"faces" yaml:"faces" schema:"faces"`
	// Target: Which sketch to extrude. Must be a closed 2D solid.
	Target UUID `json:"target" yaml:"target" schema:"target,required"`
	// Tolerance: The twisted surface loft tolerance
	Tolerance float64 `json:"tolerance" yaml:"tolerance" schema:"tolerance,required"`
	// TotalRotationAngle: Total rotation of the section
	TotalRotationAngle Angle `json:"total_rotation_angle" yaml:"total_rotation_angle" schema:"total_rotation_angle,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTolerance: Export a sketch to a file.
type ModelingCmdTolerance struct {
	// EntityIds: IDs of the entities to be exported.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// Format: The file format to export to.
	Format any `json:"format" yaml:"format" schema:"format,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTotalRotationAngle: Export the scene to a file.
type ModelingCmdTotalRotationAngle struct {
	// EntityIds: IDs of the entities to be exported. If this is empty, then all entities are exported.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// Format: The file format to export to.
	Format any `json:"format" yaml:"format" schema:"format,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTrajectory: What are all UUIDs of all the paths sketched on top of this entity?
type ModelingCmdTrajectory struct {
	// EntityID: ID of the entity being queried.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTransform: Updates the camera to center to the center of the current scene's bounds
type ModelingCmdTransform struct {
	// CameraMovement: Dictates whether or not the camera position should be adjusted during this operation If no movement is requested, the camera will orbit around the new center from its current position
	CameraMovement CameraMovement `json:"camera_movement" yaml:"camera_movement" schema:"camera_movement"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTransforms: Fit the view to the specified object(s).
type ModelingCmdTransforms struct {
	// Animated: Whether or not to animate the camera movement.
	Animated bool `json:"animated" yaml:"animated" schema:"animated"`
	// ObjectIds: Which objects to fit camera to; if empty, fit to all non-default objects. Defaults to empty vector.
	ObjectIds []UUID `json:"object_ids" yaml:"object_ids" schema:"object_ids"`
	// Padding: How much to pad the view frame by, as a fraction of the object(s) bounding box size. Negative padding will crop the view of the object proportionally. e.g. padding = 0.2 means the view will span 120% of the object(s) bounding box, and padding = -0.2 means the view will span 80% of the object(s) bounding box.
	Padding float64 `json:"padding" yaml:"padding" schema:"padding"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdTwistExtrude: Export the scene to a file.
type ModelingCmdTwistExtrude struct {
	// EntityIds: IDs of the entities to be exported. If this is empty, then all entities are exported.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
	// Format: The file format to export to.
	Format any `json:"format" yaml:"format" schema:"format,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdUp: Get the plane for sketch mode.
type ModelingCmdUp struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdVantage: Get the plane for sketch mode.
type ModelingCmdVantage struct {
	// ConstraintBound: Which constraint to apply.
	ConstraintBound PathComponentConstraintBound `json:"constraint_bound" yaml:"constraint_bound" schema:"constraint_bound,required"`
	// ConstraintType: What part of the curve should be constrained.
	ConstraintType PathComponentConstraintType `json:"constraint_type" yaml:"constraint_type" schema:"constraint_type,required"`
	// ObjectID: Which curve to constrain.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdVdegree: Add a hole to a Solid2d object before extruding it.
type ModelingCmdVdegree struct {
	// HoleID: The id of the path to use as the inner profile (hole).
	HoleID UUID `json:"hole_id" yaml:"hole_id" schema:"hole_id,required"`
	// ObjectID: Which object to add the hole to.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdView: Set the current tool.
type ModelingCmdView struct {
	// Tool: What tool should be active.
	Tool SceneToolType `json:"tool" yaml:"tool" schema:"tool,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdWindow: Gets the shared edge between these two faces if it exists
type ModelingCmdWindow struct {
	// FaceIds: The faces being queried
	FaceIds []UUID `json:"face_ids" yaml:"face_ids" schema:"face_ids,required"`
	// ObjectID: Which object is being queried.
	ObjectID UUID `json:"object_id" yaml:"object_id" schema:"object_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdZfar: Get type of the given curve.
type ModelingCmdZfar struct {
	// CurveID: Which curve to query.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingCmdZnear: Get control points of the given curve.
type ModelingCmdZnear struct {
	// CurveID: Which curve to query.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// ModelingSessionData: Successful Websocket response.
type ModelingSessionData struct {
	// APICallID: ID of the API call this modeling session is using. Useful for tracing and debugging.
	APICallID string `json:"api_call_id" yaml:"api_call_id" schema:"api_call_id,required"`
}

// MouseClick: The response from the `MouseClick` command.
type MouseClick struct {
	// EntitiesModified: Entities that are modified.
	EntitiesModified []UUID `json:"entities_modified" yaml:"entities_modified" schema:"entities_modified,required"`
	// EntitiesSelected: Entities that are selected.
	EntitiesSelected []UUID `json:"entities_selected" yaml:"entities_selected" schema:"entities_selected,required"`
}

// MouseMove: The response from the `MouseMove` endpoint.
type MouseMove struct {
}

// MovePathPen: The response from the `MovePathPen` endpoint.
type MovePathPen struct {
}

// NewAnnotation: The response from the `NewAnnotation` endpoint.
type NewAnnotation struct {
}

// Oauth2ClientInfo: Information about an OAuth 2.0 client.
type Oauth2ClientInfo struct {
	// CsrfToken: Value used for [CSRF](https://tools.ietf.org/html/rfc6749#section-10.12) protection via the `state` parameter.
	CsrfToken string `json:"csrf_token" yaml:"csrf_token" schema:"csrf_token"`
	// OidcNonce: Nonce required for OIDC flows.
	OidcNonce string `json:"oidc_nonce" yaml:"oidc_nonce" schema:"oidc_nonce"`
	// PkceCodeVerifier: Code Verifier used for [PKCE]((https://tools.ietf.org/html/rfc7636)) protection via the `code_verifier` parameter. The value must have a minimum length of 43 characters and a maximum length of 128 characters.  Each character must be ASCII alphanumeric or one of the characters "-" / "." / "_" / "~".
	PkceCodeVerifier string `json:"pkce_code_verifier" yaml:"pkce_code_verifier" schema:"pkce_code_verifier"`
	// Url: The URL for consent.
	Url string `json:"url" yaml:"url" schema:"url"`
}

// Oauth2GrantType: An OAuth 2.0 Grant Type. These are documented here: <https://oauth.net/2/grant-types/>.
type Oauth2GrantType string

const (
	// Oauth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode: An OAuth 2.0 Device Authorization Grant.
	Oauth2GrantTypeUrnietfparamsoauthgrantTypedeviceCode Oauth2GrantType = "urn:ietf:params:oauth:grant-type:device_code"
)

// ObjectBringToFront: The response from the `ObjectBringToFront` endpoint.
type ObjectBringToFront struct {
}

// ObjectSetMaterialParamsPbr: The response from the `ObjectSetMaterialParamsPbr` endpoint.
type ObjectSetMaterialParamsPbr struct {
}

// ObjectVisible: The response from the `ObjectVisible` endpoint.
type ObjectVisible struct {
}

// OkModelingCmdResponseCameraDragEnd is the type definition for a OkModelingCmdResponseCameraDragEnd.
type OkModelingCmdResponseCameraDragEnd struct {
	// Data: The response from the 'SetGridScale'.
	Data SetGridAutoScale `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseCameraDragMove is the type definition for a OkModelingCmdResponseCameraDragMove.
type OkModelingCmdResponseCameraDragMove struct {
	// Data: The response from the 'BooleanSubtract'.
	Data BooleanSubtract `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseCameraDragStart is the type definition for a OkModelingCmdResponseCameraDragStart.
type OkModelingCmdResponseCameraDragStart struct {
	// Data: The response from the `ObjectVisible` endpoint.
	Data ObjectVisible `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseClosePath is the type definition for a OkModelingCmdResponseClosePath.
type OkModelingCmdResponseClosePath struct {
	// Data: The response from the 'BooleanUnion'.
	Data BooleanUnion `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseCurveSetConstraint is the type definition for a OkModelingCmdResponseCurveSetConstraint.
type OkModelingCmdResponseCurveSetConstraint struct {
	// Data: The response from the `ZoomToFit` command.
	Data ZoomToFit `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseData is the type definition for a OkModelingCmdResponseData.
type OkModelingCmdResponseData struct {
	// Data: The response of the `EngineUtilEvaluatePath` endpoint
	Data EngineUtilEvaluatePath `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDefaultCameraCenterToScene is the type definition for a OkModelingCmdResponseDefaultCameraCenterToScene.
type OkModelingCmdResponseDefaultCameraCenterToScene struct {
	// Data: Corresponding coordinates of given window coordinates, intersected on given plane.
	Data PlaneIntersectAndProject `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDefaultCameraCenterToSelection is the type definition for a OkModelingCmdResponseDefaultCameraCenterToSelection.
type OkModelingCmdResponseDefaultCameraCenterToSelection struct {
	// Data: The 3D center of mass on the surface
	Data FaceGetCenter `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDefaultCameraLookAt is the type definition for a OkModelingCmdResponseDefaultCameraLookAt.
type OkModelingCmdResponseDefaultCameraLookAt struct {
	// Data: The response from the `ObjectSetMaterialParamsPbr` endpoint.
	Data ObjectSetMaterialParamsPbr `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDefaultCameraPerspectiveSettings is the type definition for a OkModelingCmdResponseDefaultCameraPerspectiveSettings.
type OkModelingCmdResponseDefaultCameraPerspectiveSettings struct {
	// Data: The response from the `Solid3dFilletEdge` endpoint.
	Data Solid3DFilletEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDefaultCameraSetOrthographic is the type definition for a OkModelingCmdResponseDefaultCameraSetOrthographic.
type OkModelingCmdResponseDefaultCameraSetOrthographic struct {
	// Data: The response from the `PathGetSketchTargetUuid` command.
	Data PathGetSketchTargetUuid `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDefaultCameraSetPerspective is the type definition for a OkModelingCmdResponseDefaultCameraSetPerspective.
type OkModelingCmdResponseDefaultCameraSetPerspective struct {
	// Data: Surface-local planar axes (if available)
	Data FaceIsPlanar `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseDisableDryRun is the type definition for a OkModelingCmdResponseDisableDryRun.
type OkModelingCmdResponseDisableDryRun struct {
	// Data: The response from the `DefaultCameraSetView` command.
	Data DefaultCameraSetView `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEdgeLinesVisible is the type definition for a OkModelingCmdResponseEdgeLinesVisible.
type OkModelingCmdResponseEdgeLinesVisible struct {
	// Data: The response from the `MakeAxesGizmo` endpoint.
	Data MakeAxesGizmo `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEmpty: An empty response, used for any command that does not explicitly have a response defined here.
type OkModelingCmdResponseEmpty struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEnableDryRun is the type definition for a OkModelingCmdResponseEnableDryRun.
type OkModelingCmdResponseEnableDryRun struct {
	// Data: The response from the `DefaultCameraGetSettings` command.
	Data DefaultCameraGetSettings `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEnableSketchMode is the type definition for a OkModelingCmdResponseEnableSketchMode.
type OkModelingCmdResponseEnableSketchMode struct {
	// Data: The response from the `ViewIsometric` command.
	Data ViewIsometric `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEngineUtilEvaluatePath is the type definition for a OkModelingCmdResponseEngineUtilEvaluatePath.
type OkModelingCmdResponseEngineUtilEvaluatePath struct {
	// Data: The response from the `StartPath` endpoint.
	Data StartPath `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityFade is the type definition for a OkModelingCmdResponseEntityFade.
type OkModelingCmdResponseEntityFade struct {
	// Data: The response from the `Export` endpoint.
	Data Export `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetAllChildUuids is the type definition for a OkModelingCmdResponseEntityGetAllChildUuids.
type OkModelingCmdResponseEntityGetAllChildUuids struct {
	// Data: The response from the `EntityMakeHelixFromEdge` endpoint.
	Data EntityMakeHelixFromEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetChildUuid is the type definition for a OkModelingCmdResponseEntityGetChildUuid.
type OkModelingCmdResponseEntityGetChildUuid struct {
	// Data: The response from the `EntityLinearPattern` command.
	Data EntityLinearPattern `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetNumChildren is the type definition for a OkModelingCmdResponseEntityGetNumChildren.
type OkModelingCmdResponseEntityGetNumChildren struct {
	// Data: The response from the `EntityMirror` endpoint.
	Data EntityMirror `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetParentID is the type definition for a OkModelingCmdResponseEntityGetParentID.
type OkModelingCmdResponseEntityGetParentID struct {
	// Data: The response from the `EntityMakeHelix` endpoint.
	Data EntityMakeHelix `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntityGetSketchPaths is the type definition for a OkModelingCmdResponseEntityGetSketchPaths.
type OkModelingCmdResponseEntityGetSketchPaths struct {
	// Data: Extrusion face info struct (useful for maintaining mappings between source path segment ids and extrusion faces)
	Data ExtrusionFaceInfo `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseEntitySetOpacity is the type definition for a OkModelingCmdResponseEntitySetOpacity.
type OkModelingCmdResponseEntitySetOpacity struct {
	// Data: The response from the `Export2d` endpoint.
	Data Export2D `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseExport is the type definition for a OkModelingCmdResponseExport.
type OkModelingCmdResponseExport struct {
	// Data: The plane for sketch mode.
	Data GetSketchModePlane `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseExport2D is the type definition for a OkModelingCmdResponseExport2D.
type OkModelingCmdResponseExport2D struct {
	// Data: The volume response.
	Data Volume `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseExport3D is the type definition for a OkModelingCmdResponseExport3D.
type OkModelingCmdResponseExport3D struct {
	// Data: The surface area response.
	Data SurfaceArea `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseExtendPath is the type definition for a OkModelingCmdResponseExtendPath.
type OkModelingCmdResponseExtendPath struct {
	// Data: The response from the `Revolve` endpoint.
	Data Revolve `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseExtrude is the type definition for a OkModelingCmdResponseExtrude.
type OkModelingCmdResponseExtrude struct {
	// Data: The response from the `RevolveAboutEdge` endpoint.
	Data RevolveAboutEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseHandleMouseDragEnd is the type definition for a OkModelingCmdResponseHandleMouseDragEnd.
type OkModelingCmdResponseHandleMouseDragEnd struct {
	// Data: The response from the `GetEntityType` command.
	Data GetEntityType `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseHandleMouseDragMove is the type definition for a OkModelingCmdResponseHandleMouseDragMove.
type OkModelingCmdResponseHandleMouseDragMove struct {
	// Data: The response from the `Solid3dGetPrevAdjacentEdge` command.
	Data Solid3DGetPrevAdjacentEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseHandleMouseDragStart is the type definition for a OkModelingCmdResponseHandleMouseDragStart.
type OkModelingCmdResponseHandleMouseDragStart struct {
	// Data: The response from the `Solid3dGetOppositeEdge` command.
	Data Solid3DGetOppositeEdge `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseHighlightSetEntities is the type definition for a OkModelingCmdResponseHighlightSetEntities.
type OkModelingCmdResponseHighlightSetEntities struct {
	// Data: The response from the `DisableDryRun` endpoint.
	Data DisableDryRun `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseHighlightSetEntity is the type definition for a OkModelingCmdResponseHighlightSetEntity.
type OkModelingCmdResponseHighlightSetEntity struct {
	// Data: The response from the `EntityClone` command.
	Data EntityClone `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseLoft is the type definition for a OkModelingCmdResponseLoft.
type OkModelingCmdResponseLoft struct {
	// Data: Edge info struct (useful for maintaining mappings between edges and faces and adjacent/opposite edges).
	Data AdjacencyInfo `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseMakeAxesGizmo is the type definition for a OkModelingCmdResponseMakeAxesGizmo.
type OkModelingCmdResponseMakeAxesGizmo struct {
	// Data: The response from the `Solid3dGetAllEdgeFaces` command.
	Data Solid3DGetAllEdgeFaces `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseMakePlane is the type definition for a OkModelingCmdResponseMakePlane.
type OkModelingCmdResponseMakePlane struct {
	// Data: The response from the `HighlightSetEntity` command.
	Data HighlightSetEntity `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseMouseMove is the type definition for a OkModelingCmdResponseMouseMove.
type OkModelingCmdResponseMouseMove struct {
	// Data: The response from the `Loft` command.
	Data Loft `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseMovePathPen is the type definition for a OkModelingCmdResponseMovePathPen.
type OkModelingCmdResponseMovePathPen struct {
	// Data: The response from the `TwistExtrude` endpoint.
	Data TwistExtrude `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseNewAnnotation is the type definition for a OkModelingCmdResponseNewAnnotation.
type OkModelingCmdResponseNewAnnotation struct {
	// Data: The response from the `EnableSketchMode` endpoint.
	Data EnableSketchMode `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseObjectBringToFront is the type definition for a OkModelingCmdResponseObjectBringToFront.
type OkModelingCmdResponseObjectBringToFront struct {
	// Data: The response from the `RemoveSceneObjects` endpoint.
	Data RemoveSceneObjects `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseObjectSetMaterialParamsPbr is the type definition for a OkModelingCmdResponseObjectSetMaterialParamsPbr.
type OkModelingCmdResponseObjectSetMaterialParamsPbr struct {
	// Data: The response from the `SetSceneUnits` endpoint.
	Data SetSceneUnits `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseObjectVisible is the type definition for a OkModelingCmdResponseObjectVisible.
type OkModelingCmdResponseObjectVisible struct {
	// Data: The response from the `HandleMouseDragMove` endpoint.
	Data HandleMouseDragMove `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseOkModelingCmdResponseData is the type definition for a OkModelingCmdResponseOkModelingCmdResponseData.
type OkModelingCmdResponseOkModelingCmdResponseData struct {
	// Data: The response from the 'SetGridScale'.
	Data SetGridScale `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponsePlaneSetColor is the type definition for a OkModelingCmdResponsePlaneSetColor.
type OkModelingCmdResponsePlaneSetColor struct {
	// Data: The response from the `EntityGetNumChildren` command.
	Data EntityGetNumChildren `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseReconfigureStream is the type definition for a OkModelingCmdResponseReconfigureStream.
type OkModelingCmdResponseReconfigureStream struct {
	// Data: The response from the `CurveGetType` command.
	Data CurveGetType `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseRemoveSceneObjects is the type definition for a OkModelingCmdResponseRemoveSceneObjects.
type OkModelingCmdResponseRemoveSceneObjects struct {
	// Data: The response from the `ProjectEntityToPlane` command.
	Data ProjectEntityToPlane `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseRevolve is the type definition for a OkModelingCmdResponseRevolve.
type OkModelingCmdResponseRevolve struct {
	// Data: The response from the `SceneClearAll` endpoint.
	Data SceneClearAll `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseRevolveAboutEdge is the type definition for a OkModelingCmdResponseRevolveAboutEdge.
type OkModelingCmdResponseRevolveAboutEdge struct {
	// Data: The response from the `UpdateAnnotation` endpoint.
	Data UpdateAnnotation `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSceneClearAll is the type definition for a OkModelingCmdResponseSceneClearAll.
type OkModelingCmdResponseSceneClearAll struct {
	// Data: The response from the `SetTool` endpoint.
	Data SetTool `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectAdd is the type definition for a OkModelingCmdResponseSelectAdd.
type OkModelingCmdResponseSelectAdd struct {
	// Data: The response from the `EntitySetOpacity` endpoint.
	Data EntitySetOpacity `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectClear is the type definition for a OkModelingCmdResponseSelectClear.
type OkModelingCmdResponseSelectClear struct {
	// Data: Data from importing the files
	Data ImportedGeometry `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectRemove is the type definition for a OkModelingCmdResponseSelectRemove.
type OkModelingCmdResponseSelectRemove struct {
	// Data: The response from the `MakePlane` endpoint.
	Data MakePlane `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectReplace is the type definition for a OkModelingCmdResponseSelectReplace.
type OkModelingCmdResponseSelectReplace struct {
	// Data: The response from the `SketchModeDisable` endpoint.
	Data SketchModeDisable `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSelectWithPoint is the type definition for a OkModelingCmdResponseSelectWithPoint.
type OkModelingCmdResponseSelectWithPoint struct {
	// Data: Faces and edges id info (most used in identifying geometry in patterned and mirrored objects).
	Data FaceEdgeInfo `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSendObject is the type definition for a OkModelingCmdResponseSendObject.
type OkModelingCmdResponseSendObject struct {
	// Data: The response from the `DefaultCameraCenterToScene` endpoint.
	Data DefaultCameraCenterToScene `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetBackgroundColor is the type definition for a OkModelingCmdResponseSetBackgroundColor.
type OkModelingCmdResponseSetBackgroundColor struct {
	// Data: The response from the `MakeOffsetPath` command.
	Data MakeOffsetPath `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetCurrentToolProperties is the type definition for a OkModelingCmdResponseSetCurrentToolProperties.
type OkModelingCmdResponseSetCurrentToolProperties struct {
	// Data: The response from the `AddHoleFromOffset` command.
	Data AddHoleFromOffset `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetDefaultSystemProperties is the type definition for a OkModelingCmdResponseSetDefaultSystemProperties.
type OkModelingCmdResponseSetDefaultSystemProperties struct {
	// Data: The response from the `SelectGet` command.
	Data SelectGet `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetSceneUnits is the type definition for a OkModelingCmdResponseSetSceneUnits.
type OkModelingCmdResponseSetSceneUnits struct {
	// Data: The response from the `TakeSnapshot` command.
	Data TakeSnapshot `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetSelectionFilter is the type definition for a OkModelingCmdResponseSetSelectionFilter.
type OkModelingCmdResponseSetSelectionFilter struct {
	// Data: The response from the `PathGetCurveUuid` command.
	Data PathGetCurveUuid `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetSelectionType is the type definition for a OkModelingCmdResponseSetSelectionType.
type OkModelingCmdResponseSetSelectionType struct {
	// Data: Info about a path segment
	Data PathSegmentInfo `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSetTool is the type definition for a OkModelingCmdResponseSetTool.
type OkModelingCmdResponseSetTool struct {
	// Data: The response from the `EntityGetAllChildUuids` command.
	Data EntityGetAllChildUuids `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSketchModeDisable is the type definition for a OkModelingCmdResponseSketchModeDisable.
type OkModelingCmdResponseSketchModeDisable struct {
	// Data: The response from the `CameraDragMove` command. Note this is an "unreliable" channel message, so this data may need more data like a "sequence"
	Data CameraDragMove `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSolid2DaddHole is the type definition for a OkModelingCmdResponseSolid2DaddHole.
type OkModelingCmdResponseSolid2DaddHole struct {
	// Data: The response from the `SetSelectionFilter` endpoint.
	Data SetSelectionFilter `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSolid3DfilletEdge is the type definition for a OkModelingCmdResponseSolid3DfilletEdge.
type OkModelingCmdResponseSolid3DfilletEdge struct {
	// Data: The response from the `DefaultCameraSetPerspective` endpoint.
	Data DefaultCameraSetPerspective `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSolid3DshellFace is the type definition for a OkModelingCmdResponseSolid3DshellFace.
type OkModelingCmdResponseSolid3DshellFace struct {
	// Data: The response from the `HighlightSetEntities` endpoint.
	Data HighlightSetEntities `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseStartPath is the type definition for a OkModelingCmdResponseStartPath.
type OkModelingCmdResponseStartPath struct {
	// Data: The response from the `ExtendPath` endpoint.
	Data ExtendPath `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseSweep is the type definition for a OkModelingCmdResponseSweep.
type OkModelingCmdResponseSweep struct {
	// Data: The response from the `SelectAdd` endpoint.
	Data SelectAdd `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseTwistExtrude is the type definition for a OkModelingCmdResponseTwistExtrude.
type OkModelingCmdResponseTwistExtrude struct {
	// Data: The response from the `DefaultCameraLookAt` endpoint.
	Data DefaultCameraLookAt `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkModelingCmdResponseUpdateAnnotation is the type definition for a OkModelingCmdResponseUpdateAnnotation.
type OkModelingCmdResponseUpdateAnnotation struct {
	// Data: The response from the `SetCurrentToolProperties` endpoint.
	Data SetCurrentToolProperties `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataData: Information about the ICE servers.
type OkWebSocketResponseDataData struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataIceServerInfo: The trickle ICE candidate response.
type OkWebSocketResponseDataIceServerInfo struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataModeling: Data about the Modeling Session (application-level).
type OkWebSocketResponseDataModeling struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataModelingBatch: Information about the connected instance
type OkWebSocketResponseDataModelingBatch struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataOkWebSocketResponseDataData: Pong response to a Ping message.
type OkWebSocketResponseDataOkWebSocketResponseDataData struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataSdpAnswer: The exported files.
type OkWebSocketResponseDataSdpAnswer struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OkWebSocketResponseDataTrickleIce: The modeling command response.
type OkWebSocketResponseDataTrickleIce struct {
	// Data:
	Data Data `json:"data" yaml:"data" schema:"data,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// Org: An organization.
type Org struct {
	// AllowUsersInDomainToAutoJoin: If we should allow all future users who are created with email addresses from this domain to join the org.
	AllowUsersInDomainToAutoJoin bool `json:"allow_users_in_domain_to_auto_join" yaml:"allow_users_in_domain_to_auto_join" schema:"allow_users_in_domain_to_auto_join"`
	// BillingEmail: The billing email address of the org.
	BillingEmail string `json:"billing_email" yaml:"billing_email" schema:"billing_email,required"`
	// BillingEmailVerified: The date and time the billing email address was verified.
	BillingEmailVerified Time `json:"billing_email_verified" yaml:"billing_email_verified" schema:"billing_email_verified"`
	// Block: If the org should be blocked and the reason why.
	Block BlockReason `json:"block" yaml:"block" schema:"block"`
	// CanTrainOnData: If we can train on the orgs's data. This value overrides any individual user's `can_train_on_data` value if they are a member of the org.
	CanTrainOnData bool `json:"can_train_on_data" yaml:"can_train_on_data" schema:"can_train_on_data"`
	// CreatedAt: The date and time the org was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Domain: The org's domain.
	Domain string `json:"domain" yaml:"domain" schema:"domain"`
	// ID: The unique identifier for the org.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Image: The image for the org. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image"`
	// Name: The name of the org.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The org's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// StripeID: The org's stripe id.
	StripeID string `json:"stripe_id" yaml:"stripe_id" schema:"stripe_id"`
	// UpdatedAt: The date and time the org was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// OrgDetails: The user-modifiable parts of an organization.
type OrgDetails struct {
	// AllowUsersInDomainToAutoJoin: If we should allow all future users who are created with email addresses from this domain to join the org.
	AllowUsersInDomainToAutoJoin bool `json:"allow_users_in_domain_to_auto_join" yaml:"allow_users_in_domain_to_auto_join" schema:"allow_users_in_domain_to_auto_join"`
	// BillingEmail: The billing email address of the org.
	BillingEmail string `json:"billing_email" yaml:"billing_email" schema:"billing_email"`
	// Domain: The org's domain.
	Domain string `json:"domain" yaml:"domain" schema:"domain"`
	// Image: The image for the org. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image"`
	// Name: The name of the org.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The org's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// OrgMember: A member of an organization.
type OrgMember struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// Role: The user's role in the org.
	Role OrgRole `json:"role" yaml:"role" schema:"role,required"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// OrgMemberResultsPage: A single page of results
type OrgMemberResultsPage struct {
	// Items: list of items on this page of results
	Items []OrgMember `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// OrgResultsPage: A single page of results
type OrgResultsPage struct {
	// Items: list of items on this page of results
	Items []Org `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// OrgRole: The roles in an organization.
type OrgRole string

const (
	// OrgRoleAdmin: Admins can do anything in the org.
	OrgRoleAdmin OrgRole = "admin"
	// OrgRoleMember: Members of an org can not modify an org, but they belong in the org.
	OrgRoleMember OrgRole = "member"
	// OrgRoleServiceAccount: A service account role.
	OrgRoleServiceAccount OrgRole = "service_account"
)

// OrientToFace: The response from the `OrientToFace` command.
type OrientToFace struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}

// OriginTypeGlobal: Global Origin (0, 0, 0).
type OriginTypeGlobal struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OriginTypeLocal: Local Origin (center of object bounding box).
type OriginTypeLocal struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OriginTypeOrigin: Custom Origin (user specified point).
type OriginTypeOrigin struct {
	// Origin: Custom origin point.
	Origin Point3D `json:"origin" yaml:"origin" schema:"origin,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFile: Output file contents.
// <details><summary>JSON schema</summary>
//
// ```json { "description": "Output file contents.", "type": "object", "properties": { "contents": { "description": "The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON.", "type": "string" }, "name": { "description": "The name of the file.", "default": "", "type": "string" } } } ``` </details>
type OutputFile struct {
	// Contents: The contents of the file. This is base64 encoded so we can ensure it is UTF-8 for JSON.
	Contents string `json:"contents" yaml:"contents" schema:"contents"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name"`
}

// OutputFormat2D: AutoCAD drawing interchange format.
type OutputFormat2D struct {
	// Storage: Export storage.
	Storage DxfStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormat3Dcreated: Autodesk Filmbox (FBX) format.
type OutputFormat3Dcreated struct {
	// Created: Timestamp override.
	Created Time `json:"created" yaml:"created" schema:"created"`
	// Storage: Specifies which kind of FBX will be exported.
	Storage FbxStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// OutputFormat3Dfbx: Wavefront OBJ format.
type OutputFormat3Dfbx struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: Export length unit.
	//
	// Defaults to millimeters.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// OutputFormat3Dgltf: *ST**ereo**L**ithography format.
type OutputFormat3Dgltf struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Selection: Export selection.
	Selection any `json:"selection" yaml:"selection" schema:"selection,required"`
	// Storage: Export storage.
	Storage StlStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: Export length unit.
	//
	// Defaults to millimeters.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// OutputFormat3Dpresentation: The PLY Polygon File Format.
type OutputFormat3Dpresentation struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Selection: Export selection.
	Selection any `json:"selection" yaml:"selection" schema:"selection,required"`
	// Storage: The storage for the output PLY file.
	Storage PlyStorage `json:"storage" yaml:"storage" schema:"storage,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
	// Units: Export length unit.
	//
	// Defaults to millimeters.
	Units UnitLength `json:"units" yaml:"units" schema:"units,required"`
}

// OutputFormat3Dstorage: ISO 10303-21 (STEP) format.
type OutputFormat3Dstorage struct {
	// Coords: Co-ordinate system of output data.
	//
	// Defaults to the [KittyCAD co-ordinate system].
	//
	// [KittyCAD co-ordinate system]: ../coord/constant.KITTYCAD.html
	Coords System `json:"coords" yaml:"coords" schema:"coords,required"`
	// Created: Timestamp override.
	Created Time `json:"created" yaml:"created" schema:"created"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathCommand: The path component command type (within a Path)
type PathCommand string

const (
	// PathCommandMoveTo represents the PathCommand `"move_to"`.
	PathCommandMoveTo PathCommand = "move_to"
	// PathCommandLineTo represents the PathCommand `"line_to"`.
	PathCommandLineTo PathCommand = "line_to"
	// PathCommandBezCurveTo represents the PathCommand `"bez_curve_to"`.
	PathCommandBezCurveTo PathCommand = "bez_curve_to"
	// PathCommandNurbsCurveTo represents the PathCommand `"nurbs_curve_to"`.
	PathCommandNurbsCurveTo PathCommand = "nurbs_curve_to"
	// PathCommandAddArc represents the PathCommand `"add_arc"`.
	PathCommandAddArc PathCommand = "add_arc"
)

// PathComponentConstraintBound: The path component constraint bounds type
type PathComponentConstraintBound string

const (
	// PathComponentConstraintBoundUnconstrained represents the PathComponentConstraintBound `"unconstrained"`.
	PathComponentConstraintBoundUnconstrained PathComponentConstraintBound = "unconstrained"
	// PathComponentConstraintBoundPartiallyConstrained represents the PathComponentConstraintBound `"partially_constrained"`.
	PathComponentConstraintBoundPartiallyConstrained PathComponentConstraintBound = "partially_constrained"
	// PathComponentConstraintBoundFullyConstrained represents the PathComponentConstraintBound `"fully_constrained"`.
	PathComponentConstraintBoundFullyConstrained PathComponentConstraintBound = "fully_constrained"
)

// PathComponentConstraintType: The path component constraint type
type PathComponentConstraintType string

const (
	// PathComponentConstraintTypeUnconstrained represents the PathComponentConstraintType `"unconstrained"`.
	PathComponentConstraintTypeUnconstrained PathComponentConstraintType = "unconstrained"
	// PathComponentConstraintTypeVertical represents the PathComponentConstraintType `"vertical"`.
	PathComponentConstraintTypeVertical PathComponentConstraintType = "vertical"
	// PathComponentConstraintTypeHorizontal represents the PathComponentConstraintType `"horizontal"`.
	PathComponentConstraintTypeHorizontal PathComponentConstraintType = "horizontal"
	// PathComponentConstraintTypeEqualLength represents the PathComponentConstraintType `"equal_length"`.
	PathComponentConstraintTypeEqualLength PathComponentConstraintType = "equal_length"
	// PathComponentConstraintTypeParallel represents the PathComponentConstraintType `"parallel"`.
	PathComponentConstraintTypeParallel PathComponentConstraintType = "parallel"
	// PathComponentConstraintTypeAngleBetween represents the PathComponentConstraintType `"angle_between"`.
	PathComponentConstraintTypeAngleBetween PathComponentConstraintType = "angle_between"
)

// PathGetCurveUuid: The response from the `PathGetCurveUuid` command.
type PathGetCurveUuid struct {
	// CurveID: The UUID of the curve entity.
	CurveID UUID `json:"curve_id" yaml:"curve_id" schema:"curve_id,required"`
}

// PathGetCurveUuidsForVertices: The response from the `PathGetCurveUuidsForVertices` command.
type PathGetCurveUuidsForVertices struct {
	// CurveIds: The UUIDs of the curve entities.
	CurveIds []UUID `json:"curve_ids" yaml:"curve_ids" schema:"curve_ids,required"`
}

// PathGetInfo: The response from the `PathGetInfo` command.
type PathGetInfo struct {
	// Segments: All segments in the path, in the order they were added.
	Segments []PathSegmentInfo `json:"segments" yaml:"segments" schema:"segments,required"`
}

// PathGetSketchTargetUuid: The response from the `PathGetSketchTargetUuid` command.
type PathGetSketchTargetUuid struct {
	// TargetID: The UUID of the sketch target.
	TargetID UUID `json:"target_id" yaml:"target_id" schema:"target_id"`
}

// PathGetVertexUuids: The response from the `PathGetVertexUuids` command.
type PathGetVertexUuids struct {
	// VertexIds: The UUIDs of the vertex entities.
	VertexIds []UUID `json:"vertex_ids" yaml:"vertex_ids" schema:"vertex_ids,required"`
}

// PathSegmentArc: Adds a generic conic section specified by the end point, interior point and tangents at the start and end of the section.
type PathSegmentArc struct {
	// End: End point of the conic.
	End Point2D `json:"end" yaml:"end" schema:"end,required"`
	// EndTangent: Tangent at the end of the conic.
	EndTangent Point2D `json:"end_tangent" yaml:"end_tangent" schema:"end_tangent,required"`
	// Interior: Interior point that lies on the conic.
	Interior Point2D `json:"interior" yaml:"interior" schema:"interior,required"`
	// Relative: Whether or not the interior and end points are relative to the previous path position.
	Relative bool `json:"relative" yaml:"relative" schema:"relative,required"`
	// StartTangent: Tangent at the start of the conic.
	StartTangent Point2D `json:"start_tangent" yaml:"start_tangent" schema:"start_tangent,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentCenter: Adds a tangent arc from current pen position with the given radius and angle.
type PathSegmentCenter struct {
	// Offset: Offset of the arc. Negative values will arc clockwise.
	Offset Angle `json:"offset" yaml:"offset" schema:"offset,required"`
	// Radius: Radius of the arc. Not to be confused with Raiders of the Lost Ark.
	Radius float64 `json:"radius" yaml:"radius" schema:"radius,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentEnd: A straight line segment. Goes from the current path "pen" to the given endpoint.
type PathSegmentEnd struct {
	// End: End point of the line.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
	// Relative: Whether or not this line is a relative offset
	Relative bool `json:"relative" yaml:"relative" schema:"relative,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentInfo: Info about a path segment
type PathSegmentInfo struct {
	// Command: What is the path segment?
	Command PathCommand `json:"command" yaml:"command" schema:"command,required"`
	// CommandID: Which command created this path? This field is absent if the path command is not actually creating a path segment, e.g. moving the pen doesn't create a path segment.
	CommandID UUID `json:"command_id" yaml:"command_id" schema:"command_id"`
	// Relative: Whether or not this segment is a relative offset
	Relative bool `json:"relative" yaml:"relative" schema:"relative,required"`
}

// PathSegmentLine: A cubic bezier curve segment. Start at the end of the current line, go through control point 1 and 2, then end at a given point.
type PathSegmentLine struct {
	// Control1: First control point.
	Control1 Point3D `json:"control1" yaml:"control1" schema:"control1,required"`
	// Control2: Second control point.
	Control2 Point3D `json:"control2" yaml:"control2" schema:"control2,required"`
	// End: Final control point.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
	// Relative: Whether or not this bezier is a relative offset
	Relative bool `json:"relative" yaml:"relative" schema:"relative,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentPathSegmentEnd: Adds a tangent arc from current pen position to the new position. Arcs will choose a clockwise or counter-clockwise direction based on the arc end position.
type PathSegmentPathSegmentEnd struct {
	// AngleSnapIncrement: 0 will be interpreted as none/null.
	AngleSnapIncrement Angle `json:"angle_snap_increment" yaml:"angle_snap_increment" schema:"angle_snap_increment"`
	// To: Where the arc should end. Must lie in the same plane as the current path pen position. Must not be colinear with current path pen position.
	To Point3D `json:"to" yaml:"to" schema:"to,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentPathSegmentRelative: Adds a circular involute from the current position that goes through the given end_radius and is rotated around the current point by angle.
type PathSegmentPathSegmentRelative struct {
	// Angle: The angle to rotate the involute by. A value of zero will produce a curve with a tangent along the x-axis at the start point of the curve.
	Angle Angle `json:"angle" yaml:"angle" schema:"angle,required"`
	// EndRadius: The involute is described between two circles, end_radius is the radius of the outer circle.
	EndRadius float64 `json:"end_radius" yaml:"end_radius" schema:"end_radius,required"`
	// Reverse: If reverse is true, the segment will start from the end of the involute, otherwise it will start from that start.
	Reverse bool `json:"reverse" yaml:"reverse" schema:"reverse,required"`
	// StartRadius: The involute is described between two circles, start_radius is the radius of the inner circle.
	StartRadius float64 `json:"start_radius" yaml:"start_radius" schema:"start_radius,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentRadius: Adds an arc from the current position that goes through the given interior point and ends at the given end position
type PathSegmentRadius struct {
	// End: End point of the arc.
	End Point3D `json:"end" yaml:"end" schema:"end,required"`
	// Interior: Interior point of the arc.
	Interior Point3D `json:"interior" yaml:"interior" schema:"interior,required"`
	// Relative: Whether or not interior and end are relative to the previous path position
	Relative bool `json:"relative" yaml:"relative" schema:"relative,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentRelative: A circular arc segment. Arcs can be drawn clockwise when start > end.
type PathSegmentRelative struct {
	// Center: Center of the circle
	Center Point2D `json:"center" yaml:"center" schema:"center,required"`
	// End: End of the arc along circle's perimeter.
	End Angle `json:"end" yaml:"end" schema:"end,required"`
	// Radius: Radius of the circle
	Radius float64 `json:"radius" yaml:"radius" schema:"radius,required"`
	// Relative: Whether or not this arc is a relative offset
	Relative bool `json:"relative" yaml:"relative" schema:"relative,required"`
	// Start: Start of the arc along circle's perimeter.
	Start Angle `json:"start" yaml:"start" schema:"start,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PathSegmentStart: Adds an elliptical arc segment.
type PathSegmentStart struct {
	// Center: The center point of the ellipse.
	Center Point2D `json:"center" yaml:"center" schema:"center,required"`
	// EndAngle: End of the path along the perimeter of the ellipse.
	EndAngle Angle `json:"end_angle" yaml:"end_angle" schema:"end_angle,required"`
	// MajorRadius: Major radius of the ellipse (along the x axis).
	MajorRadius float64 `json:"major_radius" yaml:"major_radius" schema:"major_radius,required"`
	// MinorRadius: Minor radius of the ellipse (along the y axis).
	MinorRadius float64 `json:"minor_radius" yaml:"minor_radius" schema:"minor_radius,required"`
	// StartAngle: Start of the path along the perimeter of the ellipse.
	StartAngle Angle `json:"start_angle" yaml:"start_angle" schema:"start_angle,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// PaymentIntent: A payment intent response.
type PaymentIntent struct {
	// ClientSecret: The client secret is used for client-side retrieval using a publishable key. The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
	ClientSecret string `json:"client_secret" yaml:"client_secret" schema:"client_secret,required"`
}

// PaymentMethod: A payment method.
type PaymentMethod struct {
	// BillingInfo: The billing info for the payment method.
	BillingInfo BillingInfo `json:"billing_info" yaml:"billing_info" schema:"billing_info,required"`
	// Card: The card, if it is one. For our purposes, this is the only type of payment method that we support.
	Card CardDetails `json:"card" yaml:"card" schema:"card"`
	// CreatedAt: Time at which the object was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: Unique identifier for the object.
	ID string `json:"id" yaml:"id" schema:"id"`
	// Metadata: Set of key-value pairs.
	Metadata map[string]string `json:"metadata" yaml:"metadata" schema:"metadata"`
	// Type: The type of payment method.
	Type PaymentMethodType `json:"type" yaml:"type" schema:"type,required"`
}

// PaymentMethodCardChecks: Card checks.
type PaymentMethodCardChecks struct {
	// AddressLine1Check: If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressLine1Check string `json:"address_line1_check" yaml:"address_line1_check" schema:"address_line1_check"`
	// AddressPostalCodeCheck: If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	AddressPostalCodeCheck string `json:"address_postal_code_check" yaml:"address_postal_code_check" schema:"address_postal_code_check"`
	// CvcCheck: If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
	CvcCheck string `json:"cvc_check" yaml:"cvc_check" schema:"cvc_check"`
}

// PaymentMethodType: An enum representing the possible values of an `PaymentMethod`'s `type` field.
type PaymentMethodType string

const (
	// PaymentMethodTypeCard: A card payment method.
	PaymentMethodTypeCard PaymentMethodType = "card"
)

// PerspectiveCameraParameters: Defines a perspective view.
type PerspectiveCameraParameters struct {
	// FovY: Camera frustum vertical field of view.
	FovY float64 `json:"fov_y" yaml:"fov_y" schema:"fov_y"`
	// ZFar: Camera frustum far plane.
	ZFar float64 `json:"z_far" yaml:"z_far" schema:"z_far"`
	// ZNear: Camera frustum near plane.
	ZNear float64 `json:"z_near" yaml:"z_near" schema:"z_near"`
}

// PivotPosition: A point in 3D space
type PivotPosition struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
	// Z:
	Z float64 `json:"z" yaml:"z" schema:"z,required"`
}

// PivotRotation: A point in homogeneous (4D) space
type PivotRotation struct {
	// W:
	W float64 `json:"w" yaml:"w" schema:"w,required"`
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
	// Z:
	Z float64 `json:"z" yaml:"z" schema:"z,required"`
}

// PlanInterval: A plan's interval.
type PlanInterval string

const (
	// PlanIntervalDay: Day.
	PlanIntervalDay PlanInterval = "day"
	// PlanIntervalMonth: Month.
	PlanIntervalMonth PlanInterval = "month"
	// PlanIntervalWeek: Week.
	PlanIntervalWeek PlanInterval = "week"
	// PlanIntervalYear: Year.
	PlanIntervalYear PlanInterval = "year"
)

// PlaneIntersectAndProject: Corresponding coordinates of given window coordinates, intersected on given plane.
type PlaneIntersectAndProject struct {
	// PlaneCoordinates: Corresponding coordinates of given window coordinates, intersected on given plane.
	PlaneCoordinates Point2D `json:"plane_coordinates" yaml:"plane_coordinates" schema:"plane_coordinates"`
}

// PlaneSetColor: The response from the `PlaneSetColor` endpoint.
type PlaneSetColor struct {
}

// PlyStorage: The storage for the output PLY file.
type PlyStorage string

const (
	// PlyStorageAscii: Write numbers in their ascii representation (e.g. -13, 6.28, etc.). Properties are separated by spaces and elements are separated by line breaks.
	PlyStorageAscii PlyStorage = "ascii"
	// PlyStorageBinaryLittleEndian: Encode payload as binary using little endian.
	PlyStorageBinaryLittleEndian PlyStorage = "binary_little_endian"
	// PlyStorageBinaryBigEndian: Encode payload as binary using big endian.
	PlyStorageBinaryBigEndian PlyStorage = "binary_big_endian"
)

// Point2D: A point in 2D space
type Point2D struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
}

// Point3D: A point in 3D space
type Point3D struct {
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
	// Z:
	Z float64 `json:"z" yaml:"z" schema:"z,required"`
}

// Point4D: A point in homogeneous (4D) space
type Point4D struct {
	// W:
	W float64 `json:"w" yaml:"w" schema:"w,required"`
	// X:
	X float64 `json:"x" yaml:"x" schema:"x,required"`
	// Y:
	Y float64 `json:"y" yaml:"y" schema:"y,required"`
	// Z:
	Z float64 `json:"z" yaml:"z" schema:"z,required"`
}

// Pong: The response from the `/ping` endpoint.
type Pong struct {
	// Message: The pong response.
	Message string `json:"message" yaml:"message" schema:"message,required"`
}

// PostEffectType: Post effect type
type PostEffectType string

const (
	// PostEffectTypePhosphor represents the PostEffectType `"phosphor"`.
	PostEffectTypePhosphor PostEffectType = "phosphor"
	// PostEffectTypeSsao represents the PostEffectType `"ssao"`.
	PostEffectTypeSsao PostEffectType = "ssao"
	// PostEffectTypeNoeffect represents the PostEffectType `"noeffect"`.
	PostEffectTypeNoeffect PostEffectType = "noeffect"
)

// PrivacySettings: Privacy settings for an org or user.
type PrivacySettings struct {
	// CanTrainOnData: If we can train on the data. If the user is a member of an organization, the organization's setting will override this. The organization's setting takes priority.
	CanTrainOnData bool `json:"can_train_on_data" yaml:"can_train_on_data" schema:"can_train_on_data,required"`
}

// ProjectEntityToPlane: The response from the `ProjectEntityToPlane` command.
type ProjectEntityToPlane struct {
	// ProjectedPoints: Projected points.
	ProjectedPoints []Point3D `json:"projected_points" yaml:"projected_points" schema:"projected_points,required"`
}

// ProjectPointsToPlane: The response from the `ProjectPointsToPlane` command.
type ProjectPointsToPlane struct {
	// ProjectedPoints: Projected points.
	ProjectedPoints []Point3D `json:"projected_points" yaml:"projected_points" schema:"projected_points,required"`
}

// RawFile: A raw file with unencoded contents to be passed over binary websockets. When raw files come back for exports it is sent as binary/bson, not text/json.
type RawFile struct {
	// Contents: The contents of the file.
	Contents []int `json:"contents" yaml:"contents" schema:"contents,required"`
	// Name: The name of the file.
	Name string `json:"name" yaml:"name" schema:"name,required"`
}

// ReconfigureStream: The response from the `ReconfigureStream` endpoint.
type ReconfigureStream struct {
}

// RelativeTo: What is the given geometry relative to?
type RelativeTo string

const (
	// RelativeToSketchPlane: Local/relative to a position centered within the plane being sketched on
	RelativeToSketchPlane RelativeTo = "sketch_plane"
	// RelativeToTrajectoryCurve: Local/relative to the trajectory curve
	RelativeToTrajectoryCurve RelativeTo = "trajectory_curve"
)

// RemoveSceneObjects: The response from the `RemoveSceneObjects` endpoint.
type RemoveSceneObjects struct {
}

// ResponseError: Error information from a response.
type ResponseError struct {
	// ErrorCode:
	ErrorCode string `json:"error_code" yaml:"error_code" schema:"error_code"`
	// Message:
	Message string `json:"message" yaml:"message" schema:"message,required"`
	// RequestID:
	RequestID string `json:"request_id" yaml:"request_id" schema:"request_id,required"`
}

// Revolve: The response from the `Revolve` endpoint.
type Revolve struct {
}

// RevolveAboutEdge: The response from the `RevolveAboutEdge` endpoint.
type RevolveAboutEdge struct {
}

// Rotation: A rotation defined by an axis, origin of rotation, and an angle.
type Rotation struct {
	// Angle: Rotate this far about the rotation axis. Defaults to zero (i.e. no rotation).
	Angle Angle `json:"angle" yaml:"angle" schema:"angle,required"`
	// Axis: Rotation axis. Defaults to (0, 0, 1) (i.e. the Z axis).
	Axis Point3D `json:"axis" yaml:"axis" schema:"axis,required"`
	// Origin: Origin of the rotation. If one isn't provided, the object will rotate about its own bounding box center.
	Origin any `json:"origin" yaml:"origin" schema:"origin,required"`
}

// RtcIceCandidateInit: ICECandidateInit is used to serialize ice candidates
type RtcIceCandidateInit struct {
	// Candidate: The candidate string associated with the object.
	Candidate string `json:"candidate" yaml:"candidate" schema:"candidate,required"`
	// SdpMlineIndex: The index (starting at zero) of the m-line in the SDP this candidate is associated with.
	SdpMlineIndex int `json:"sdpMLineIndex" yaml:"sdpMLineIndex" schema:"sdpMLineIndex"`
	// SdpMid: The identifier of the "media stream identification" as defined in [RFC 8841](https://tools.ietf.org/html/rfc8841).
	SdpMid string `json:"sdpMid" yaml:"sdpMid" schema:"sdpMid"`
	// UsernameFragment: The username fragment (as defined in [RFC 8445](https://tools.ietf.org/html/rfc8445#section-5.2.1)) associated with the object.
	UsernameFragment string `json:"usernameFragment" yaml:"usernameFragment" schema:"usernameFragment"`
}

// RtcSdpType: SDPType describes the type of an SessionDescription.
type RtcSdpType string

const (
	// RtcSdpTypeUnspecified: Unspecified indicates that the type is unspecified.
	RtcSdpTypeUnspecified RtcSdpType = "unspecified"
	// RtcSdpTypeOffer: indicates that a description MUST be treated as an SDP offer.
	RtcSdpTypeOffer RtcSdpType = "offer"
	// RtcSdpTypePranswer: indicates that a description MUST be treated as an SDP answer, but not a final answer. A description used as an SDP pranswer may be applied as a response to an SDP offer, or an update to a previously sent SDP pranswer.
	RtcSdpTypePranswer RtcSdpType = "pranswer"
	// RtcSdpTypeAnswer: indicates that a description MUST be treated as an SDP final answer, and the offer-answer exchange MUST be considered complete. A description used as an SDP answer may be applied as a response to an SDP offer or as an update to a previously sent SDP pranswer.
	RtcSdpTypeAnswer RtcSdpType = "answer"
	// RtcSdpTypeRollback: indicates that a description MUST be treated as canceling the current SDP negotiation and moving the SDP offer and answer back to what it was in the previous stable state. Note the local or remote SDP descriptions in the previous stable state could be null if there has not yet been a successful offer-answer negotiation.
	RtcSdpTypeRollback RtcSdpType = "rollback"
)

// RtcSessionDescription: SessionDescription is used to expose local and remote session descriptions.
type RtcSessionDescription struct {
	// Sdp: SDP string.
	Sdp string `json:"sdp" yaml:"sdp" schema:"sdp,required"`
	// Type: SDP type.
	Type RtcSdpType `json:"type" yaml:"type" schema:"type,required"`
}

// SamlIdentityProvider: A SAML identity provider.
type SamlIdentityProvider struct {
	// AcsUrl: The ACS (Assertion Consumer Service) url.
	AcsUrl URL `json:"acs_url" yaml:"acs_url" schema:"acs_url,required"`
	// CreatedAt: The date and time the SAML identity provider was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the SAML identity provider.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IdpEntityID: The entity ID of the SAML identity provider.
	IdpEntityID string `json:"idp_entity_id" yaml:"idp_entity_id" schema:"idp_entity_id"`
	// IdpMetadataDocumentString: The metadata document as a string.
	IdpMetadataDocumentString string `json:"idp_metadata_document_string" yaml:"idp_metadata_document_string" schema:"idp_metadata_document_string"`
	// OrgID: The organization ID the SAML identity provider belongs to.
	OrgID UUID `json:"org_id" yaml:"org_id" schema:"org_id,required"`
	// PrivateKey: The private key for the SAML identity provider. This is the PEM corresponding to the X509 pair.
	PrivateKey Base64 `json:"private_key" yaml:"private_key" schema:"private_key"`
	// PublicCert: The public certificate for the SAML identity provider. This is the PEM corresponding to the X509 pair.
	PublicCert Base64 `json:"public_cert" yaml:"public_cert" schema:"public_cert"`
	// SloUrl: The SLO (Single Logout) url.
	SloUrl URL `json:"slo_url" yaml:"slo_url" schema:"slo_url,required"`
	// TechnicalContactEmail: The technical contact email address for the SAML identity provider.
	TechnicalContactEmail string `json:"technical_contact_email" yaml:"technical_contact_email" schema:"technical_contact_email"`
	// UpdatedAt: The date and time the SAML identity provider was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// SamlIdentityProviderCreate: Parameters for creating a SAML identity provider.
type SamlIdentityProviderCreate struct {
	// IdpEntityID: The entity ID of the SAML identity provider.
	IdpEntityID string `json:"idp_entity_id" yaml:"idp_entity_id" schema:"idp_entity_id"`
	// IdpMetadataSource: The source of an identity provider metadata descriptor.
	IdpMetadataSource any `json:"idp_metadata_source" yaml:"idp_metadata_source" schema:"idp_metadata_source,required"`
	// SigningKeypair: The request signing key pair.
	SigningKeypair DerEncodedKeyPair `json:"signing_keypair" yaml:"signing_keypair" schema:"signing_keypair"`
	// TechnicalContactEmail: The technical contact email address for the SAML identity provider.
	TechnicalContactEmail string `json:"technical_contact_email" yaml:"technical_contact_email" schema:"technical_contact_email"`
}

// SceneClearAll: The response from the `SceneClearAll` endpoint.
type SceneClearAll struct {
}

// SceneSelectionType: The type of scene selection change
type SceneSelectionType string

const (
	// SceneSelectionTypeReplace: Replaces the selection
	SceneSelectionTypeReplace SceneSelectionType = "replace"
	// SceneSelectionTypeAdd: Adds to the selection
	SceneSelectionTypeAdd SceneSelectionType = "add"
	// SceneSelectionTypeRemove: Removes from the selection
	SceneSelectionTypeRemove SceneSelectionType = "remove"
)

// SceneToolType: The type of scene's active tool
type SceneToolType string

const (
	// SceneToolTypeCameraRevolve represents the SceneToolType `"camera_revolve"`.
	SceneToolTypeCameraRevolve SceneToolType = "camera_revolve"
	// SceneToolTypeSelect represents the SceneToolType `"select"`.
	SceneToolTypeSelect SceneToolType = "select"
	// SceneToolTypeMove represents the SceneToolType `"move"`.
	SceneToolTypeMove SceneToolType = "move"
	// SceneToolTypeSketchLine represents the SceneToolType `"sketch_line"`.
	SceneToolTypeSketchLine SceneToolType = "sketch_line"
	// SceneToolTypeSketchTangentialArc represents the SceneToolType `"sketch_tangential_arc"`.
	SceneToolTypeSketchTangentialArc SceneToolType = "sketch_tangential_arc"
	// SceneToolTypeSketchCurve represents the SceneToolType `"sketch_curve"`.
	SceneToolTypeSketchCurve SceneToolType = "sketch_curve"
	// SceneToolTypeSketchCurveMod represents the SceneToolType `"sketch_curve_mod"`.
	SceneToolTypeSketchCurveMod SceneToolType = "sketch_curve_mod"
)

// SelectAdd: The response from the `SelectAdd` endpoint.
type SelectAdd struct {
}

// SelectClear: The response from the `SelectClear` endpoint.
type SelectClear struct {
}

// SelectGet: The response from the `SelectGet` command.
type SelectGet struct {
	// EntityIds: The UUIDs of the selected entities.
	EntityIds []UUID `json:"entity_ids" yaml:"entity_ids" schema:"entity_ids,required"`
}

// SelectRemove: The response from the `SelectRemove` endpoint.
type SelectRemove struct {
}

// SelectReplace: The response from the `SelectReplace` endpoint.
type SelectReplace struct {
}

// SelectWithPoint: The response from the `SelectWithPoint` command.
type SelectWithPoint struct {
	// EntityID: The UUID of the entity that was selected.
	EntityID UUID `json:"entity_id" yaml:"entity_id" schema:"entity_id"`
}

// SelectionDefaultScene: Visit the default scene.
type SelectionDefaultScene struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SelectionIndex: Visit the indexed scene.
type SelectionIndex struct {
	// Index: The index.
	Index int `json:"index" yaml:"index" schema:"index,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SelectionName: Visit the indexed mesh.
type SelectionName struct {
	// Index: The index.
	Index int `json:"index" yaml:"index" schema:"index,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SelectionSceneByIndex: Visit the first scene with the given name.
type SelectionSceneByIndex struct {
	// Name: The name.
	Name string `json:"name" yaml:"name" schema:"name,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SelectionSceneByName: Visit the first mesh with the given name.
type SelectionSceneByName struct {
	// Name: The name.
	Name string `json:"name" yaml:"name" schema:"name,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SendObject: The response from the `SendObject` endpoint.
type SendObject struct {
}

// ServiceAccount: A service account.
// These are used to authenticate orgs with Bearer authentication.
//
// This works just like an API token, but it is tied to an organization versus an individual user.
type ServiceAccount struct {
	// CreatedAt: The date and time the API token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the API token.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// IsValid: If the token is valid. We never delete API tokens, but we can mark them as invalid. We save them for ever to preserve the history of the API token.
	IsValid bool `json:"is_valid" yaml:"is_valid" schema:"is_valid,required"`
	// Label: An optional label for the API token.
	Label string `json:"label" yaml:"label" schema:"label"`
	// OrgID: The ID of the organization that owns the API token.
	OrgID UUID `json:"org_id" yaml:"org_id" schema:"org_id,required"`
	// Token: The API token itself.
	Token string `json:"token" yaml:"token" schema:"token,required"`
	// UpdatedAt: The date and time the API token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ServiceAccountResultsPage: A single page of results
type ServiceAccountResultsPage struct {
	// Items: list of items on this page of results
	Items []ServiceAccount `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// Session: An authentication session.
type Session struct {
	// CreatedAt: The date and time the session was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the session expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The unique identifier for the session.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// SessionToken: The session token.
	SessionToken string `json:"session_token" yaml:"session_token" schema:"session_token,required"`
	// UpdatedAt: The date and time the session was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user that the session belongs to.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// SetBackgroundColor: The response from the `SetBackgroundColor` endpoint.
type SetBackgroundColor struct {
}

// SetCurrentToolProperties: The response from the `SetCurrentToolProperties` endpoint.
type SetCurrentToolProperties struct {
}

// SetDefaultSystemProperties: The response from the `SetDefaultSystemProperties` endpoint.
type SetDefaultSystemProperties struct {
}

// SetGridAutoScale: The response from the 'SetGridScale'.
type SetGridAutoScale struct {
}

// SetGridReferencePlane: The response from the 'SetGridReferencePlane'.
type SetGridReferencePlane struct {
}

// SetGridScale: The response from the 'SetGridScale'.
type SetGridScale struct {
}

// SetObjectTransform: The response from the `SetObjectTransform` command.
type SetObjectTransform struct {
}

// SetSceneUnits: The response from the `SetSceneUnits` endpoint.
type SetSceneUnits struct {
}

// SetSelectionFilter: The response from the `SetSelectionFilter` endpoint.
type SetSelectionFilter struct {
}

// SetSelectionType: The response from the `SetSelectionType` endpoint.
type SetSelectionType struct {
}

// SetTool: The response from the `SetTool` endpoint.
type SetTool struct {
}

// Shortlink: A short url.
type Shortlink struct {
	// CreatedAt: The date and time the shortlink was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// ID: The unique identifier for the shortlink.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Key: The key of the shortlink. This is the short part of the URL.
	Key string `json:"key" yaml:"key" schema:"key,required"`
	// OrgID: The organization ID of the shortlink.
	OrgID UUID `json:"org_id" yaml:"org_id" schema:"org_id"`
	// PasswordHash: The hash of the password for the shortlink.
	PasswordHash string `json:"password_hash" yaml:"password_hash" schema:"password_hash"`
	// RestrictToOrg: If the shortlink should be restricted to the organization. This only applies to org shortlinks. If you are creating a user shortlink and you are not a member of a team or enterprise and you try to set this to true, it will fail.
	RestrictToOrg bool `json:"restrict_to_org" yaml:"restrict_to_org" schema:"restrict_to_org"`
	// UpdatedAt: The date and time the shortlink was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The ID of the user that made the shortlink.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
	// Value: The URL the shortlink redirects to.
	Value URL `json:"value" yaml:"value" schema:"value,required"`
}

// ShortlinkResultsPage: A single page of results
type ShortlinkResultsPage struct {
	// Items: list of items on this page of results
	Items []Shortlink `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// SideFace: IDs for a side face, extruded from the path of some sketch/2D shape.
type SideFace struct {
	// FaceID: Desired ID for the resulting face.
	FaceID UUID `json:"face_id" yaml:"face_id" schema:"face_id,required"`
	// PathID: ID of the path this face is being extruded from.
	PathID UUID `json:"path_id" yaml:"path_id" schema:"path_id,required"`
}

// SketchModeDisable: The response from the `SketchModeDisable` endpoint.
type SketchModeDisable struct {
}

// Solid2DAddHole: The response from the `Solid2dAddHole` endpoint.
type Solid2DAddHole struct {
}

// Solid3DFilletEdge: The response from the `Solid3dFilletEdge` endpoint.
type Solid3DFilletEdge struct {
}

// Solid3DGetAdjacencyInfo: Extrusion face info struct (useful for maintaining mappings between source path segment ids and extrusion faces) This includes the opposite and adjacent faces and edges.
type Solid3DGetAdjacencyInfo struct {
	// Edges: Details of each edge.
	Edges []AdjacencyInfo `json:"edges" yaml:"edges" schema:"edges,required"`
}

// Solid3DGetAllEdgeFaces: The response from the `Solid3dGetAllEdgeFaces` command.
type Solid3DGetAllEdgeFaces struct {
	// Faces: The UUIDs of the faces.
	Faces []UUID `json:"faces" yaml:"faces" schema:"faces,required"`
}

// Solid3DGetAllOppositeEdges: The response from the `Solid3dGetAllOppositeEdges` command.
type Solid3DGetAllOppositeEdges struct {
	// Edges: The UUIDs of the edges.
	Edges []UUID `json:"edges" yaml:"edges" schema:"edges,required"`
}

// Solid3DGetCommonEdge: The response from the `Solid3DGetCommonEdge` command.
type Solid3DGetCommonEdge struct {
	// Edge: The UUID of the common edge, if any.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge"`
}

// Solid3DGetExtrusionFaceInfo: Extrusion face info struct (useful for maintaining mappings between source path segment ids and extrusion faces)
type Solid3DGetExtrusionFaceInfo struct {
	// Faces: Details of each face.
	Faces []ExtrusionFaceInfo `json:"faces" yaml:"faces" schema:"faces,required"`
}

// Solid3DGetNextAdjacentEdge: The response from the `Solid3dGetNextAdjacentEdge` command.
type Solid3DGetNextAdjacentEdge struct {
	// Edge: The UUID of the edge.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge"`
}

// Solid3DGetOppositeEdge: The response from the `Solid3dGetOppositeEdge` command.
type Solid3DGetOppositeEdge struct {
	// Edge: The UUID of the edge.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge,required"`
}

// Solid3DGetPrevAdjacentEdge: The response from the `Solid3dGetPrevAdjacentEdge` command.
type Solid3DGetPrevAdjacentEdge struct {
	// Edge: The UUID of the edge.
	Edge UUID `json:"edge" yaml:"edge" schema:"edge"`
}

// Solid3DShellFace: The response from the `Solid3dShellFace` endpoint.
type Solid3DShellFace struct {
}

// SourcePosition: A position in the source code.
type SourcePosition struct {
	// Column: The column number.
	Column int `json:"column" yaml:"column" schema:"column,required"`
	// Line: The line number.
	Line int `json:"line" yaml:"line" schema:"line,required"`
}

// SourceRange: A source range of code.
type SourceRange struct {
	// End: The end of the range.
	End SourcePosition `json:"end" yaml:"end" schema:"end,required"`
	// Start: The start of the range.
	Start SourcePosition `json:"start" yaml:"start" schema:"start,required"`
}

// SourceRangePrompt: A source range and prompt for a text to CAD iteration.
type SourceRangePrompt struct {
	// File: The name of the file the source range applies to. This is the relative path to the file from the root of the project. This only applies to multi-file iterations.
	File string `json:"file" yaml:"file" schema:"file"`
	// Prompt: The prompt for the changes.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt,required"`
	// Range: The range of the source code to change. If you want to apply the prompt to the whole file, set the start to 0 and the end to the end of the file.
	Range SourceRange `json:"range" yaml:"range" schema:"range,required"`
}

// StartPath: The response from the `StartPath` endpoint.
type StartPath struct {
}

// StlStorage: Export storage.
type StlStorage string

const (
	// StlStorageAscii: Plaintext encoding.
	StlStorageAscii StlStorage = "ascii"
	// StlStorageBinary: Binary STL encoding.
	//
	// This is the default setting.
	StlStorageBinary StlStorage = "binary"
)

// StoreCouponParams: The parameters for a new store coupon.
type StoreCouponParams struct {
	// PercentOff: The percentage off.
	PercentOff int `json:"percent_off" yaml:"percent_off" schema:"percent_off,required"`
}

// Subscribe: The data for subscribing a user to the newsletter.
type Subscribe struct {
	// Email: The email
	Email string `json:"email" yaml:"email" schema:"email,required"`
}

// SubscriptionTierFeature: A subscription tier feature.
type SubscriptionTierFeature struct {
	// Info: Information about the feature.
	Info string `json:"info" yaml:"info" schema:"info,required"`
}

// SubscriptionTierPriceFlat: Enterprise: The price is not listed and the user needs to contact sales.
type SubscriptionTierPriceFlat struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SubscriptionTierPriceInterval: A flat price that we publicly list.
type SubscriptionTierPriceInterval struct {
	// Interval: The interval the price is charged.
	Interval PlanInterval `json:"interval" yaml:"interval" schema:"interval,required"`
	// Price: The price.
	Price float64 `json:"price" yaml:"price" schema:"price,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SubscriptionTierPricePrice: A per user price that we publicly list.
type SubscriptionTierPricePrice struct {
	// Interval: The interval the price is charged.
	Interval PlanInterval `json:"interval" yaml:"interval" schema:"interval,required"`
	// Price: The price.
	Price float64 `json:"price" yaml:"price" schema:"price,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SubscriptionTierTypeIndividual: A subscription tier that can be applied to individuals only.
type SubscriptionTierTypeIndividual struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SubscriptionTierTypeSamlSso: An subscription tier that can be applied to organizations only.
type SubscriptionTierTypeSamlSso struct {
	// SamlSso: Whether or not the subscription type supports SAML SSO.
	SamlSso bool `json:"saml_sso" yaml:"saml_sso" schema:"saml_sso,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// SubscriptionTrainingDataBehavior: An enum representing a subscription training data behavior.
type SubscriptionTrainingDataBehavior string

const (
	// SubscriptionTrainingDataBehaviorAlways: The data is always used for training and cannot be turned off.
	SubscriptionTrainingDataBehaviorAlways SubscriptionTrainingDataBehavior = "always"
	// SubscriptionTrainingDataBehaviorDefaultOn: The data is used for training by default, but can be turned off.
	SubscriptionTrainingDataBehaviorDefaultOn SubscriptionTrainingDataBehavior = "default_on"
	// SubscriptionTrainingDataBehaviorDefaultOff: The data is not used for training by default, but can be turned on.
	SubscriptionTrainingDataBehaviorDefaultOff SubscriptionTrainingDataBehavior = "default_off"
)

// SuccessWebSocketResponse: Successful Websocket response.
type SuccessWebSocketResponse struct {
	// RequestID: Which request this is a response to. If the request was a modeling command, this is the modeling command ID. If no request ID was sent, this will be null.
	RequestID UUID `json:"request_id" yaml:"request_id" schema:"request_id"`
	// Resp: The data sent with a successful response. This will be flattened into a 'type' and 'data' field.
	Resp any `json:"resp" yaml:"resp" schema:"resp,required"`
	// Success: Always true
	Success bool `json:"success" yaml:"success" schema:"success,required"`
}

// SupportTier: The support tier the subscription provides.
type SupportTier string

const (
	// SupportTierCommunity: Community support.
	SupportTierCommunity SupportTier = "community"
	// SupportTierStandardEmail: Standard email support.
	SupportTierStandardEmail SupportTier = "standard_email"
	// SupportTierPriorityEmail: Priority email support.
	SupportTierPriorityEmail SupportTier = "priority_email"
	// SupportTierPremium: Premium support.
	SupportTierPremium SupportTier = "premium"
)

// SurfaceArea: The surface area response.
type SurfaceArea struct {
	// OutputUnit: The output unit for the surface area.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// SurfaceArea: The surface area.
	SurfaceArea float64 `json:"surface_area" yaml:"surface_area" schema:"surface_area,required"`
}

// Sweep: The response from the `Sweep` endpoint.
type Sweep struct {
}

// System: Co-ordinate system definition.
// The `up` axis must be orthogonal to the `forward` axis.
//
// See [cglearn.eu] for background reading.
//
// [cglearn.eu](https://cglearn.eu/pub/computer-graphics/introduction-to-geometry#material-coordinate-systems-1)
type System struct {
	// Forward: Axis the front face of a model looks along.
	Forward AxisDirectionPair `json:"forward" yaml:"forward" schema:"forward,required"`
	// Up: Axis pointing up and away from a model.
	Up AxisDirectionPair `json:"up" yaml:"up" schema:"up,required"`
}

// TakeSnapshot: The response from the `TakeSnapshot` command.
type TakeSnapshot struct {
	// Contents: Contents of the image.
	Contents Base64 `json:"contents" yaml:"contents" schema:"contents,required"`
}

// TextToCad: A response from a text to CAD prompt.
type TextToCad struct {
	// Code: The code for the model. This is optional but will be required in the future once we are at v1.
	Code string `json:"code" yaml:"code" schema:"code"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// KclVersion: The version of kcl requested.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// Model: The model being used.
	Model TextToCadModel `json:"model" yaml:"model" schema:"model,required"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// OutputFormat: The output format of the model.
	OutputFormat FileExportFormat `json:"output_format" yaml:"output_format" schema:"output_format,required"`
	// Outputs: The output of the model in the given file format the user requested, base64 encoded. The key of the map is the path of the output file.
	Outputs map[string]Base64 `json:"outputs" yaml:"outputs" schema:"outputs"`
	// Prompt: The prompt.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// TextToCadCreateBody: Body for generating models from text.
type TextToCadCreateBody struct {
	// KclVersion: The version of kcl to use. If empty, the latest version will be used.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// ProjectName: The project name. This is used to tie the prompt to a project. Which helps us make our models better over time.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name"`
	// Prompt: The prompt for the model.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt,required"`
}

// TextToCadIteration: A response from a text to CAD iteration.
type TextToCadIteration struct {
	// Code: The code for the new model.
	Code string `json:"code" yaml:"code" schema:"code,required"`
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Model: The model being used.
	Model TextToCadModel `json:"model" yaml:"model" schema:"model,required"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// OriginalSourceCode: The original source code for the model, previous to the changes.
	OriginalSourceCode string `json:"original_source_code" yaml:"original_source_code" schema:"original_source_code,required"`
	// Prompt: The prompt for the overall changes. This is optional if you only want changes on specific source ranges.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// SourceRanges: The source ranges the user suggested to change.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// TextToCadIterationBody: Body for generating models from text.
type TextToCadIterationBody struct {
	// KclVersion: The version of kcl to use. If empty, the latest version will be used.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// OriginalSourceCode: The source code for the model (in kcl) that is to be edited.
	OriginalSourceCode string `json:"original_source_code" yaml:"original_source_code" schema:"original_source_code,required"`
	// ProjectName: The project name. This is used to tie the prompt to a project. Which helps us make our models better over time.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name"`
	// Prompt: The prompt for the model, if not using source ranges.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// SourceRanges: The source ranges the user suggested to change. If empty, the prompt will be used and is required.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges,required"`
}

// TextToCadModel: A type of Text-to-CAD model.
type TextToCadModel string

const (
	// TextToCadModelCad: CAD.
	TextToCadModelCad TextToCadModel = "cad"
	// TextToCadModelKcl: KCL.
	TextToCadModelKcl TextToCadModel = "kcl"
	// TextToCadModelKclIteration: KCL iteration.
	TextToCadModelKclIteration TextToCadModel = "kcl_iteration"
)

// TextToCadMultiFileIteration: A response from a text to CAD multi-file iteration.
type TextToCadMultiFileIteration struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// Feedback: Feedback from the user, if any.
	Feedback MlFeedback `json:"feedback" yaml:"feedback" schema:"feedback"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// KclVersion: The version of kcl to use. If empty, the latest version will be used.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// Model: The model being used.
	Model TextToCadModel `json:"model" yaml:"model" schema:"model,required"`
	// ModelVersion: The version of the model.
	ModelVersion string `json:"model_version" yaml:"model_version" schema:"model_version,required"`
	// Outputs: The output files. Returns a map of the file name to the file contents. The file contents are not encoded since kcl files are not binary.
	Outputs map[string]string `json:"outputs" yaml:"outputs" schema:"outputs"`
	// ProjectName: The project name. This is used to tie the prompt to a project. Which helps us make our models better over time.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name"`
	// Prompt: The prompt for the overall changes. This is optional if you only want changes on specific source ranges. This will apply to all the files.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// SourceRanges: The source ranges the user suggested to change.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// TextToCadMultiFileIterationBody: Body for iterating on models from text prompts.
type TextToCadMultiFileIterationBody struct {
	// KclVersion: The version of kcl to use. If empty, the latest version will be used.
	KclVersion string `json:"kcl_version" yaml:"kcl_version" schema:"kcl_version"`
	// ProjectName: The project name. This is used to tie the prompt to a project. Which helps us make our models better over time.
	ProjectName string `json:"project_name" yaml:"project_name" schema:"project_name"`
	// Prompt: The prompt for the overall changes. This is optional if you only want changes on specific source ranges. This will apply to all the files. If you want to apply a prompt to just a single file, use the source_ranges field and you can leave this empty.
	Prompt string `json:"prompt" yaml:"prompt" schema:"prompt"`
	// SourceRanges: The source ranges the user suggested to change. If empty, the prompt will be used and is required.
	SourceRanges []SourceRangePrompt `json:"source_ranges" yaml:"source_ranges" schema:"source_ranges"`
}

// TextToCadResultsPage: A single page of results
type TextToCadResultsPage struct {
	// Items: list of items on this page of results
	Items []TextToCad `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// TokenRevokeRequestForm: The request parameters for the OAuth 2.0 token revocation flow.
type TokenRevokeRequestForm struct {
	// ClientID: The client ID.
	ClientID UUID `json:"client_id" yaml:"client_id" schema:"client_id,required"`
	// ClientSecret: The client secret.
	ClientSecret string `json:"client_secret" yaml:"client_secret" schema:"client_secret"`
	// Token: The token to revoke.
	Token string `json:"token" yaml:"token" schema:"token,required"`
}

// Transform: Ways to transform each solid being replicated in a repeating pattern.
type Transform struct {
	// Replicate: Whether to replicate the original solid in this instance.
	Replicate bool `json:"replicate" yaml:"replicate" schema:"replicate"`
	// Rotation: Rotate the replica about the specified rotation axis and origin. Defaults to no rotation.
	Rotation Rotation `json:"rotation" yaml:"rotation" schema:"rotation"`
	// Scale: Scale the replica's size along each axis. Defaults to (1, 1, 1) (i.e. the same size as the original).
	Scale Point3D `json:"scale" yaml:"scale" schema:"scale"`
	// Translate: Translate the replica this far along each dimension. Defaults to zero vector (i.e. same position as the original).
	Translate Point3D `json:"translate" yaml:"translate" schema:"translate"`
}

// TransformByForPoint3D: How a property of an object should be transformed.
type TransformByForPoint3D struct {
	// IsLocal: If true, the transform is applied in local space. If false, the transform is applied in global space.
	//
	// Deprecated: IsLocal is deprecated.
	IsLocal bool `json:"is_local" yaml:"is_local" schema:"is_local,required"`
	// Origin: What to use as the origin for the transformation. If not provided, will fall back to local or global origin, depending on whatever the `is_local` field was set to.
	Origin any `json:"origin" yaml:"origin" schema:"origin"`
	// Property: The scale, or rotation, or translation.
	Property Point3D `json:"property" yaml:"property" schema:"property,required"`
	// Set: If true, overwrite the previous value with this. If false, the previous value will be modified. E.g. when translating, `set=true` will set a new location, and `set=false` will translate the current location by the given X/Y/Z.
	Set bool `json:"set" yaml:"set" schema:"set,required"`
}

// TransformByForPoint4D: How a property of an object should be transformed.
type TransformByForPoint4D struct {
	// IsLocal: If true, the transform is applied in local space. If false, the transform is applied in global space.
	//
	// Deprecated: IsLocal is deprecated.
	IsLocal bool `json:"is_local" yaml:"is_local" schema:"is_local,required"`
	// Origin: What to use as the origin for the transformation. If not provided, will fall back to local or global origin, depending on whatever the `is_local` field was set to.
	Origin any `json:"origin" yaml:"origin" schema:"origin"`
	// Property: The scale, or rotation, or translation.
	Property Point4D `json:"property" yaml:"property" schema:"property,required"`
	// Set: If true, overwrite the previous value with this. If false, the previous value will be modified. E.g. when translating, `set=true` will set a new location, and `set=false` will translate the current location by the given X/Y/Z.
	Set bool `json:"set" yaml:"set" schema:"set,required"`
}

// TwistExtrude: The response from the `TwistExtrude` endpoint.
type TwistExtrude struct {
}

// UnitAngle: The valid types of angle formats.
type UnitAngle string

const (
	// UnitAngleDegrees: Degrees <https://en.wikipedia.org/wiki/Degree_(angle)>
	UnitAngleDegrees UnitAngle = "degrees"
	// UnitAngleRadians: Radians <https://en.wikipedia.org/wiki/Radian>
	UnitAngleRadians UnitAngle = "radians"
)

// UnitAngleConversion: Result of converting between units.
type UnitAngleConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitAngle `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitAngle `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitArea: The valid types of area units.
type UnitArea string

const (
	// UnitAreaCm2: Square centimeters <https://en.wikipedia.org/wiki/Square_centimeter>
	UnitAreaCm2 UnitArea = "cm2"
	// UnitAreaDm2: Square decimeters <https://en.wikipedia.org/wiki/Square_decimeter>
	UnitAreaDm2 UnitArea = "dm2"
	// UnitAreaFt2: Square feet <https://en.wikipedia.org/wiki/Square_foot>
	UnitAreaFt2 UnitArea = "ft2"
	// UnitAreaIn2: Square inches <https://en.wikipedia.org/wiki/Square_inch>
	UnitAreaIn2 UnitArea = "in2"
	// UnitAreaKm2: Square kilometers <https://en.wikipedia.org/wiki/Square_kilometer>
	UnitAreaKm2 UnitArea = "km2"
	// UnitAreaM2: Square meters <https://en.wikipedia.org/wiki/Square_meter>
	UnitAreaM2 UnitArea = "m2"
	// UnitAreaMm2: Square millimeters <https://en.wikipedia.org/wiki/Square_millimeter>
	UnitAreaMm2 UnitArea = "mm2"
	// UnitAreaYd2: Square yards <https://en.wikipedia.org/wiki/Square_mile>
	UnitAreaYd2 UnitArea = "yd2"
)

// UnitAreaConversion: Result of converting between units.
type UnitAreaConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitArea `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitArea `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitCurrent: The valid types of current units.
type UnitCurrent string

const (
	// UnitCurrentAmperes: Amperes <https://en.wikipedia.org/wiki/Ampere>
	UnitCurrentAmperes UnitCurrent = "amperes"
	// UnitCurrentMicroamperes: Microamperes <https://en.wikipedia.org/wiki/Microampere>
	UnitCurrentMicroamperes UnitCurrent = "microamperes"
	// UnitCurrentMilliamperes: Milliamperes <https://en.wikipedia.org/wiki/Milliampere>
	UnitCurrentMilliamperes UnitCurrent = "milliamperes"
	// UnitCurrentNanoamperes: Nanoamperes <https://en.wikipedia.org/wiki/Nanoampere>
	UnitCurrentNanoamperes UnitCurrent = "nanoamperes"
)

// UnitCurrentConversion: Result of converting between units.
type UnitCurrentConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitCurrent `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitCurrent `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitDensity: The valid types for density units.
type UnitDensity string

const (
	// UnitDensityLbft3: Pounds per cubic feet.
	UnitDensityLbft3 UnitDensity = "lb:ft3"
	// UnitDensityKgm3: Kilograms per cubic meter.
	UnitDensityKgm3 UnitDensity = "kg:m3"
)

// UnitEnergy: The valid types of energy units.
type UnitEnergy string

const (
	// UnitEnergyBtu: British Thermal Unit (BTU) <https://en.wikipedia.org/wiki/British_thermal_unit>
	UnitEnergyBtu UnitEnergy = "btu"
	// UnitEnergyElectronvolts: Electron Volts (eV) <https://en.wikipedia.org/wiki/Electronvolt>
	UnitEnergyElectronvolts UnitEnergy = "electronvolts"
	// UnitEnergyJoules: Joules (or watt-seconds) <https://en.wikipedia.org/wiki/Joule>
	UnitEnergyJoules UnitEnergy = "joules"
	// UnitEnergyKilocalories: Kilocalories (often just called calories) <https://en.wikipedia.org/wiki/Kilocalorie>
	UnitEnergyKilocalories UnitEnergy = "kilocalories"
	// UnitEnergyKilowattHours: Kilowatt hours (kWh) <https://en.wikipedia.org/wiki/Kilowatt-hour>
	UnitEnergyKilowattHours UnitEnergy = "kilowatt_hours"
	// UnitEnergyWattHours: Watt hours (Wh) <https://en.wikipedia.org/wiki/Kilowatt-hour>
	UnitEnergyWattHours UnitEnergy = "watt_hours"
)

// UnitEnergyConversion: Result of converting between units.
type UnitEnergyConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitEnergy `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitEnergy `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitForce: The valid types of force units.
type UnitForce string

const (
	// UnitForceDynes: Dynes <https://en.wikipedia.org/wiki/Dyne>
	UnitForceDynes UnitForce = "dynes"
	// UnitForceKiloponds: Kiloponds <https://en.wikipedia.org/wiki/Kilopond>
	UnitForceKiloponds UnitForce = "kiloponds"
	// UnitForceMicronewtons: Micronewtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceMicronewtons UnitForce = "micronewtons"
	// UnitForceMillinewtons: Millinewtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceMillinewtons UnitForce = "millinewtons"
	// UnitForceNewtons: Newtons <https://en.wikipedia.org/wiki/Newton_(unit)>
	UnitForceNewtons UnitForce = "newtons"
	// UnitForcePoundals: Poundals <https://en.wikipedia.org/wiki/Poundal>
	UnitForcePoundals UnitForce = "poundals"
	// UnitForcePounds: Pounds <https://en.wikipedia.org/wiki/Pound_(force)>
	UnitForcePounds UnitForce = "pounds"
)

// UnitForceConversion: Result of converting between units.
type UnitForceConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitForce `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitForce `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitFrequency: The valid types of frequency units.
type UnitFrequency string

const (
	// UnitFrequencyGigahertz: Gigahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyGigahertz UnitFrequency = "gigahertz"
	// UnitFrequencyHertz: Hertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyHertz UnitFrequency = "hertz"
	// UnitFrequencyKilohertz: Kilohertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyKilohertz UnitFrequency = "kilohertz"
	// UnitFrequencyMegahertz: Megahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMegahertz UnitFrequency = "megahertz"
	// UnitFrequencyMicrohertz: Microhertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMicrohertz UnitFrequency = "microhertz"
	// UnitFrequencyMillihertz: Millihertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyMillihertz UnitFrequency = "millihertz"
	// UnitFrequencyNanohertz: Nanohertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyNanohertz UnitFrequency = "nanohertz"
	// UnitFrequencyTerahertz: Terahertz <https://en.wikipedia.org/wiki/Hertz>
	UnitFrequencyTerahertz UnitFrequency = "terahertz"
)

// UnitFrequencyConversion: Result of converting between units.
type UnitFrequencyConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitFrequency `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitFrequency `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitLength: The valid types of length units.
type UnitLength string

const (
	// UnitLengthCm: Centimeters <https://en.wikipedia.org/wiki/Centimeter>
	UnitLengthCm UnitLength = "cm"
	// UnitLengthFt: Feet <https://en.wikipedia.org/wiki/Foot_(unit)>
	UnitLengthFt UnitLength = "ft"
	// UnitLengthIn: Inches <https://en.wikipedia.org/wiki/Inch>
	UnitLengthIn UnitLength = "in"
	// UnitLengthM: Meters <https://en.wikipedia.org/wiki/Meter>
	UnitLengthM UnitLength = "m"
	// UnitLengthMm: Millimeters <https://en.wikipedia.org/wiki/Millimeter>
	UnitLengthMm UnitLength = "mm"
	// UnitLengthYd: Yards <https://en.wikipedia.org/wiki/Yard>
	UnitLengthYd UnitLength = "yd"
)

// UnitLengthConversion: Result of converting between units.
type UnitLengthConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitLength `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitLength `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitMas: The valid types of mass units.
type UnitMas string

const (
	// UnitMasG: Grams <https://en.wikipedia.org/wiki/Gram>
	UnitMasG UnitMas = "g"
	// UnitMasKg: Kilograms <https://en.wikipedia.org/wiki/Kilogram>
	UnitMasKg UnitMas = "kg"
	// UnitMasLb: Pounds <https://en.wikipedia.org/wiki/Pound_(mass)>
	UnitMasLb UnitMas = "lb"
)

// UnitMassConversion: Result of converting between units.
type UnitMassConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitMas `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitMas `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitPower: The valid types of power units.
type UnitPower string

const (
	// UnitPowerBtuPerMinute: British thermal units (BTU) per minute <https://en.wikipedia.org/wiki/British_thermal_unit>
	UnitPowerBtuPerMinute UnitPower = "btu_per_minute"
	// UnitPowerHorsepower: Horsepower (hp) <https://en.wikipedia.org/wiki/Horsepower>
	UnitPowerHorsepower UnitPower = "horsepower"
	// UnitPowerKilowatts: Kilowatts <https://en.wikipedia.org/wiki/Kilowatt>
	UnitPowerKilowatts UnitPower = "kilowatts"
	// UnitPowerMetricHorsepower: Metric horsepower (PS) <https://en.wikipedia.org/wiki/Horsepower#Metric_horsepower>
	UnitPowerMetricHorsepower UnitPower = "metric_horsepower"
	// UnitPowerMicrowatts: Microwatts <https://en.wikipedia.org/wiki/Microwatt>
	UnitPowerMicrowatts UnitPower = "microwatts"
	// UnitPowerMilliwatts: Millwatts <https://en.wikipedia.org/wiki/Milliwatt>
	UnitPowerMilliwatts UnitPower = "milliwatts"
	// UnitPowerWatts: Watts <https://en.wikipedia.org/wiki/Watt>
	UnitPowerWatts UnitPower = "watts"
)

// UnitPowerConversion: Result of converting between units.
type UnitPowerConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitPower `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitPower `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitPressure: The valid types of pressure units.
type UnitPressure string

const (
	// UnitPressureAtmospheres: Atmospheres <https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)>
	UnitPressureAtmospheres UnitPressure = "atmospheres"
	// UnitPressureBars: Bars <https://en.wikipedia.org/wiki/Bar_(unit)>
	UnitPressureBars UnitPressure = "bars"
	// UnitPressureHectopascals: Hectopascals <https://en.wikipedia.org/wiki/Hectopascal>
	UnitPressureHectopascals UnitPressure = "hectopascals"
	// UnitPressureKilopascals: Kilopascals <https://en.wikipedia.org/wiki/Kilopascal>
	UnitPressureKilopascals UnitPressure = "kilopascals"
	// UnitPressureMillibars: Millibars <https://en.wikipedia.org/wiki/Bar_(unit)>
	UnitPressureMillibars UnitPressure = "millibars"
	// UnitPressurePascals: Pascals <https://en.wikipedia.org/wiki/Pascal_(unit)>
	UnitPressurePascals UnitPressure = "pascals"
	// UnitPressurePsi: Pounds per square inch (PSI) - <https://en.wikipedia.org/wiki/Pound_per_square_inch>
	UnitPressurePsi UnitPressure = "psi"
)

// UnitPressureConversion: Result of converting between units.
type UnitPressureConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitPressure `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitPressure `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitTemperature: The valid types of temperature units.
type UnitTemperature string

const (
	// UnitTemperatureCelsius: Celsius <https://en.wikipedia.org/wiki/Celsius>
	UnitTemperatureCelsius UnitTemperature = "celsius"
	// UnitTemperatureFahrenheit: Fahrenheit <https://en.wikipedia.org/wiki/Fahrenheit>
	UnitTemperatureFahrenheit UnitTemperature = "fahrenheit"
	// UnitTemperatureKelvin: Kelvin <https://en.wikipedia.org/wiki/Kelvin>
	UnitTemperatureKelvin UnitTemperature = "kelvin"
	// UnitTemperatureRankine: Rankine <https://en.wikipedia.org/wiki/Rankine_scale>
	UnitTemperatureRankine UnitTemperature = "rankine"
)

// UnitTemperatureConversion: Result of converting between units.
type UnitTemperatureConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitTemperature `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitTemperature `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitTorque: The valid types of torque units.
type UnitTorque string

const (
	// UnitTorqueNewtonMetres: Newton metres <https://en.wikipedia.org/wiki/Newton_metre>
	UnitTorqueNewtonMetres UnitTorque = "newton_metres"
	// UnitTorquePoundFoot: Pound foot <https://en.wikipedia.org/wiki/Pound-foot_(torque)>
	UnitTorquePoundFoot UnitTorque = "pound_foot"
)

// UnitTorqueConversion: Result of converting between units.
type UnitTorqueConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitTorque `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitTorque `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UnitVolume: The valid types of volume units.
type UnitVolume string

const (
	// UnitVolumeCm3: Cubic centimeters (cc or cm³) <https://en.wikipedia.org/wiki/Cubic_centimeter>
	UnitVolumeCm3 UnitVolume = "cm3"
	// UnitVolumeFt3: Cubic feet (ft³) <https://en.wikipedia.org/wiki/Cubic_foot>
	UnitVolumeFt3 UnitVolume = "ft3"
	// UnitVolumeIn3: Cubic inches (cu in or in³) <https://en.wikipedia.org/wiki/Cubic_inch>
	UnitVolumeIn3 UnitVolume = "in3"
	// UnitVolumeM3: Cubic meters (m³) <https://en.wikipedia.org/wiki/Cubic_meter>
	UnitVolumeM3 UnitVolume = "m3"
	// UnitVolumeYd3: Cubic yards (yd³) <https://en.wikipedia.org/wiki/Cubic_yard>
	UnitVolumeYd3 UnitVolume = "yd3"
	// UnitVolumeUsfloz: US Fluid Ounces (fl oz) <https://en.wikipedia.org/wiki/Fluid_ounce>
	UnitVolumeUsfloz UnitVolume = "usfloz"
	// UnitVolumeUsgal: US Gallons (gal US) <https://en.wikipedia.org/wiki/Gallon>
	UnitVolumeUsgal UnitVolume = "usgal"
	// UnitVolumeL: Liters (l) <https://en.wikipedia.org/wiki/Litre>
	UnitVolumeL UnitVolume = "l"
	// UnitVolumeMl: Milliliters (ml) <https://en.wikipedia.org/wiki/Litre>
	UnitVolumeMl UnitVolume = "ml"
)

// UnitVolumeConversion: Result of converting between units.
type UnitVolumeConversion struct {
	// CompletedAt: The time and date the API call was completed.
	CompletedAt Time `json:"completed_at" yaml:"completed_at" schema:"completed_at"`
	// CreatedAt: The time and date the API call was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Error: The error the function returned, if any.
	Error string `json:"error" yaml:"error" schema:"error"`
	// ID: The unique identifier of the API call.
	//
	// This is the same as the API call ID.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Input: The input value.
	Input float64 `json:"input" yaml:"input" schema:"input"`
	// InputUnit: The source format of the unit conversion.
	InputUnit UnitVolume `json:"input_unit" yaml:"input_unit" schema:"input_unit,required"`
	// Output: The resulting value.
	Output float64 `json:"output" yaml:"output" schema:"output"`
	// OutputUnit: The output format of the unit conversion.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// StartedAt: The time and date the API call was started.
	StartedAt Time `json:"started_at" yaml:"started_at" schema:"started_at"`
	// Status: The status of the API call.
	Status APICallStatus `json:"status" yaml:"status" schema:"status,required"`
	// UpdatedAt: The time and date the API call was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
	// UserID: The user ID of the user who created the API call.
	UserID UUID `json:"user_id" yaml:"user_id" schema:"user_id,required"`
}

// UpdateAnnotation: The response from the `UpdateAnnotation` endpoint.
type UpdateAnnotation struct {
}

// UpdateMemberToOrgBody: Data for updating a member of an org.
type UpdateMemberToOrgBody struct {
	// Role: The organization role to give the user.
	Role UserOrgRole `json:"role" yaml:"role" schema:"role,required"`
}

// UpdatePaymentBalance: The data for updating a balance.
type UpdatePaymentBalance struct {
	// MonthlyAPICreditsRemainingMonetaryValue: The monetary value of the monthy API credits remaining in the balance. This gets re-upped every month,
	MonthlyAPICreditsRemainingMonetaryValue float64 `json:"monthly_api_credits_remaining_monetary_value" yaml:"monthly_api_credits_remaining_monetary_value" schema:"monthly_api_credits_remaining_monetary_value"`
	// StableAPICreditsRemainingMonetaryValue: The monetary value of stable API credits remaining in the balance. These do not get reset or re-upped every month. This is separate from the monthly credits. Credits will first pull from the monthly credits, then the stable credits. Stable just means that they do not get reset every month. A user will have stable credits if a Zoo employee granted them credits.
	StableAPICreditsRemainingMonetaryValue float64 `json:"stable_api_credits_remaining_monetary_value" yaml:"stable_api_credits_remaining_monetary_value" schema:"stable_api_credits_remaining_monetary_value"`
}

// UpdateShortlinkRequest: Request to update a shortlink.
type UpdateShortlinkRequest struct {
	// Password: The password for the shortlink, if you want to restrict access to it. This can only be set if your subscription allows for it. Otherwise, it will return an error. When you access the link it will be required to enter this password through basic auth. The username will be `{anything}` and the password will be the password you set here.
	Password string `json:"password" yaml:"password" schema:"password"`
	// RestrictToOrg: If the shortlink should be restricted to the user's organization to view. This only applies to org shortlinks. If you are creating a user shortlink and you are not a member of a team or enterprise and you try to set this to true, it will fail.
	RestrictToOrg bool `json:"restrict_to_org" yaml:"restrict_to_org" schema:"restrict_to_org,required"`
}

// UpdateUser: The user-modifiable parts of a User.
type UpdateUser struct {
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// Image: The image URL for the user. NOTE: If the user uses an OAuth2 provider, this will be overwritten by the provider's image URL when the user logs in next.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// IsOnboarded: If the user is now onboarded.
	IsOnboarded bool `json:"is_onboarded" yaml:"is_onboarded" schema:"is_onboarded"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
}

// User: A user.
type User struct {
	// Block: If the user should be blocked and the reason why.
	Block BlockReason `json:"block" yaml:"block" schema:"block"`
	// CanTrainOnData: If we can train on the user's data. If the user is a member of an organization, the organization's setting will override this.
	CanTrainOnData bool `json:"can_train_on_data" yaml:"can_train_on_data" schema:"can_train_on_data"`
	// Company: The user's company.
	Company string `json:"company" yaml:"company" schema:"company"`
	// CreatedAt: The date and time the user was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// DeletionScheduled: If the user is scheduled for deletion.
	DeletionScheduled bool `json:"deletion_scheduled" yaml:"deletion_scheduled" schema:"deletion_scheduled"`
	// Discord: The user's Discord handle.
	Discord string `json:"discord" yaml:"discord" schema:"discord"`
	// Email: The email address of the user.
	Email string `json:"email" yaml:"email" schema:"email"`
	// EmailVerified: The date and time the email address was verified.
	EmailVerified Time `json:"email_verified" yaml:"email_verified" schema:"email_verified"`
	// FirstName: The user's first name.
	FirstName string `json:"first_name" yaml:"first_name" schema:"first_name"`
	// Github: The user's GitHub handle.
	Github string `json:"github" yaml:"github" schema:"github"`
	// ID: The unique identifier for the user.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Image: The image avatar for the user. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image,required"`
	// IsOnboarded: If the user has finished onboarding.
	IsOnboarded bool `json:"is_onboarded" yaml:"is_onboarded" schema:"is_onboarded"`
	// IsServiceAccount: If the user is tied to a service account.
	IsServiceAccount bool `json:"is_service_account" yaml:"is_service_account" schema:"is_service_account"`
	// LastName: The user's last name.
	LastName string `json:"last_name" yaml:"last_name" schema:"last_name"`
	// Name: The name of the user. This is auto populated at first from the authentication provider (if there was a name). It can be updated by the user by updating their `first_name` and `last_name` fields.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The user's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// UpdatedAt: The date and time the user was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// UserOrgInfo: A user's information about an org, including their role.
type UserOrgInfo struct {
	// AllowUsersInDomainToAutoJoin: If we should allow all future users who are created with email addresses from this domain to join the org.
	AllowUsersInDomainToAutoJoin bool `json:"allow_users_in_domain_to_auto_join" yaml:"allow_users_in_domain_to_auto_join" schema:"allow_users_in_domain_to_auto_join"`
	// BillingEmail: The billing email address of the org.
	BillingEmail string `json:"billing_email" yaml:"billing_email" schema:"billing_email"`
	// BillingEmailVerified: The date and time the billing email address was verified.
	BillingEmailVerified Time `json:"billing_email_verified" yaml:"billing_email_verified" schema:"billing_email_verified"`
	// Block: If the org should be blocked and the reason why.
	Block BlockReason `json:"block" yaml:"block" schema:"block"`
	// CreatedAt: The date and time the org was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Domain: The org's domain.
	Domain string `json:"domain" yaml:"domain" schema:"domain"`
	// ID: The unique identifier for the org.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Image: The image for the org. This is a URL.
	Image URL `json:"image" yaml:"image" schema:"image"`
	// Name: The name of the org.
	Name string `json:"name" yaml:"name" schema:"name"`
	// Phone: The org's phone number.
	Phone string `json:"phone" yaml:"phone" schema:"phone"`
	// Role: The user's role in the org.
	Role OrgRole `json:"role" yaml:"role" schema:"role,required"`
	// StripeID: The org's stripe id.
	StripeID string `json:"stripe_id" yaml:"stripe_id" schema:"stripe_id"`
	// UpdatedAt: The date and time the org was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// UserOrgRole: The roles for users in an organization.
type UserOrgRole string

const (
	// UserOrgRoleAdmin: Admins can do anything in the org.
	UserOrgRoleAdmin UserOrgRole = "admin"
	// UserOrgRoleMember: Members of an org can not modify an org, but they belong in the org.
	UserOrgRoleMember UserOrgRole = "member"
)

// UserResultsPage: A single page of results
type UserResultsPage struct {
	// Items: list of items on this page of results
	Items []User `json:"items" yaml:"items" schema:"items,required"`
	// NextPage: token used to fetch the next page of results (if any)
	NextPage string `json:"next_page" yaml:"next_page" schema:"next_page"`
}

// VerificationTokenResponse: A verification token response.
type VerificationTokenResponse struct {
	// CreatedAt: The date and time the verification token was created.
	CreatedAt Time `json:"created_at" yaml:"created_at" schema:"created_at,required"`
	// Expires: The date and time the verification token expires.
	Expires Time `json:"expires" yaml:"expires" schema:"expires,required"`
	// ID: The token used for verification. This is used as the id for the table since it is unique per record.
	ID UUID `json:"id" yaml:"id" schema:"id,required"`
	// Identifier: The identifier for the user. This is typically the user's email address since that is what we are verifying.
	Identifier string `json:"identifier" yaml:"identifier" schema:"identifier"`
	// SamlRedirectUrl: The URL to redirect to if the user requires SAML authentication.
	SamlRedirectUrl URL `json:"saml_redirect_url" yaml:"saml_redirect_url" schema:"saml_redirect_url"`
	// UpdatedAt: The date and time the verification token was last updated.
	UpdatedAt Time `json:"updated_at" yaml:"updated_at" schema:"updated_at,required"`
}

// ViewIsometric: The response from the `ViewIsometric` command.
type ViewIsometric struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}

// Volume: The volume response.
type Volume struct {
	// OutputUnit: The output unit for the volume.
	OutputUnit UnitVolume `json:"output_unit" yaml:"output_unit" schema:"output_unit,required"`
	// Volume: The volume.
	Volume float64 `json:"volume" yaml:"volume" schema:"volume,required"`
}

// WebSocketRequestBatchID: Authentication header request.
type WebSocketRequestBatchID struct {
	// Headers: The authentication header.
	Headers map[string]string `json:"headers" yaml:"headers" schema:"headers,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestCandidate: The trickle ICE candidate request.
type WebSocketRequestCandidate struct {
	// Candidate: Information about the ICE candidate.
	Candidate RtcIceCandidateInit `json:"candidate" yaml:"candidate" schema:"candidate,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestCmd: The client-to-server Ping to ensure the WebSocket stays alive.
type WebSocketRequestCmd struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestCmdID: The response to a metrics collection request from the server.
type WebSocketRequestCmdID struct {
	// Metrics: Collected metrics from the Client's end of the engine connection.
	Metrics ClientMetrics `json:"metrics" yaml:"metrics" schema:"metrics,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestModelingCmdReq: Return information about the connected instance
type WebSocketRequestModelingCmdReq struct {
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestOffer: The modeling command request.
type WebSocketRequestOffer struct {
	// Cmd: Which command to submit to the Kittycad engine.
	Cmd any `json:"cmd" yaml:"cmd" schema:"cmd,required"`
	// CmdID: ID of command being submitted.
	CmdID UUID `json:"cmd_id" yaml:"cmd_id" schema:"cmd_id,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestSdpOffer: A sequence of modeling requests. If any request fails, following requests will not be tried.
type WebSocketRequestSdpOffer struct {
	// BatchID: ID of batch being submitted. Each request has their own individual ModelingCmdId, but this is the ID of the overall batch.
	BatchID UUID `json:"batch_id" yaml:"batch_id" schema:"batch_id,required"`
	// Requests: A sequence of modeling requests. If any request fails, following requests will not be tried.
	Requests []ModelingCmdReq `json:"requests" yaml:"requests" schema:"requests,required"`
	// Responses: If false or omitted, responses to each batch command will just be Ok(()). If true, responses will be the actual response data for that modeling command.
	Responses bool `json:"responses" yaml:"responses" schema:"responses"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WebSocketRequestTrickleIce: The SDP offer request.
type WebSocketRequestTrickleIce struct {
	// Offer: The session description.
	Offer RtcSessionDescription `json:"offer" yaml:"offer" schema:"offer,required"`
	// Type:
	Type string `json:"type" yaml:"type" schema:"type,required"`
}

// WorldCoordinateSystem is the type definition for a WorldCoordinateSystem.
type WorldCoordinateSystem string

const (
	// WorldCoordinateSystemRightHandedUpZ represents the WorldCoordinateSystem `"right_handed_up_z"`.
	WorldCoordinateSystemRightHandedUpZ WorldCoordinateSystem = "right_handed_up_z"
	// WorldCoordinateSystemRightHandedUpY represents the WorldCoordinateSystem `"right_handed_up_y"`.
	WorldCoordinateSystemRightHandedUpY WorldCoordinateSystem = "right_handed_up_y"
)

// ZooProductSubscription: A subscription to the modeling app.
type ZooProductSubscription struct {
	// AnnualDiscount: Annual discount. The percentage off the monthly price if the user pays annually.
	AnnualDiscount float64 `json:"annual_discount" yaml:"annual_discount" schema:"annual_discount"`
	// Description: A description of the tier.
	Description string `json:"description" yaml:"description" schema:"description,required"`
	// EndpointsIncluded: The Zoo API endpoints that are included when through an approved zoo tool.
	EndpointsIncluded []APIEndpoint `json:"endpoints_included" yaml:"endpoints_included" schema:"endpoints_included"`
	// Features: Features that are included in the subscription.
	Features []SubscriptionTierFeature `json:"features" yaml:"features" schema:"features"`
	// MonthlyPayAsYouGoAPICredits: The amount of pay-as-you-go API credits the individual or org gets outside the modeling app per month. This re-ups on the 1st of each month. This is equivalent to the monetary value divided by the price of an API credit.
	MonthlyPayAsYouGoAPICredits int `json:"monthly_pay_as_you_go_api_credits" yaml:"monthly_pay_as_you_go_api_credits" schema:"monthly_pay_as_you_go_api_credits"`
	// MonthlyPayAsYouGoAPICreditsMonetaryValue: The monetary value of pay-as-you-go API credits the individual or org gets outside the modeling app per month. This re-ups on the 1st of each month.
	MonthlyPayAsYouGoAPICreditsMonetaryValue float64 `json:"monthly_pay_as_you_go_api_credits_monetary_value" yaml:"monthly_pay_as_you_go_api_credits_monetary_value" schema:"monthly_pay_as_you_go_api_credits_monetary_value,required"`
	// Name: The name of the tier.
	Name ModelingAppSubscriptionTierName `json:"name" yaml:"name" schema:"name,required"`
	// PayAsYouGoAPICreditPrice: The price of an API credit (meaning 1 credit = 1 minute of API usage).
	PayAsYouGoAPICreditPrice float64 `json:"pay_as_you_go_api_credit_price" yaml:"pay_as_you_go_api_credit_price" schema:"pay_as_you_go_api_credit_price"`
	// Price: The price of the tier per month. If this is for an individual, this is the price they pay. If this is for an organization, this is the price the organization pays per member in the org. This is in USD.
	Price any `json:"price" yaml:"price" schema:"price,required"`
	// ShareLinks: The options for sharable links through the modeling app.
	ShareLinks []ModelingAppShareLinks `json:"share_links" yaml:"share_links" schema:"share_links"`
	// SupportTier: The support tier the subscription provides.
	SupportTier SupportTier `json:"support_tier" yaml:"support_tier" schema:"support_tier,required"`
	// TrainingDataBehavior: The behavior of the users data (can it be used for training, etc).
	TrainingDataBehavior SubscriptionTrainingDataBehavior `json:"training_data_behavior" yaml:"training_data_behavior" schema:"training_data_behavior,required"`
	// Type: If the tier is offered for an individual or an org.
	Type any `json:"type" yaml:"type" schema:"type,required"`
	// ZooToolsIncluded: The Zoo tools that you can call unlimited times with this tier.
	ZooToolsIncluded []ZooTool `json:"zoo_tools_included" yaml:"zoo_tools_included" schema:"zoo_tools_included"`
}

// ZooProductSubscriptions: A struct of Zoo product subscriptions.
type ZooProductSubscriptions struct {
	// ModelingApp: A modeling app subscription.
	ModelingApp ModelingAppSubscriptionTier `json:"modeling_app" yaml:"modeling_app" schema:"modeling_app,required"`
}

// ZooProductSubscriptionsOrgRequest: A struct of Zoo product subscriptions an organization can request.
type ZooProductSubscriptionsOrgRequest struct {
	// ModelingApp: A modeling app subscription.
	ModelingApp ModelingAppOrganizationSubscriptionTier `json:"modeling_app" yaml:"modeling_app" schema:"modeling_app"`
	// PayAnnually: If the customer chooses to pay annually or monthly, we can add that here. The annual discount will apply if there is a discount for the subscription.
	PayAnnually bool `json:"pay_annually" yaml:"pay_annually" schema:"pay_annually"`
}

// ZooProductSubscriptionsUserRequest: A struct of Zoo product subscriptions a user can request.
type ZooProductSubscriptionsUserRequest struct {
	// ModelingApp: A modeling app subscription.
	ModelingApp ModelingAppIndividualSubscriptionTier `json:"modeling_app" yaml:"modeling_app" schema:"modeling_app"`
	// PayAnnually: If the customer chooses to pay annually or monthly, we can add that here. The annual discount will apply if there is a discount for the subscription.
	PayAnnually bool `json:"pay_annually" yaml:"pay_annually" schema:"pay_annually"`
}

// ZooTool: The Zoo tools that can make API calls.
type ZooTool string

const (
	// ZooToolModelingApp: The modeling app.
	ZooToolModelingApp ZooTool = "modeling_app"
	// ZooToolDiffChromeExtension: The Diff Chrome Extension.
	ZooToolDiffChromeExtension ZooTool = "diff_chrome_extension"
	// ZooToolTextToCad: The Text-to-CAD UI.
	ZooToolTextToCad ZooTool = "text_to_cad"
)

// ZoomToFit: The response from the `ZoomToFit` command.
type ZoomToFit struct {
	// Settings: Camera settings
	Settings CameraSettings `json:"settings" yaml:"settings" schema:"settings,required"`
}
