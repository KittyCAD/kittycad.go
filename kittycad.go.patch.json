[
 {
  "value": {
   "client": "// Create a client with your token.\nfunc ExampleNewClient() {\n\tclient, err := kittycad.NewClient(\"$TOKEN\", \"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Call the client's methods.\n\tresult, err := client.Meta.Ping()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(result)\n}\n\n// - OR -\n\n// Create a new client with your token parsed from the environment\n// variable: `ZOO_API_TOKEN`.\nfunc ExampleNewClientFromEnv() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Call the client's methods.\n\tresult, err := client.Meta.Ping()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n}\n",
   "install": "go get github.com/kittycad/kittycad.go"
  },
  "op": "add",
  "path": "/info/x-go"
 },
 {
  "value": {
   "example": "// GetSchema: Get OpenAPI schema.\n// \n// GetSchema: Get OpenAPI schema.\nfunc ExampleMetaService_GetSchema() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Meta.GetSchema(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.GetSchema"
  },
  "op": "add",
  "path": "/paths/~1/get/x-go"
 },
 {
  "value": {
   "example": "// Getdata: Get the metadata about our currently running server.\n// \n// This includes information on any of our other distributed systems it is connected to.\n// \n// You must be a Zoo employee to perform this request.\n// \n// Getdata: Get the metadata about our currently running server.\n// This includes information on any of our other distributed systems it is connected to.\n//\n// You must be a Zoo employee to perform this request.\nfunc ExampleMetaService_Getdata() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Meta.Getdata()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.Getdata"
  },
  "op": "add",
  "path": "/paths/~1_meta~1info/get/x-go"
 },
 {
  "value": {
   "example": "// GetIpinfo: Get ip address information.\n// \n// GetIpinfo: Get ip address information.\nfunc ExampleMetaService_GetIpinfo() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Meta.GetIpinfo()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.GetIpinfo"
  },
  "op": "add",
  "path": "/paths/~1_meta~1ipinfo/get/x-go"
 },
 {
  "value": {
   "example": "// CreateTextToCad: Generate a CAD model from text.\n// \n// Because our source of truth for the resulting model is a STEP file, you will always have STEP file contents when you list your generated models. Any other formats you request here will also be returned when you list your generated models.\n// \n// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// One thing to note, if you hit the cache, this endpoint will return right away. So you only have to wait if the status is not `Completed` or `Failed`.\n// \n// \n// Parameters\n// \n// \t- `outputFormat`: The valid types of output file formats.\n// \t- `kcl`\n// \t- `body`: Body for generating models from text.\n// \n// CreateTextToCad: Generate a CAD model from text.\n// Because our source of truth for the resulting model is a STEP file, you will always have STEP file contents when you list your generated models. Any other formats you request here will also be returned when you list your generated models.\n//\n// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// One thing to note, if you hit the cache, this endpoint will return right away. So you only have to wait if the status is not `Completed` or `Failed`.\n//\n// Parameters\n//\n//   - `outputFormat`: The valid types of output file formats.\n//   - `kcl`\n//   - `body`: Body for generating models from text.\nfunc ExampleMlService_CreateTextToCad() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.CreateTextToCad(\"\", true, kittycad.TextToCadCreateBody{Prompt: \"some-string\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.CreateTextToCad"
  },
  "op": "add",
  "path": "/paths/~1ai~1text-to-cad~1{output_format}/post/x-go"
 },
 {
  "value": {
   "example": "// GetMetrics: Get API call metrics.\n// \n// This endpoint requires authentication by a Zoo employee. The API calls are grouped by the parameter passed.\n// \n// \n// Parameters\n// \n// \t- `groupBy`: The field of an API call to group by.\n// \n// GetMetrics: Get API call metrics.\n// This endpoint requires authentication by a Zoo employee. The API calls are grouped by the parameter passed.\n//\n// Parameters\n//\n//   - `groupBy`: The field of an API call to group by.\nfunc ExampleAPICallService_GetMetrics() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.GetMetrics(\"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.GetMetrics"
  },
  "op": "add",
  "path": "/paths/~1api-call-metrics/get/x-go"
 },
 {
  "value": {
   "example": "// List: List API calls.\n// \n// This endpoint requires authentication by a Zoo employee. The API calls are returned in order of creation, with the most recently created API calls first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// List: List API calls.\n// This endpoint requires authentication by a Zoo employee. The API calls are returned in order of creation, with the most recently created API calls first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleAPICallService_List() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.List(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.List"
  },
  "op": "add",
  "path": "/paths/~1api-calls/get/x-go"
 },
 {
  "value": {
   "example": "// Get: Get details of an API call.\n// \n// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.\n// \n// If the user is not authenticated to view the specified API call, then it is not returned.\n// \n// Only Zoo employees can view API calls for other users.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// Get: Get details of an API call.\n// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.\n//\n// If the user is not authenticated to view the specified API call, then it is not returned.\n//\n// Only Zoo employees can view API calls for other users.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleAPICallService_Get() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.Get(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.Get"
  },
  "op": "add",
  "path": "/paths/~1api-calls~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// GithubCallback: Listen for callbacks to GitHub app authentication.\n// \n// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.\n// \n// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.\n// \n// \n// Parameters\n// \n// \t- `body`\n// \n// GithubCallback: Listen for callbacks to GitHub app authentication.\n// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.\n//\n// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.\n//\n// Parameters\n//\n//   - `body`\nfunc ExampleAppService_GithubCallback() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.App.GithubCallback(\"\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#AppService.GithubCallback"
  },
  "op": "add",
  "path": "/paths/~1apps~1github~1callback/get/x-go"
 },
 {
  "value": {
   "example": "// GithubConsent: Get the consent URL for GitHub app authentication.\n// \n// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.\n// \n// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.\n// \n// GithubConsent: Get the consent URL for GitHub app authentication.\n// This is different than OAuth 2.0 authentication for users. This endpoint grants access for Zoo to access user's repos.\n//\n// The user doesn't need Zoo OAuth authorization for this endpoint, this is purely for the GitHub permissions to access repos.\nfunc ExampleAppService_GithubConsent() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.App.GithubConsent()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#AppService.GithubConsent"
  },
  "op": "add",
  "path": "/paths/~1apps~1github~1consent/get/x-go"
 },
 {
  "value": {
   "example": "// GithubWebhook: Listen for GitHub webhooks.\n// \n// These come from the GitHub app.\n// \n// \n// Parameters\n// \n// \t- `body`\n// \n// GithubWebhook: Listen for GitHub webhooks.\n// These come from the GitHub app.\n//\n// Parameters\n//\n//   - `body`\nfunc ExampleAppService_GithubWebhook() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.App.GithubWebhook([]byte(\"some-binary\")); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#AppService.GithubWebhook"
  },
  "op": "add",
  "path": "/paths/~1apps~1github~1webhook/post/x-go"
 },
 {
  "value": {
   "example": "// ListAsyncOperations: List async operations.\n// \n// For async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.\n// \n// This endpoint requires authentication by a Zoo employee.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \t- `status`: The status of an async API call.\n// \n// ListAsyncOperations: List async operations.\n// For async file conversion operations, this endpoint does not return the contents of converted files (`output`). To get the contents use the `/async/operations/{id}` endpoint.\n//\n// This endpoint requires authentication by a Zoo employee.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\n//\n//   - `status`: The status of an async API call.\nfunc ExampleAPICallService_ListAsyncOperations() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.ListAsyncOperations(123, \"some-string\", \"\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.ListAsyncOperations"
  },
  "op": "add",
  "path": "/paths/~1async~1operations/get/x-go"
 },
 {
  "value": {
   "example": "// GetAsyncOperation: Get an async operation.\n// \n// Get the status and output of an async operation.\n// \n// This endpoint requires authentication by any Zoo user. It returns details of the requested async operation for the user.\n// \n// If the user is not authenticated to view the specified async operation, then it is not returned.\n// \n// Only Zoo employees with the proper access can view async operations for other users.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetAsyncOperation: Get an async operation.\n// Get the status and output of an async operation.\n//\n// This endpoint requires authentication by any Zoo user. It returns details of the requested async operation for the user.\n//\n// If the user is not authenticated to view the specified async operation, then it is not returned.\n//\n// Only Zoo employees with the proper access can view async operations for other users.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleAPICallService_GetAsyncOperation() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.GetAsyncOperation(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.GetAsyncOperation"
  },
  "op": "add",
  "path": "/paths/~1async~1operations~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// AuthEmail: Create an email verification request for a user.\n// \n// \n// Parameters\n// \n// \t- `body`: The body of the form for email authentication.\n// \n// AuthEmail: Create an email verification request for a user.\n// Parameters\n//\n//   - `body`: The body of the form for email authentication.\nfunc ExampleHiddenService_AuthEmail() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Hidden.AuthEmail(kittycad.EmailAuthenticationForm{CallbackUrl: kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}, Email: \"example@example.com\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#HiddenService.AuthEmail"
  },
  "op": "add",
  "path": "/paths/~1auth~1email/post/x-go"
 },
 {
  "value": {
   "example": "// AuthEmailCallback: Listen for callbacks for email authentication for users.\n// \n// \n// Parameters\n// \n// \t- `callbackUrl`\n// \t- `email`\n// \t- `token`\n// \n// AuthEmailCallback: Listen for callbacks for email authentication for users.\n// Parameters\n//\n//   - `callbackUrl`\n//   - `email`\n//   - `token`\nfunc ExampleHiddenService_AuthEmailCallback() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Hidden.AuthEmailCallback(kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}, \"example@example.com\", \"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#HiddenService.AuthEmailCallback"
  },
  "op": "add",
  "path": "/paths/~1auth~1email~1callback/get/x-go"
 },
 {
  "value": {
   "example": "// GetAuthSaml: Get a redirect straight to the SAML IdP.\n// \n// The UI uses this to avoid having to ask the API anything about the IdP. It already knows the SAML IdP ID from the path, so it can just link to this path and rely on the API to redirect to the actual IdP.\n// \n// \n// Parameters\n// \n// \t- `providerId`: A UUID usually v4 or v7\n// \t- `callbackUrl`\n// \n// GetAuthSaml: Get a redirect straight to the SAML IdP.\n// The UI uses this to avoid having to ask the API anything about the IdP. It already knows the SAML IdP ID from the path, so it can just link to this path and rely on the API to redirect to the actual IdP.\n//\n// Parameters\n//\n//   - `providerId`: A UUID usually v4 or v7\n//   - `callbackUrl`\nfunc ExampleHiddenService_GetAuthSaml() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Hidden.GetAuthSaml(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#HiddenService.GetAuthSaml"
  },
  "op": "add",
  "path": "/paths/~1auth~1saml~1provider~1{provider_id}~1login/get/x-go"
 },
 {
  "value": {
   "example": "// PostAuthSaml: Authenticate a user via SAML\n// \n// \n// Parameters\n// \n// \t- `providerId`: A UUID usually v4 or v7\n// \t- `body`\n// \n// PostAuthSaml: Authenticate a user via SAML\n// Parameters\n//\n//   - `providerId`: A UUID usually v4 or v7\n//   - `body`\nfunc ExampleHiddenService_PostAuthSaml() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Hidden.PostAuthSaml(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), []byte(\"some-binary\")); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#HiddenService.PostAuthSaml"
  },
  "op": "add",
  "path": "/paths/~1auth~1saml~1provider~1{provider_id}~1login/post/x-go"
 },
 {
  "value": {
   "example": "// CommunitySso: Authorize an inbound auth request from our Community page.\n// \n// \n// Parameters\n// \n// \t- `sig`\n// \t- `sso`\n// \n// CommunitySso: Authorize an inbound auth request from our Community page.\n// Parameters\n//\n//   - `sig`\n//   - `sso`\nfunc ExampleMetaService_CommunitySso() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Meta.CommunitySso(\"some-string\", \"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.CommunitySso"
  },
  "op": "add",
  "path": "/paths/~1community~1sso/get/x-go"
 },
 {
  "value": {
   "example": "// CreateDebugUploads: Uploads files to public blob storage for debugging purposes.\n// \n// Do NOT send files here that you don't want to be public.\n// \n// \n// Parameters\n// \n// \t- `body`\n// \n// CreateDebugUploads: Uploads files to public blob storage for debugging purposes.\n// Do NOT send files here that you don't want to be public.\n//\n// Parameters\n//\n//   - `body`\nfunc ExampleMetaService_CreateDebugUploads() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuf := new(bytes.Buffer)\n\n\tresult, err := client.Meta.CreateDebugUploads(buf)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.CreateDebugUploads"
  },
  "op": "add",
  "path": "/paths/~1debug~1uploads/post/x-go"
 },
 {
  "value": {
   "example": "// CreateEvent: Creates an internal telemetry event.\n// \n// We collect anonymous telemetry data for improving our product.\n// \n// \n// Parameters\n// \n// \t- `body`: Telemetry data we are collecting\n// \n// CreateEvent: Creates an internal telemetry event.\n// We collect anonymous telemetry data for improving our product.\n//\n// Parameters\n//\n//   - `body`: Telemetry data we are collecting\nfunc ExampleMetaService_CreateEvent() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuf := new(bytes.Buffer)\n\n\tif err := client.Meta.CreateEvent(buf); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.CreateEvent"
  },
  "op": "add",
  "path": "/paths/~1events/post/x-go"
 },
 {
  "value": {
   "example": "// CreateCenterOfMass: Get CAD file center of mass.\n// \n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n// \n// This endpoint returns the cartesian coordinate in world space measure units.\n// \n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n// \n// Get the center of mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n// \n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `outputUnit`: The valid types of length units.\n// \t- `srcFormat`: The valid types of source file formats.\n// \t- `body`\n// \n// CreateCenterOfMass: Get CAD file center of mass.\n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n//\n// This endpoint returns the cartesian coordinate in world space measure units.\n//\n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n//\n// Get the center of mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n//\n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `outputUnit`: The valid types of length units.\n//   - `srcFormat`: The valid types of source file formats.\n//   - `body`\nfunc ExampleFileService_CreateCenterOfMass() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.File.CreateCenterOfMass(\"\", \"\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#FileService.CreateCenterOfMass"
  },
  "op": "add",
  "path": "/paths/~1file~1center-of-mass/post/x-go"
 },
 {
  "value": {
   "example": "// CreateConversion: Convert CAD file with defaults.\n// \n// If you wish to specify the conversion options, use the `/file/conversion` endpoint instead.\n// \n// Convert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.\n// \n// If the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.\n// \n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `outputFormat`: The valid types of output file formats.\n// \t- `srcFormat`: The valid types of source file formats.\n// \t- `body`\n// \n// CreateConversion: Convert CAD file with defaults.\n// If you wish to specify the conversion options, use the `/file/conversion` endpoint instead.\n//\n// Convert a CAD file from one format to another. If the file being converted is larger than 25MB, it will be performed asynchronously.\n//\n// If the conversion is performed synchronously, the contents of the converted file (`output`) will be returned as a base64 encoded string.\n//\n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `outputFormat`: The valid types of output file formats.\n//   - `srcFormat`: The valid types of source file formats.\n//   - `body`\nfunc ExampleFileService_CreateConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.File.CreateConversion(\"\", \"\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#FileService.CreateConversion"
  },
  "op": "add",
  "path": "/paths/~1file~1conversion~1{src_format}~1{output_format}/post/x-go"
 },
 {
  "value": {
   "example": "// CreateDensity: Get CAD file density.\n// \n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n// \n// This endpoint assumes if you are giving a material mass in a specific mass units, we return a density in mass unit per cubic measure unit.\n// \n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n// \n// Get the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n// \n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `materialMass`\n// \t- `materialMassUnit`: The valid types of mass units.\n// \t- `outputUnit`: The valid types for density units.\n// \t- `srcFormat`: The valid types of source file formats.\n// \t- `body`\n// \n// CreateDensity: Get CAD file density.\n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n//\n// This endpoint assumes if you are giving a material mass in a specific mass units, we return a density in mass unit per cubic measure unit.\n//\n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n//\n// Get the density of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n//\n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `materialMass`\n//   - `materialMassUnit`: The valid types of mass units.\n//   - `outputUnit`: The valid types for density units.\n//   - `srcFormat`: The valid types of source file formats.\n//   - `body`\nfunc ExampleFileService_CreateDensity() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.File.CreateDensity(123.45, \"\", \"\", \"\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#FileService.CreateDensity"
  },
  "op": "add",
  "path": "/paths/~1file~1density/post/x-go"
 },
 {
  "value": {
   "example": "// CreateFileExecution: Execute a Zoo program in a specific language.\n// \n// \n// Parameters\n// \n// \t- `lang`: The language code is written in.\n// \t\t\n// \t\t\u003cdetails\u003e\u003csummary\u003eJSON schema\u003c/summary\u003e\n// \t\t\n// \t\t```json { \"description\": \"The language code is written in.\", \"oneOf\": [ { \"description\": \"The `go` programming language.\", \"type\": \"string\", \"enum\": [ \"go\" ] }, { \"description\": \"The `python` programming language.\", \"type\": \"string\", \"enum\": [ \"python\" ] }, { \"description\": \"The `node` programming language.\", \"type\": \"string\", \"enum\": [ \"node\" ] } ] } ``` \u003c/details\u003e\n// \t- `output`\n// \t- `body`\n// \n// CreateFileExecution: Execute a Zoo program in a specific language.\n// Parameters\n//\n//   - `lang`: The language code is written in.\n//\n//     \u003cdetails\u003e\u003csummary\u003eJSON schema\u003c/summary\u003e\n//\n//     ```json { \"description\": \"The language code is written in.\", \"oneOf\": [ { \"description\": \"The `go` programming language.\", \"type\": \"string\", \"enum\": [ \"go\" ] }, { \"description\": \"The `python` programming language.\", \"type\": \"string\", \"enum\": [ \"python\" ] }, { \"description\": \"The `node` programming language.\", \"type\": \"string\", \"enum\": [ \"node\" ] } ] } ``` \u003c/details\u003e\n//\n//   - `output`\n//\n//   - `body`\nfunc ExampleExecutorService_CreateFileExecution() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Executor.CreateFileExecution(\"\", \"some-string\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ExecutorService.CreateFileExecution"
  },
  "op": "add",
  "path": "/paths/~1file~1execute~1{lang}/post/x-go"
 },
 {
  "value": {
   "example": "// CreateMass: Get CAD file mass.\n// \n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n// \n// This endpoint assumes if you are giving a material density in a specific mass unit per cubic measure unit, we return a mass in mass units. The same mass units as passed in the material density.\n// \n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n// \n// Get the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n// \n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `materialDensity`\n// \t- `materialDensityUnit`: The valid types for density units.\n// \t- `outputUnit`: The valid types of mass units.\n// \t- `srcFormat`: The valid types of source file formats.\n// \t- `body`\n// \n// CreateMass: Get CAD file mass.\n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n//\n// This endpoint assumes if you are giving a material density in a specific mass unit per cubic measure unit, we return a mass in mass units. The same mass units as passed in the material density.\n//\n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n//\n// Get the mass of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n//\n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `materialDensity`\n//   - `materialDensityUnit`: The valid types for density units.\n//   - `outputUnit`: The valid types of mass units.\n//   - `srcFormat`: The valid types of source file formats.\n//   - `body`\nfunc ExampleFileService_CreateMass() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.File.CreateMass(123.45, \"\", \"\", \"\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#FileService.CreateMass"
  },
  "op": "add",
  "path": "/paths/~1file~1mass/post/x-go"
 },
 {
  "value": {
   "example": "// CreateSurfaceArea: Get CAD file surface area.\n// \n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n// \n// This endpoint returns the square measure units.\n// \n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n// \n// Get the surface area of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n// \n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `outputUnit`: The valid types of area units.\n// \t- `srcFormat`: The valid types of source file formats.\n// \t- `body`\n// \n// CreateSurfaceArea: Get CAD file surface area.\n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n//\n// This endpoint returns the square measure units.\n//\n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n//\n// Get the surface area of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n//\n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `outputUnit`: The valid types of area units.\n//   - `srcFormat`: The valid types of source file formats.\n//   - `body`\nfunc ExampleFileService_CreateSurfaceArea() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.File.CreateSurfaceArea(\"\", \"\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#FileService.CreateSurfaceArea"
  },
  "op": "add",
  "path": "/paths/~1file~1surface-area/post/x-go"
 },
 {
  "value": {
   "example": "// CreateVolume: Get CAD file volume.\n// \n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n// \n// This endpoint returns the cubic measure units.\n// \n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n// \n// Get the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n// \n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `outputUnit`: The valid types of volume units.\n// \t- `srcFormat`: The valid types of source file formats.\n// \t- `body`\n// \n// CreateVolume: Get CAD file volume.\n// We assume any file given to us has one consistent unit throughout. We also assume the file is at the proper scale.\n//\n// This endpoint returns the cubic measure units.\n//\n// In the future, we will use the units inside the file if they are given and do any conversions if necessary for the calculation. But currently, that is not supported.\n//\n// Get the volume of an object in a CAD file. If the file is larger than 25MB, it will be performed asynchronously.\n//\n// If the operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `outputUnit`: The valid types of volume units.\n//   - `srcFormat`: The valid types of source file formats.\n//   - `body`\nfunc ExampleFileService_CreateVolume() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.File.CreateVolume(\"\", \"\", []byte(\"some-binary\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#FileService.CreateVolume"
  },
  "op": "add",
  "path": "/paths/~1file~1volume/post/x-go"
 },
 {
  "value": {
   "example": "// InternalGetAPITokenForDiscordUser: Get an API token for a user by their discord id.\n// \n// This endpoint allows us to run API calls from our discord bot on behalf of a user. The user must have a discord account linked to their Zoo Account via oauth2 for this to work.\n// \n// You must be a Zoo employee to use this endpoint.\n// \n// \n// Parameters\n// \n// \t- `discordId`\n// \n// InternalGetAPITokenForDiscordUser: Get an API token for a user by their discord id.\n// This endpoint allows us to run API calls from our discord bot on behalf of a user. The user must have a discord account linked to their Zoo Account via oauth2 for this to work.\n//\n// You must be a Zoo employee to use this endpoint.\n//\n// Parameters\n//\n//   - `discordId`\nfunc ExampleMetaService_InternalGetAPITokenForDiscordUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Meta.InternalGetAPITokenForDiscordUser(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.InternalGetAPITokenForDiscordUser"
  },
  "op": "add",
  "path": "/paths/~1internal~1discord~1api-token~1{discord_id}/get/x-go"
 },
 {
  "value": {
   "example": "// Logout: This endpoint removes the session cookie for a user.\n// \n// This is used in logout scenarios.\n// \n// Logout: This endpoint removes the session cookie for a user.\n// This is used in logout scenarios.\nfunc ExampleHiddenService_Logout() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Hidden.Logout(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#HiddenService.Logout"
  },
  "op": "add",
  "path": "/paths/~1logout/post/x-go"
 },
 {
  "value": {
   "example": "// ListPrompts: List all ML prompts.\n// \n// For text-to-cad prompts, this will always return the STEP file contents as well as the format the user originally requested.\n// \n// This endpoint requires authentication by a Zoo employee.\n// \n// The ML prompts are returned in order of creation, with the most recently created ML prompts first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// ListPrompts: List all ML prompts.\n// For text-to-cad prompts, this will always return the STEP file contents as well as the format the user originally requested.\n//\n// This endpoint requires authentication by a Zoo employee.\n//\n// The ML prompts are returned in order of creation, with the most recently created ML prompts first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleMlService_ListPrompts() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.ListPrompts(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.ListPrompts"
  },
  "op": "add",
  "path": "/paths/~1ml-prompts/get/x-go"
 },
 {
  "value": {
   "example": "// GetPrompt: Get a ML prompt.\n// \n// This endpoint requires authentication by a Zoo employee.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetPrompt: Get a ML prompt.\n// This endpoint requires authentication by a Zoo employee.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleMlService_GetPrompt() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.GetPrompt(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.GetPrompt"
  },
  "op": "add",
  "path": "/paths/~1ml-prompts~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// CreateKclCodeCompletions: Generate code completions for KCL.\n// \n// \n// Parameters\n// \n// \t- `body`: A request to generate KCL code completions.\n// \n// CreateKclCodeCompletions: Generate code completions for KCL.\n// Parameters\n//\n//   - `body`: A request to generate KCL code completions.\nfunc ExampleMlService_CreateKclCodeCompletions() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.CreateKclCodeCompletions(kittycad.KclCodeCompletionRequest{Extra: kittycad.KclCodeCompletionParams{Language: \"some-string\", NextIndent: 123, PromptTokens: 123, SuffixTokens: 123, TrimByIndentation: true}, MaxTokens: 123, N: 123, Nwo: \"some-string\", Prompt: \"some-string\", Stop: []string{\"some-string\"}, Stream: true, Suffix: \"some-string\", Temperature: 123.45, TopP: 123.45})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.CreateKclCodeCompletions"
  },
  "op": "add",
  "path": "/paths/~1ml~1kcl~1completions/post/x-go"
 },
 {
  "value": {
   "example": "// CreateTextToCadIteration: Iterate on a CAD model with a prompt.\n// \n// Even if you give specific ranges to edit, the model might change more than just those in order to make the changes you requested without breaking the code.\n// \n// You always get the whole code back, even if you only changed a small part of it.\n// \n// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// This endpoint will soon be deprecated in favor of the `/ml/text-to-cad/multi-file/iteration` endpoint. In that the endpoint path will remain but it will have the same behavior as `ml/text-to-cad/multi-file/iteration`.\n// \n// \n// Parameters\n// \n// \t- `body`: Body for generating models from text.\n// \n// CreateTextToCadIteration: Iterate on a CAD model with a prompt.\n// Even if you give specific ranges to edit, the model might change more than just those in order to make the changes you requested without breaking the code.\n//\n// You always get the whole code back, even if you only changed a small part of it.\n//\n// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// This endpoint will soon be deprecated in favor of the `/ml/text-to-cad/multi-file/iteration` endpoint. In that the endpoint path will remain but it will have the same behavior as `ml/text-to-cad/multi-file/iteration`.\n//\n// Parameters\n//\n//   - `body`: Body for generating models from text.\nfunc ExampleMlService_CreateTextToCadIteration() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.CreateTextToCadIteration(kittycad.TextToCadIterationBody{OriginalSourceCode: \"some-string\", Prompt: \"some-string\", SourceRanges: []kittycad.SourceRangePrompt{kittycad.SourceRangePrompt{File: \"some-string\", Prompt: \"some-string\", Range: kittycad.SourceRange{End: kittycad.SourcePosition{Column: 123, Line: 123}, Start: kittycad.SourcePosition{Column: 123, Line: 123}}}}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.CreateTextToCadIteration"
  },
  "op": "add",
  "path": "/paths/~1ml~1text-to-cad~1iteration/post/x-go"
 },
 {
  "value": {
   "example": "// CreateTextToCadMultiFileIteration: Iterate on a CAD model with a prompt.\n// \n// This endpoint can iterate on multi-file models.\n// \n// Even if you give specific ranges to edit, the model might change more than just those in order to make the changes you requested without breaking the code.\n// \n// You always get the whole code back, even if you only changed a small part of it. This endpoint will always return all the code back, including files that were not changed. If your original source code imported a stl/gltf/step/etc file, the output will not include that file since the model will never change non-kcl files. The endpoint will only return the kcl files that were changed.\n// \n// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n// \n// \n// Parameters\n// \n// \t- `body`: Body for generating models from text.\n// \n// CreateTextToCadMultiFileIteration: Iterate on a CAD model with a prompt.\n// This endpoint can iterate on multi-file models.\n//\n// Even if you give specific ranges to edit, the model might change more than just those in order to make the changes you requested without breaking the code.\n//\n// You always get the whole code back, even if you only changed a small part of it. This endpoint will always return all the code back, including files that were not changed. If your original source code imported a stl/gltf/step/etc file, the output will not include that file since the model will never change non-kcl files. The endpoint will only return the kcl files that were changed.\n//\n// This operation is performed asynchronously, the `id` of the operation will be returned. You can use the `id` returned from the request to get status information about the async operation from the `/async/operations/{id}` endpoint.\n//\n// Parameters\n//\n//   - `body`: Body for generating models from text.\nfunc ExampleMlService_CreateTextToCadMultiFileIteration() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbuf := new(bytes.Buffer)\n\n\tresult, err := client.Ml.CreateTextToCadMultiFileIteration(buf)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.CreateTextToCadMultiFileIteration"
  },
  "op": "add",
  "path": "/paths/~1ml~1text-to-cad~1multi-file~1iteration/post/x-go"
 },
 {
  "value": {
   "example": "// DeviceAuthRequest: Start an OAuth 2.0 Device Authorization Grant.\n// \n// This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.\n// \n// \n// Parameters\n// \n// \t- `body`: The request parameters for the OAuth 2.0 Device Authorization Grant flow.\n// \n// DeviceAuthRequest: Start an OAuth 2.0 Device Authorization Grant.\n// This endpoint is designed to be accessed from an *unauthenticated* API client. It generates and records a `device_code` and `user_code` which must be verified and confirmed prior to a token being granted.\n//\n// Parameters\n//\n//   - `body`: The request parameters for the OAuth 2.0 Device Authorization Grant flow.\nfunc ExampleOauth2Service_DeviceAuthRequest() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.DeviceAuthRequest(kittycad.DeviceAuthRequestForm{ClientID: kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.DeviceAuthRequest"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1device~1auth/post/x-go"
 },
 {
  "value": {
   "example": "// DeviceAuthConfirm: Confirm an OAuth 2.0 Device Authorization Grant.\n// \n// This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.\n// \n// \n// Parameters\n// \n// \t- `body`: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.\n// \n// DeviceAuthConfirm: Confirm an OAuth 2.0 Device Authorization Grant.\n// This endpoint is designed to be accessed by the user agent (browser), not the client requesting the token. So we do not actually return the token here; it will be returned in response to the poll on `/oauth2/device/token`.\n//\n// Parameters\n//\n//   - `body`: The request parameters to verify the `user_code` for the OAuth 2.0 Device Authorization Grant.\nfunc ExampleOauth2Service_DeviceAuthConfirm() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.DeviceAuthConfirm(kittycad.DeviceAuthVerifyParams{UserCode: \"some-string\"}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.DeviceAuthConfirm"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1device~1confirm/post/x-go"
 },
 {
  "value": {
   "example": "// DeviceAccessToken: Request a device access token.\n// \n// This endpoint should be polled by the client until the user code is verified and the grant is confirmed.\n// \n// \n// Parameters\n// \n// \t- `body`: The form for a device access token request.\n// \n// DeviceAccessToken: Request a device access token.\n// This endpoint should be polled by the client until the user code is verified and the grant is confirmed.\n//\n// Parameters\n//\n//   - `body`: The form for a device access token request.\nfunc ExampleOauth2Service_DeviceAccessToken() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.DeviceAccessToken(kittycad.DeviceAccessTokenRequestForm{ClientID: kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), DeviceCode: kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), GrantType: \"\"}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.DeviceAccessToken"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1device~1token/post/x-go"
 },
 {
  "value": {
   "example": "// DeviceAuthVerify: Verify an OAuth 2.0 Device Authorization Grant.\n// \n// This endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.\n// \n// \n// Parameters\n// \n// \t- `userCode`\n// \n// DeviceAuthVerify: Verify an OAuth 2.0 Device Authorization Grant.\n// This endpoint should be accessed in a full user agent (e.g., a browser). If the user is not logged in, we redirect them to the login page and use the `callback_url` parameter to get them to the UI verification form upon logging in. If they are logged in, we redirect them to the UI verification form on the website.\n//\n// Parameters\n//\n//   - `userCode`\nfunc ExampleOauth2Service_DeviceAuthVerify() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.DeviceAuthVerify(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.DeviceAuthVerify"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1device~1verify/get/x-go"
 },
 {
  "value": {
   "example": "// ProviderCallback: Listen for callbacks for the OAuth 2.0 provider.\n// \n// \n// Parameters\n// \n// \t- `provider`: An account provider.\n// \t- `code`\n// \t- `idToken`\n// \t- `state`\n// \t- `user`\n// \n// ProviderCallback: Listen for callbacks for the OAuth 2.0 provider.\n// Parameters\n//\n//   - `provider`: An account provider.\n//   - `code`\n//   - `idToken`\n//   - `state`\n//   - `user`\nfunc ExampleOauth2Service_ProviderCallback() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.ProviderCallback(\"\", \"some-string\", \"some-string\", \"some-string\", \"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.ProviderCallback"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1provider~1{provider}~1callback/get/x-go"
 },
 {
  "value": {
   "example": "// ProviderCallbackCreate: Listen for callbacks for the OAuth 2.0 provider.\n// \n// This specific endpoint listens for posts of form data.\n// \n// \n// Parameters\n// \n// \t- `provider`: An account provider.\n// \t- `body`: The authentication callback from the OAuth 2.0 client. This is typically posted to the redirect URL as query params after authenticating.\n// \n// ProviderCallbackCreate: Listen for callbacks for the OAuth 2.0 provider.\n// This specific endpoint listens for posts of form data.\n//\n// Parameters\n//\n//   - `provider`: An account provider.\n//   - `body`: The authentication callback from the OAuth 2.0 client. This is typically posted to the redirect URL as query params after authenticating.\nfunc ExampleOauth2Service_ProviderCallbackCreate() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.ProviderCallbackCreate(\"\", kittycad.AuthCallback{Code: \"some-string\", IdToken: \"some-string\", State: \"some-string\", User: \"some-string\"}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.ProviderCallbackCreate"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1provider~1{provider}~1callback/post/x-go"
 },
 {
  "value": {
   "example": "// ProviderConsent: Get the consent URL and other information for the OAuth 2.0 provider.\n// \n// \n// Parameters\n// \n// \t- `provider`: An account provider.\n// \t- `callbackUrl`\n// \n// ProviderConsent: Get the consent URL and other information for the OAuth 2.0 provider.\n// Parameters\n//\n//   - `provider`: An account provider.\n//   - `callbackUrl`\nfunc ExampleOauth2Service_ProviderConsent() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Oauth2.ProviderConsent(\"\", \"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.ProviderConsent"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1provider~1{provider}~1consent/get/x-go"
 },
 {
  "value": {
   "example": "// TokenRevoke: Revoke an OAuth2 token.\n// \n// This endpoint is designed to be accessed from an *unauthenticated* API client.\n// \n// \n// Parameters\n// \n// \t- `body`: The request parameters for the OAuth 2.0 token revocation flow.\n// \n// TokenRevoke: Revoke an OAuth2 token.\n// This endpoint is designed to be accessed from an *unauthenticated* API client.\n//\n// Parameters\n//\n//   - `body`: The request parameters for the OAuth 2.0 token revocation flow.\nfunc ExampleOauth2Service_TokenRevoke() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Oauth2.TokenRevoke(kittycad.TokenRevokeRequestForm{ClientID: kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), ClientSecret: \"some-string\", Token: \"some-string\"}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#Oauth2Service.TokenRevoke"
  },
  "op": "add",
  "path": "/paths/~1oauth2~1token~1revoke/post/x-go"
 },
 {
  "value": {
   "example": "// Delete: Delete an org.\n// \n// In order to delete an org, you must first delete all of its members, except yourself.\n// \n// You must also have no outstanding invoices or unpaid balances.\n// \n// This endpoint requires authentication by an org admin. It deletes the authenticated user's org.\n// \n// Delete: Delete an org.\n// In order to delete an org, you must first delete all of its members, except yourself.\n//\n// You must also have no outstanding invoices or unpaid balances.\n//\n// This endpoint requires authentication by an org admin. It deletes the authenticated user's org.\nfunc ExampleOrgService_Delete() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Org.Delete(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.Delete"
  },
  "op": "add",
  "path": "/paths/~1org/delete/x-go"
 },
 {
  "value": {
   "example": "// Get: Get an org.\n// \n// This endpoint requires authentication by an org admin. It gets the authenticated user's org.\n// \n// Get: Get an org.\n// This endpoint requires authentication by an org admin. It gets the authenticated user's org.\nfunc ExampleOrgService_Get() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.Get()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.Get"
  },
  "op": "add",
  "path": "/paths/~1org/get/x-go"
 },
 {
  "value": {
   "example": "// Create: Create an org.\n// \n// This endpoint requires authentication by a Zoo user that is not already in an org. It creates a new org for the authenticated user and makes them an admin.\n// \n// \n// Parameters\n// \n// \t- `body`: The user-modifiable parts of an organization.\n// \n// Create: Create an org.\n// This endpoint requires authentication by a Zoo user that is not already in an org. It creates a new org for the authenticated user and makes them an admin.\n//\n// Parameters\n//\n//   - `body`: The user-modifiable parts of an organization.\nfunc ExampleOrgService_Create() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.Create(kittycad.OrgDetails{AllowUsersInDomainToAutoJoin: true, BillingEmail: \"example@example.com\", Domain: \"some-string\", Image: kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}, Name: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.Create"
  },
  "op": "add",
  "path": "/paths/~1org/post/x-go"
 },
 {
  "value": {
   "example": "// Update: Update an org.\n// \n// This endpoint requires authentication by an org admin. It updates the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: The user-modifiable parts of an organization.\n// \n// Update: Update an org.\n// This endpoint requires authentication by an org admin. It updates the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: The user-modifiable parts of an organization.\nfunc ExampleOrgService_Update() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.Update(kittycad.OrgDetails{AllowUsersInDomainToAutoJoin: true, BillingEmail: \"example@example.com\", Domain: \"some-string\", Image: kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}, Name: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.Update"
  },
  "op": "add",
  "path": "/paths/~1org/put/x-go"
 },
 {
  "value": {
   "example": "// OrgList: List API calls for your org.\n// \n// This includes all API calls that were made by users in the org.\n// \n// This endpoint requires authentication by an org admin. It returns the API calls for the authenticated user's org.\n// \n// The API calls are returned in order of creation, with the most recently created API calls first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// OrgList: List API calls for your org.\n// This includes all API calls that were made by users in the org.\n//\n// This endpoint requires authentication by an org admin. It returns the API calls for the authenticated user's org.\n//\n// The API calls are returned in order of creation, with the most recently created API calls first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleAPICallService_OrgList() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.OrgList(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.OrgList"
  },
  "op": "add",
  "path": "/paths/~1org~1api-calls/get/x-go"
 },
 {
  "value": {
   "example": "// GetForOrg: Get an API call for an org.\n// \n// This endpoint requires authentication by an org admin. It returns details of the requested API call for the user's org.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetForOrg: Get an API call for an org.\n// This endpoint requires authentication by an org admin. It returns details of the requested API call for the user's org.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleAPICallService_GetForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.GetForOrg(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.GetForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1api-calls~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// ListMembers: List members of your org.\n// \n// This endpoint requires authentication by an org admin. It lists the members of the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \t- `role`: The roles for users in an organization.\n// \n// ListMembers: List members of your org.\n// This endpoint requires authentication by an org admin. It lists the members of the authenticated user's org.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\n//\n//   - `role`: The roles for users in an organization.\nfunc ExampleOrgService_ListMembers() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.ListMembers(123, \"some-string\", \"\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.ListMembers"
  },
  "op": "add",
  "path": "/paths/~1org~1members/get/x-go"
 },
 {
  "value": {
   "example": "// CreateMember: Add a member to your org.\n// \n// If the user exists, this will add them to your org. If they do not exist, this will create a new user and add them to your org.\n// \n// In both cases the user gets an email that they have been added to the org.\n// \n// If the user is already in your org, this will return a 400 and a message.\n// \n// If the user is already in a different org, this will return a 400 and a message.\n// \n// This endpoint requires authentication by an org admin. It adds the specified member to the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: Data for adding a member to an org.\n// \n// CreateMember: Add a member to your org.\n// If the user exists, this will add them to your org. If they do not exist, this will create a new user and add them to your org.\n//\n// In both cases the user gets an email that they have been added to the org.\n//\n// If the user is already in your org, this will return a 400 and a message.\n//\n// If the user is already in a different org, this will return a 400 and a message.\n//\n// This endpoint requires authentication by an org admin. It adds the specified member to the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: Data for adding a member to an org.\nfunc ExampleOrgService_CreateMember() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.CreateMember(kittycad.AddOrgMember{Email: \"example@example.com\", Role: \"\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.CreateMember"
  },
  "op": "add",
  "path": "/paths/~1org~1members/post/x-go"
 },
 {
  "value": {
   "example": "// DeleteMember: Remove a member from your org.\n// \n// This endpoint requires authentication by an org admin. It removes the specified member from the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `userId`: A UUID usually v4 or v7\n// \n// DeleteMember: Remove a member from your org.\n// This endpoint requires authentication by an org admin. It removes the specified member from the authenticated user's org.\n//\n// Parameters\n//\n//   - `userId`: A UUID usually v4 or v7\nfunc ExampleOrgService_DeleteMember() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Org.DeleteMember(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.DeleteMember"
  },
  "op": "add",
  "path": "/paths/~1org~1members~1{user_id}/delete/x-go"
 },
 {
  "value": {
   "example": "// GetMember: Get a member of your org.\n// \n// This endpoint requires authentication by an org admin. It gets the specified member of the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `userId`: A UUID usually v4 or v7\n// \n// GetMember: Get a member of your org.\n// This endpoint requires authentication by an org admin. It gets the specified member of the authenticated user's org.\n//\n// Parameters\n//\n//   - `userId`: A UUID usually v4 or v7\nfunc ExampleOrgService_GetMember() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.GetMember(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.GetMember"
  },
  "op": "add",
  "path": "/paths/~1org~1members~1{user_id}/get/x-go"
 },
 {
  "value": {
   "example": "// UpdateMember: Update a member of your org.\n// \n// This endpoint requires authentication by an org admin. It updates the specified member of the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `userId`: A UUID usually v4 or v7\n// \t- `body`: Data for updating a member of an org.\n// \n// UpdateMember: Update a member of your org.\n// This endpoint requires authentication by an org admin. It updates the specified member of the authenticated user's org.\n//\n// Parameters\n//\n//   - `userId`: A UUID usually v4 or v7\n//   - `body`: Data for updating a member of an org.\nfunc ExampleOrgService_UpdateMember() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.UpdateMember(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), kittycad.UpdateMemberToOrgBody{Role: \"\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.UpdateMember"
  },
  "op": "add",
  "path": "/paths/~1org~1members~1{user_id}/put/x-go"
 },
 {
  "value": {
   "example": "// DeleteInformationForOrg: Delete payment info for your org.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by an org admin. It deletes the payment information for the authenticated user's org.\n// \n// DeleteInformationForOrg: Delete payment info for your org.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by an org admin. It deletes the payment information for the authenticated user's org.\nfunc ExamplePaymentService_DeleteInformationForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Payment.DeleteInformationForOrg(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.DeleteInformationForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment/delete/x-go"
 },
 {
  "value": {
   "example": "// GetInformationForOrg: Get payment info about your org.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by an org admin. It gets the payment information for the authenticated user's org.\n// \n// GetInformationForOrg: Get payment info about your org.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by an org admin. It gets the payment information for the authenticated user's org.\nfunc ExamplePaymentService_GetInformationForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetInformationForOrg()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetInformationForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment/get/x-go"
 },
 {
  "value": {
   "example": "// CreateInformationForOrg: Create payment info for your org.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by the org admin. It creates the payment information for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: The billing information for payments.\n// \n// CreateInformationForOrg: Create payment info for your org.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by the org admin. It creates the payment information for the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: The billing information for payments.\nfunc ExamplePaymentService_CreateInformationForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.CreateInformationForOrg(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: \"some-string\", Country: \"some-string\", State: \"some-string\", Street1: \"some-string\", Street2: \"some-string\", Zip: \"some-string\"}, Name: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.CreateInformationForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment/post/x-go"
 },
 {
  "value": {
   "example": "// UpdateInformationForOrg: Update payment info for your org.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by an org admin. It updates the payment information for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: The billing information for payments.\n// \n// UpdateInformationForOrg: Update payment info for your org.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by an org admin. It updates the payment information for the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: The billing information for payments.\nfunc ExamplePaymentService_UpdateInformationForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.UpdateInformationForOrg(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: \"some-string\", Country: \"some-string\", State: \"some-string\", Street1: \"some-string\", Street2: \"some-string\", Zip: \"some-string\"}, Name: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.UpdateInformationForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment/put/x-go"
 },
 {
  "value": {
   "example": "// GetBalanceForOrg: Get balance for your org.\n// \n// This endpoint requires authentication by an org admin. It gets the balance information for the authenticated user's org.\n// \n// GetBalanceForOrg: Get balance for your org.\n// This endpoint requires authentication by an org admin. It gets the balance information for the authenticated user's org.\nfunc ExamplePaymentService_GetBalanceForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetBalanceForOrg()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetBalanceForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1balance/get/x-go"
 },
 {
  "value": {
   "example": "// CreateIntentForOrg: Create a payment intent for your org.\n// \n// This endpoint requires authentication by the org admin. It creates a new payment intent for the authenticated user's org's org.\n// \n// CreateIntentForOrg: Create a payment intent for your org.\n// This endpoint requires authentication by the org admin. It creates a new payment intent for the authenticated user's org's org.\nfunc ExamplePaymentService_CreateIntentForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.CreateIntentForOrg()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.CreateIntentForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1intent/post/x-go"
 },
 {
  "value": {
   "example": "// ListInvoicesForOrg: List invoices for your org.\n// \n// This endpoint requires authentication by an org admin. It lists invoices for the authenticated user's org.\n// \n// ListInvoicesForOrg: List invoices for your org.\n// This endpoint requires authentication by an org admin. It lists invoices for the authenticated user's org.\nfunc ExamplePaymentService_ListInvoicesForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.ListInvoicesForOrg()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.ListInvoicesForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1invoices/get/x-go"
 },
 {
  "value": {
   "example": "// ListMethodsForOrg: List payment methods for your org.\n// \n// This endpoint requires authentication by an org admin. It lists payment methods for the authenticated user's org.\n// \n// ListMethodsForOrg: List payment methods for your org.\n// This endpoint requires authentication by an org admin. It lists payment methods for the authenticated user's org.\nfunc ExamplePaymentService_ListMethodsForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.ListMethodsForOrg()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.ListMethodsForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1methods/get/x-go"
 },
 {
  "value": {
   "example": "// DeleteMethodForOrg: Delete a payment method for your org.\n// \n// This endpoint requires authentication by an org admin. It deletes the specified payment method for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// DeleteMethodForOrg: Delete a payment method for your org.\n// This endpoint requires authentication by an org admin. It deletes the specified payment method for the authenticated user's org.\n//\n// Parameters\n//\n//   - `id`\nfunc ExamplePaymentService_DeleteMethodForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Payment.DeleteMethodForOrg(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.DeleteMethodForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1methods~1{id}/delete/x-go"
 },
 {
  "value": {
   "example": "// GetOrgSubscription: Get the subscription for an org.\n// \n// This endpoint requires authentication by an org admin. It gets the subscription for the authenticated user's org.\n// \n// GetOrgSubscription: Get the subscription for an org.\n// This endpoint requires authentication by an org admin. It gets the subscription for the authenticated user's org.\nfunc ExamplePaymentService_GetOrgSubscription() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetOrgSubscription()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetOrgSubscription"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1subscriptions/get/x-go"
 },
 {
  "value": {
   "example": "// CreateOrgSubscription: Create the subscription for an org.\n// \n// This endpoint requires authentication by an org admin. It creates the subscription for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: A struct of Zoo product subscriptions an organization can request.\n// \n// CreateOrgSubscription: Create the subscription for an org.\n// This endpoint requires authentication by an org admin. It creates the subscription for the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: A struct of Zoo product subscriptions an organization can request.\nfunc ExamplePaymentService_CreateOrgSubscription() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.CreateOrgSubscription(kittycad.ZooProductSubscriptionsOrgRequest{ModelingApp: \"\", PayAnnually: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.CreateOrgSubscription"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1subscriptions/post/x-go"
 },
 {
  "value": {
   "example": "// UpdateOrgSubscription: Update the subscription for an org.\n// \n// This endpoint requires authentication by an org admin. It updates the subscription for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: A struct of Zoo product subscriptions an organization can request.\n// \n// UpdateOrgSubscription: Update the subscription for an org.\n// This endpoint requires authentication by an org admin. It updates the subscription for the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: A struct of Zoo product subscriptions an organization can request.\nfunc ExamplePaymentService_UpdateOrgSubscription() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.UpdateOrgSubscription(kittycad.ZooProductSubscriptionsOrgRequest{ModelingApp: \"\", PayAnnually: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.UpdateOrgSubscription"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1subscriptions/put/x-go"
 },
 {
  "value": {
   "example": "// ValidateCustomerTaxInformationForOrg: Validate an orgs's information is correct and valid for automatic tax.\n// \n// This endpoint requires authentication by an org admin. It will return an error if the org's information is not valid for automatic tax. Otherwise, it will return an empty successful response.\n// \n// ValidateCustomerTaxInformationForOrg: Validate an orgs's information is correct and valid for automatic tax.\n// This endpoint requires authentication by an org admin. It will return an error if the org's information is not valid for automatic tax. Otherwise, it will return an empty successful response.\nfunc ExamplePaymentService_ValidateCustomerTaxInformationForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Payment.ValidateCustomerTaxInformationForOrg(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.ValidateCustomerTaxInformationForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1payment~1tax/get/x-go"
 },
 {
  "value": {
   "example": "// GetPrivacySettings: Get the privacy settings for an org.\n// \n// This endpoint requires authentication by an org admin. It gets the privacy settings for the authenticated user's org.\n// \n// GetPrivacySettings: Get the privacy settings for an org.\n// This endpoint requires authentication by an org admin. It gets the privacy settings for the authenticated user's org.\nfunc ExampleOrgService_GetPrivacySettings() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.GetPrivacySettings()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.GetPrivacySettings"
  },
  "op": "add",
  "path": "/paths/~1org~1privacy/get/x-go"
 },
 {
  "value": {
   "example": "// UpdatePrivacySettings: Update the privacy settings for an org.\n// \n// This endpoint requires authentication by an org admin. It updates the privacy settings for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `body`: Privacy settings for an org or user.\n// \n// UpdatePrivacySettings: Update the privacy settings for an org.\n// This endpoint requires authentication by an org admin. It updates the privacy settings for the authenticated user's org.\n//\n// Parameters\n//\n//   - `body`: Privacy settings for an org or user.\nfunc ExampleOrgService_UpdatePrivacySettings() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.UpdatePrivacySettings(kittycad.PrivacySettings{CanTrainOnData: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.UpdatePrivacySettings"
  },
  "op": "add",
  "path": "/paths/~1org~1privacy/put/x-go"
 },
 {
  "value": {
   "example": "// DeleteSamlIdp: Delete an SAML identity provider.\n// \n// This endpoint requires authentication by an org admin.\n// \n// DeleteSamlIdp: Delete an SAML identity provider.\n// This endpoint requires authentication by an org admin.\nfunc ExampleOrgService_DeleteSamlIdp() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Org.DeleteSamlIdp(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.DeleteSamlIdp"
  },
  "op": "add",
  "path": "/paths/~1org~1saml~1idp/delete/x-go"
 },
 {
  "value": {
   "example": "// GetSamlIdp: Get the SAML identity provider.\n// \n// This endpoint requires authentication by an org admin.\n// \n// GetSamlIdp: Get the SAML identity provider.\n// This endpoint requires authentication by an org admin.\nfunc ExampleOrgService_GetSamlIdp() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.GetSamlIdp()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.GetSamlIdp"
  },
  "op": "add",
  "path": "/paths/~1org~1saml~1idp/get/x-go"
 },
 {
  "value": {
   "example": "// CreateSamlIdp: Create a SAML identity provider.\n// \n// This endpoint requires authentication by an org admin.\n// \n// \n// Parameters\n// \n// \t- `body`: Parameters for creating a SAML identity provider.\n// \n// CreateSamlIdp: Create a SAML identity provider.\n// This endpoint requires authentication by an org admin.\n//\n// Parameters\n//\n//   - `body`: Parameters for creating a SAML identity provider.\nfunc ExampleOrgService_CreateSamlIdp() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.CreateSamlIdp(kittycad.SamlIdentityProviderCreate{IdpEntityID: \"some-string\", IdpMetadataSource: \"\", SigningKeypair: kittycad.DerEncodedKeyPair{PrivateKey: kittycad.Base64{Inner: []byte(\"aGVsbG8gd29ybGQK\")}, PublicCert: kittycad.Base64{Inner: []byte(\"aGVsbG8gd29ybGQK\")}}, TechnicalContactEmail: \"example@example.com\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.CreateSamlIdp"
  },
  "op": "add",
  "path": "/paths/~1org~1saml~1idp/post/x-go"
 },
 {
  "value": {
   "example": "// UpdateSamlIdp: Update the SAML identity provider.\n// \n// This endpoint requires authentication by an org admin.\n// \n// \n// Parameters\n// \n// \t- `body`: Parameters for creating a SAML identity provider.\n// \n// UpdateSamlIdp: Update the SAML identity provider.\n// This endpoint requires authentication by an org admin.\n//\n// Parameters\n//\n//   - `body`: Parameters for creating a SAML identity provider.\nfunc ExampleOrgService_UpdateSamlIdp() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.UpdateSamlIdp(kittycad.SamlIdentityProviderCreate{IdpEntityID: \"some-string\", IdpMetadataSource: \"\", SigningKeypair: kittycad.DerEncodedKeyPair{PrivateKey: kittycad.Base64{Inner: []byte(\"aGVsbG8gd29ybGQK\")}, PublicCert: kittycad.Base64{Inner: []byte(\"aGVsbG8gd29ybGQK\")}}, TechnicalContactEmail: \"example@example.com\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.UpdateSamlIdp"
  },
  "op": "add",
  "path": "/paths/~1org~1saml~1idp/put/x-go"
 },
 {
  "value": {
   "example": "// ListForOrg: List service accounts for your org.\n// \n// This endpoint requires authentication by an org admin. It returns the service accounts for the organization.\n// \n// The service accounts are returned in order of creation, with the most recently created service accounts first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// ListForOrg: List service accounts for your org.\n// This endpoint requires authentication by an org admin. It returns the service accounts for the organization.\n//\n// The service accounts are returned in order of creation, with the most recently created service accounts first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleServiceAccountService_ListForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.ServiceAccount.ListForOrg(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ServiceAccountService.ListForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1service-accounts/get/x-go"
 },
 {
  "value": {
   "example": "// CreateForOrg: Create a new service account for your org.\n// \n// This endpoint requires authentication by an org admin. It creates a new service account for the organization.\n// \n// \n// Parameters\n// \n// \t- `label`\n// \n// CreateForOrg: Create a new service account for your org.\n// This endpoint requires authentication by an org admin. It creates a new service account for the organization.\n//\n// Parameters\n//\n//   - `label`\nfunc ExampleServiceAccountService_CreateForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.ServiceAccount.CreateForOrg(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ServiceAccountService.CreateForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1service-accounts/post/x-go"
 },
 {
  "value": {
   "example": "// DeleteForOrg: Delete an service account for your org.\n// \n// This endpoint requires authentication by an org admin. It deletes the requested service account for the organization.\n// \n// This endpoint does not actually delete the service account from the database. It merely marks the token as invalid. We still want to keep the service account in the database for historical purposes.\n// \n// \n// Parameters\n// \n// \t- `token`: An auth token. A uuid with a prefix of svc-\n// \n// DeleteForOrg: Delete an service account for your org.\n// This endpoint requires authentication by an org admin. It deletes the requested service account for the organization.\n//\n// This endpoint does not actually delete the service account from the database. It merely marks the token as invalid. We still want to keep the service account in the database for historical purposes.\n//\n// Parameters\n//\n//   - `token`: An auth token. A uuid with a prefix of svc-\nfunc ExampleServiceAccountService_DeleteForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.ServiceAccount.DeleteForOrg(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ServiceAccountService.DeleteForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1service-accounts~1{token}/delete/x-go"
 },
 {
  "value": {
   "example": "// GetForOrg: Get an service account for your org.\n// \n// This endpoint requires authentication by an org admin. It returns details of the requested service account for the organization.\n// \n// \n// Parameters\n// \n// \t- `token`: An auth token. A uuid with a prefix of svc-\n// \n// GetForOrg: Get an service account for your org.\n// This endpoint requires authentication by an org admin. It returns details of the requested service account for the organization.\n//\n// Parameters\n//\n//   - `token`: An auth token. A uuid with a prefix of svc-\nfunc ExampleServiceAccountService_GetForOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.ServiceAccount.GetForOrg(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ServiceAccountService.GetForOrg"
  },
  "op": "add",
  "path": "/paths/~1org~1service-accounts~1{token}/get/x-go"
 },
 {
  "value": {
   "example": "// GetShortlinks: Get the shortlinks for an org.\n// \n// This endpoint requires authentication by an org admin. It gets the shortlinks for the authenticated user's org.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// GetShortlinks: Get the shortlinks for an org.\n// This endpoint requires authentication by an org admin. It gets the shortlinks for the authenticated user's org.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleOrgService_GetShortlinks() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.GetShortlinks(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.GetShortlinks"
  },
  "op": "add",
  "path": "/paths/~1org~1shortlinks/get/x-go"
 },
 {
  "value": {
   "example": "// List: List orgs.\n// \n// This endpoint requires authentication by a Zoo employee. The orgs are returned in order of creation, with the most recently created orgs first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// List: List orgs.\n// This endpoint requires authentication by a Zoo employee. The orgs are returned in order of creation, with the most recently created orgs first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleOrgService_List() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.List(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.List"
  },
  "op": "add",
  "path": "/paths/~1orgs/get/x-go"
 },
 {
  "value": {
   "example": "// GetAny: Get an org.\n// \n// This endpoint requires authentication by a Zoo employee. It gets the information for the specified org.\n// \n// \n// Parameters\n// \n// \t- `id`: A UUID usually v4 or v7\n// \n// GetAny: Get an org.\n// This endpoint requires authentication by a Zoo employee. It gets the information for the specified org.\n//\n// Parameters\n//\n//   - `id`: A UUID usually v4 or v7\nfunc ExampleOrgService_GetAny() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.GetAny(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.GetAny"
  },
  "op": "add",
  "path": "/paths/~1orgs~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// UpdateEnterprisePricingFor: Set the enterprise price for an organization.\n// \n// You must be a Zoo employee to perform this request.\n// \n// \n// Parameters\n// \n// \t- `id`: A UUID usually v4 or v7\n// \t- `body`: The price for an enterprise subscription.\n// \n// UpdateEnterprisePricingFor: Set the enterprise price for an organization.\n// You must be a Zoo employee to perform this request.\n//\n// Parameters\n//\n//   - `id`: A UUID usually v4 or v7\n//   - `body`: The price for an enterprise subscription.\nfunc ExampleOrgService_UpdateEnterprisePricingFor() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.UpdateEnterprisePricingFor(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.UpdateEnterprisePricingFor"
  },
  "op": "add",
  "path": "/paths/~1orgs~1{id}~1enterprise~1pricing/put/x-go"
 },
 {
  "value": {
   "example": "// GetBalanceForAnyOrg: Get balance for an org.\n// \n// This endpoint requires authentication by a Zoo employee. It gets the balance information for the specified org.\n// \n// \n// Parameters\n// \n// \t- `id`: A UUID usually v4 or v7\n// \n// GetBalanceForAnyOrg: Get balance for an org.\n// This endpoint requires authentication by a Zoo employee. It gets the balance information for the specified org.\n//\n// Parameters\n//\n//   - `id`: A UUID usually v4 or v7\nfunc ExamplePaymentService_GetBalanceForAnyOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetBalanceForAnyOrg(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetBalanceForAnyOrg"
  },
  "op": "add",
  "path": "/paths/~1orgs~1{id}~1payment~1balance/get/x-go"
 },
 {
  "value": {
   "example": "// UpdateBalanceForAnyOrg: Update balance for an org.\n// \n// This endpoint requires authentication by a Zoo employee. It updates the balance information for the specified org.\n// \n// \n// Parameters\n// \n// \t- `id`: A UUID usually v4 or v7\n// \t- `body`: The data for updating a balance.\n// \n// UpdateBalanceForAnyOrg: Update balance for an org.\n// This endpoint requires authentication by a Zoo employee. It updates the balance information for the specified org.\n//\n// Parameters\n//\n//   - `id`: A UUID usually v4 or v7\n//   - `body`: The data for updating a balance.\nfunc ExamplePaymentService_UpdateBalanceForAnyOrg() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.UpdateBalanceForAnyOrg(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), kittycad.UpdatePaymentBalance{MonthlyCreditsRemaining: 123.45, PrePayCashRemaining: 123.45, PrePayCreditsRemaining: 123.45})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.UpdateBalanceForAnyOrg"
  },
  "op": "add",
  "path": "/paths/~1orgs~1{id}~1payment~1balance/put/x-go"
 },
 {
  "value": {
   "example": "// Ping: Return pong.\n// \n// Ping: Return pong.\nfunc ExampleMetaService_Ping() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Meta.Ping()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.Ping"
  },
  "op": "add",
  "path": "/paths/~1ping/get/x-go"
 },
 {
  "value": {
   "example": "// GetPricingSubscriptions: Get the pricing for our subscriptions.\n// \n// This is the ultimate source of truth for the pricing of our subscriptions.\n// \n// GetPricingSubscriptions: Get the pricing for our subscriptions.\n// This is the ultimate source of truth for the pricing of our subscriptions.\nfunc ExampleMetaService_GetPricingSubscriptions() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Meta.GetPricingSubscriptions()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MetaService.GetPricingSubscriptions"
  },
  "op": "add",
  "path": "/paths/~1pricing~1subscriptions/get/x-go"
 },
 {
  "value": {
   "example": "// CreateCoupon: Create a new store coupon.\n// \n// This endpoint requires authentication by a Zoo employee. It creates a new store coupon.\n// \n// \n// Parameters\n// \n// \t- `body`: The parameters for a new store coupon.\n// \n// CreateCoupon: Create a new store coupon.\n// This endpoint requires authentication by a Zoo employee. It creates a new store coupon.\n//\n// Parameters\n//\n//   - `body`: The parameters for a new store coupon.\nfunc ExampleStoreService_CreateCoupon() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Store.CreateCoupon(kittycad.StoreCouponParams{PercentOff: 123})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#StoreService.CreateCoupon"
  },
  "op": "add",
  "path": "/paths/~1store~1coupon/post/x-go"
 },
 {
  "value": {
   "example": "// GetAngleConversion: Convert angle units.\n// \n// Convert an angle unit value to another angle unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of angle formats.\n// \t- `outputUnit`: The valid types of angle formats.\n// \t- `value`\n// \n// GetAngleConversion: Convert angle units.\n// Convert an angle unit value to another angle unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of angle formats.\n//   - `outputUnit`: The valid types of angle formats.\n//   - `value`\nfunc ExampleUnitService_GetAngleConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetAngleConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetAngleConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1angle~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetAreaConversion: Convert area units.\n// \n// Convert an area unit value to another area unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of area units.\n// \t- `outputUnit`: The valid types of area units.\n// \t- `value`\n// \n// GetAreaConversion: Convert area units.\n// Convert an area unit value to another area unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of area units.\n//   - `outputUnit`: The valid types of area units.\n//   - `value`\nfunc ExampleUnitService_GetAreaConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetAreaConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetAreaConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1area~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetCurrentConversion: Convert current units.\n// \n// Convert a current unit value to another current unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of current units.\n// \t- `outputUnit`: The valid types of current units.\n// \t- `value`\n// \n// GetCurrentConversion: Convert current units.\n// Convert a current unit value to another current unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of current units.\n//   - `outputUnit`: The valid types of current units.\n//   - `value`\nfunc ExampleUnitService_GetCurrentConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetCurrentConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetCurrentConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1current~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetEnergyConversion: Convert energy units.\n// \n// Convert a energy unit value to another energy unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of energy units.\n// \t- `outputUnit`: The valid types of energy units.\n// \t- `value`\n// \n// GetEnergyConversion: Convert energy units.\n// Convert a energy unit value to another energy unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of energy units.\n//   - `outputUnit`: The valid types of energy units.\n//   - `value`\nfunc ExampleUnitService_GetEnergyConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetEnergyConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetEnergyConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1energy~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetForceConversion: Convert force units.\n// \n// Convert a force unit value to another force unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of force units.\n// \t- `outputUnit`: The valid types of force units.\n// \t- `value`\n// \n// GetForceConversion: Convert force units.\n// Convert a force unit value to another force unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of force units.\n//   - `outputUnit`: The valid types of force units.\n//   - `value`\nfunc ExampleUnitService_GetForceConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetForceConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetForceConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1force~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetFrequencyConversion: Convert frequency units.\n// \n// Convert a frequency unit value to another frequency unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of frequency units.\n// \t- `outputUnit`: The valid types of frequency units.\n// \t- `value`\n// \n// GetFrequencyConversion: Convert frequency units.\n// Convert a frequency unit value to another frequency unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of frequency units.\n//   - `outputUnit`: The valid types of frequency units.\n//   - `value`\nfunc ExampleUnitService_GetFrequencyConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetFrequencyConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetFrequencyConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1frequency~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetLengthConversion: Convert length units.\n// \n// Convert a length unit value to another length unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of length units.\n// \t- `outputUnit`: The valid types of length units.\n// \t- `value`\n// \n// GetLengthConversion: Convert length units.\n// Convert a length unit value to another length unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of length units.\n//   - `outputUnit`: The valid types of length units.\n//   - `value`\nfunc ExampleUnitService_GetLengthConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetLengthConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetLengthConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1length~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetMassConversion: Convert mass units.\n// \n// Convert a mass unit value to another mass unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of mass units.\n// \t- `outputUnit`: The valid types of mass units.\n// \t- `value`\n// \n// GetMassConversion: Convert mass units.\n// Convert a mass unit value to another mass unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of mass units.\n//   - `outputUnit`: The valid types of mass units.\n//   - `value`\nfunc ExampleUnitService_GetMassConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetMassConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetMassConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1mass~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetPowerConversion: Convert power units.\n// \n// Convert a power unit value to another power unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of power units.\n// \t- `outputUnit`: The valid types of power units.\n// \t- `value`\n// \n// GetPowerConversion: Convert power units.\n// Convert a power unit value to another power unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of power units.\n//   - `outputUnit`: The valid types of power units.\n//   - `value`\nfunc ExampleUnitService_GetPowerConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetPowerConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetPowerConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1power~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetPressureConversion: Convert pressure units.\n// \n// Convert a pressure unit value to another pressure unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of pressure units.\n// \t- `outputUnit`: The valid types of pressure units.\n// \t- `value`\n// \n// GetPressureConversion: Convert pressure units.\n// Convert a pressure unit value to another pressure unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of pressure units.\n//   - `outputUnit`: The valid types of pressure units.\n//   - `value`\nfunc ExampleUnitService_GetPressureConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetPressureConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetPressureConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1pressure~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetTemperatureConversion: Convert temperature units.\n// \n// Convert a temperature unit value to another temperature unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of temperature units.\n// \t- `outputUnit`: The valid types of temperature units.\n// \t- `value`\n// \n// GetTemperatureConversion: Convert temperature units.\n// Convert a temperature unit value to another temperature unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of temperature units.\n//   - `outputUnit`: The valid types of temperature units.\n//   - `value`\nfunc ExampleUnitService_GetTemperatureConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetTemperatureConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetTemperatureConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1temperature~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetTorqueConversion: Convert torque units.\n// \n// Convert a torque unit value to another torque unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of torque units.\n// \t- `outputUnit`: The valid types of torque units.\n// \t- `value`\n// \n// GetTorqueConversion: Convert torque units.\n// Convert a torque unit value to another torque unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of torque units.\n//   - `outputUnit`: The valid types of torque units.\n//   - `value`\nfunc ExampleUnitService_GetTorqueConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetTorqueConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetTorqueConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1torque~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// GetVolumeConversion: Convert volume units.\n// \n// Convert a volume unit value to another volume unit value. This is a nice endpoint to use for helper functions.\n// \n// \n// Parameters\n// \n// \t- `inputUnit`: The valid types of volume units.\n// \t- `outputUnit`: The valid types of volume units.\n// \t- `value`\n// \n// GetVolumeConversion: Convert volume units.\n// Convert a volume unit value to another volume unit value. This is a nice endpoint to use for helper functions.\n//\n// Parameters\n//\n//   - `inputUnit`: The valid types of volume units.\n//   - `outputUnit`: The valid types of volume units.\n//   - `value`\nfunc ExampleUnitService_GetVolumeConversion() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Unit.GetVolumeConversion(\"\", \"\", 123.45)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UnitService.GetVolumeConversion"
  },
  "op": "add",
  "path": "/paths/~1unit~1conversion~1volume~1{input_unit}~1{output_unit}/get/x-go"
 },
 {
  "value": {
   "example": "// DeleteSelf: Delete your user.\n// \n// This endpoint requires authentication by any Zoo user. It deletes the authenticated user from Zoo's database.\n// \n// This call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.\n// \n// DeleteSelf: Delete your user.\n// This endpoint requires authentication by any Zoo user. It deletes the authenticated user from Zoo's database.\n//\n// This call will only succeed if all invoices associated with the user have been paid in full and there is no outstanding balance.\nfunc ExampleUserService_DeleteSelf() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.User.DeleteSelf(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.DeleteSelf"
  },
  "op": "add",
  "path": "/paths/~1user/delete/x-go"
 },
 {
  "value": {
   "example": "// GetSelf: Get your user.\n// \n// Get the user information for the authenticated user.\n// \n// Alternatively, you can also use the `/users/me` endpoint.\n// \n// GetSelf: Get your user.\n// Get the user information for the authenticated user.\n//\n// Alternatively, you can also use the `/users/me` endpoint.\nfunc ExampleUserService_GetSelf() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetSelf()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetSelf"
  },
  "op": "add",
  "path": "/paths/~1user/get/x-go"
 },
 {
  "value": {
   "example": "// UpdateSelf: Update your user.\n// \n// This endpoint requires authentication by any Zoo user. It updates information about the authenticated user.\n// \n// \n// Parameters\n// \n// \t- `body`: The user-modifiable parts of a User.\n// \n// UpdateSelf: Update your user.\n// This endpoint requires authentication by any Zoo user. It updates information about the authenticated user.\n//\n// Parameters\n//\n//   - `body`: The user-modifiable parts of a User.\nfunc ExampleUserService_UpdateSelf() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.UpdateSelf(kittycad.UpdateUser{Company: \"some-string\", Discord: \"some-string\", FirstName: \"some-string\", Github: \"some-string\", Image: kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}, LastName: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.UpdateSelf"
  },
  "op": "add",
  "path": "/paths/~1user/put/x-go"
 },
 {
  "value": {
   "example": "// UserList: List API calls for your user.\n// \n// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user.\n// \n// The API calls are returned in order of creation, with the most recently created API calls first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// UserList: List API calls for your user.\n// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user.\n//\n// The API calls are returned in order of creation, with the most recently created API calls first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleAPICallService_UserList() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.UserList(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.UserList"
  },
  "op": "add",
  "path": "/paths/~1user~1api-calls/get/x-go"
 },
 {
  "value": {
   "example": "// GetForUser: Get an API call for a user.\n// \n// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetForUser: Get an API call for a user.\n// This endpoint requires authentication by any Zoo user. It returns details of the requested API call for the user.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleAPICallService_GetForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.GetForUser(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.GetForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1api-calls~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// ListForUser: List API tokens for your user.\n// \n// This endpoint requires authentication by any Zoo user. It returns the API tokens for the authenticated user.\n// \n// The API tokens are returned in order of creation, with the most recently created API tokens first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// ListForUser: List API tokens for your user.\n// This endpoint requires authentication by any Zoo user. It returns the API tokens for the authenticated user.\n//\n// The API tokens are returned in order of creation, with the most recently created API tokens first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleAPITokenService_ListForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APIToken.ListForUser(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APITokenService.ListForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1api-tokens/get/x-go"
 },
 {
  "value": {
   "example": "// CreateForUser: Create a new API token for your user.\n// \n// This endpoint requires authentication by any Zoo user. It creates a new API token for the authenticated user.\n// \n// \n// Parameters\n// \n// \t- `label`\n// \n// CreateForUser: Create a new API token for your user.\n// This endpoint requires authentication by any Zoo user. It creates a new API token for the authenticated user.\n//\n// Parameters\n//\n//   - `label`\nfunc ExampleAPITokenService_CreateForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APIToken.CreateForUser(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APITokenService.CreateForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1api-tokens/post/x-go"
 },
 {
  "value": {
   "example": "// DeleteForUser: Delete an API token for your user.\n// \n// This endpoint requires authentication by any Zoo user. It deletes the requested API token for the user.\n// \n// This endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.\n// \n// \n// Parameters\n// \n// \t- `token`: An auth token. A uuid with a prefix of api-\n// \n// DeleteForUser: Delete an API token for your user.\n// This endpoint requires authentication by any Zoo user. It deletes the requested API token for the user.\n//\n// This endpoint does not actually delete the API token from the database. It merely marks the token as invalid. We still want to keep the token in the database for historical purposes.\n//\n// Parameters\n//\n//   - `token`: An auth token. A uuid with a prefix of api-\nfunc ExampleAPITokenService_DeleteForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.APIToken.DeleteForUser(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APITokenService.DeleteForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1api-tokens~1{token}/delete/x-go"
 },
 {
  "value": {
   "example": "// GetForUser: Get an API token for your user.\n// \n// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.\n// \n// \n// Parameters\n// \n// \t- `token`: An auth token. A uuid with a prefix of api-\n// \n// GetForUser: Get an API token for your user.\n// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.\n//\n// Parameters\n//\n//   - `token`: An auth token. A uuid with a prefix of api-\nfunc ExampleAPITokenService_GetForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APIToken.GetForUser(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APITokenService.GetForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1api-tokens~1{token}/get/x-go"
 },
 {
  "value": {
   "example": "// GetSelfExtended: Get extended information about your user.\n// \n// Get the user information for the authenticated user.\n// \n// Alternatively, you can also use the `/users-extended/me` endpoint.\n// \n// GetSelfExtended: Get extended information about your user.\n// Get the user information for the authenticated user.\n//\n// Alternatively, you can also use the `/users-extended/me` endpoint.\nfunc ExampleUserService_GetSelfExtended() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetSelfExtended()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetSelfExtended"
  },
  "op": "add",
  "path": "/paths/~1user~1extended/get/x-go"
 },
 {
  "value": {
   "example": "// GetOauth2ProvidersFor: Get the OAuth2 providers for your user.\n// \n// If this returns an empty array, then the user has not connected any OAuth2 providers and uses raw email authentication.\n// \n// This endpoint requires authentication by any Zoo user. It gets the providers for the authenticated user.\n// \n// GetOauth2ProvidersFor: Get the OAuth2 providers for your user.\n// If this returns an empty array, then the user has not connected any OAuth2 providers and uses raw email authentication.\n//\n// This endpoint requires authentication by any Zoo user. It gets the providers for the authenticated user.\nfunc ExampleUserService_GetOauth2ProvidersFor() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetOauth2ProvidersFor()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetOauth2ProvidersFor"
  },
  "op": "add",
  "path": "/paths/~1user~1oauth2~1providers/get/x-go"
 },
 {
  "value": {
   "example": "// GetOnboardingSelf: Get your user's onboarding status.\n// \n// Checks key part of their api usage to determine their onboarding progress\n// \n// GetOnboardingSelf: Get your user's onboarding status.\n// Checks key part of their api usage to determine their onboarding progress\nfunc ExampleUserService_GetOnboardingSelf() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetOnboardingSelf()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetOnboardingSelf"
  },
  "op": "add",
  "path": "/paths/~1user~1onboarding/get/x-go"
 },
 {
  "value": {
   "example": "// GetUser: Get a user's org.\n// \n// This endpoint requires authentication by any Zoo user. It gets the authenticated user's org.\n// \n// If the user is not a member of an org, this endpoint will return a 404.\n// \n// GetUser: Get a user's org.\n// This endpoint requires authentication by any Zoo user. It gets the authenticated user's org.\n//\n// If the user is not a member of an org, this endpoint will return a 404.\nfunc ExampleOrgService_GetUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Org.GetUser()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#OrgService.GetUser"
  },
  "op": "add",
  "path": "/paths/~1user~1org/get/x-go"
 },
 {
  "value": {
   "example": "// DeleteInformationForUser: Delete payment info for your user.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by any Zoo user. It deletes the payment information for the authenticated user.\n// \n// DeleteInformationForUser: Delete payment info for your user.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by any Zoo user. It deletes the payment information for the authenticated user.\nfunc ExamplePaymentService_DeleteInformationForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Payment.DeleteInformationForUser(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.DeleteInformationForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment/delete/x-go"
 },
 {
  "value": {
   "example": "// GetInformationForUser: Get payment info about your user.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by any Zoo user. It gets the payment information for the authenticated user.\n// \n// GetInformationForUser: Get payment info about your user.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by any Zoo user. It gets the payment information for the authenticated user.\nfunc ExamplePaymentService_GetInformationForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetInformationForUser()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetInformationForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment/get/x-go"
 },
 {
  "value": {
   "example": "// CreateInformationForUser: Create payment info for your user.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by any Zoo user. It creates the payment information for the authenticated user.\n// \n// \n// Parameters\n// \n// \t- `body`: The billing information for payments.\n// \n// CreateInformationForUser: Create payment info for your user.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by any Zoo user. It creates the payment information for the authenticated user.\n//\n// Parameters\n//\n//   - `body`: The billing information for payments.\nfunc ExamplePaymentService_CreateInformationForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.CreateInformationForUser(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: \"some-string\", Country: \"some-string\", State: \"some-string\", Street1: \"some-string\", Street2: \"some-string\", Zip: \"some-string\"}, Name: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.CreateInformationForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment/post/x-go"
 },
 {
  "value": {
   "example": "// UpdateInformationForUser: Update payment info for your user.\n// \n// This includes billing address, phone, and name.\n// \n// This endpoint requires authentication by any Zoo user. It updates the payment information for the authenticated user.\n// \n// \n// Parameters\n// \n// \t- `body`: The billing information for payments.\n// \n// UpdateInformationForUser: Update payment info for your user.\n// This includes billing address, phone, and name.\n//\n// This endpoint requires authentication by any Zoo user. It updates the payment information for the authenticated user.\n//\n// Parameters\n//\n//   - `body`: The billing information for payments.\nfunc ExamplePaymentService_UpdateInformationForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.UpdateInformationForUser(kittycad.BillingInfo{Address: kittycad.AddressDetails{City: \"some-string\", Country: \"some-string\", State: \"some-string\", Street1: \"some-string\", Street2: \"some-string\", Zip: \"some-string\"}, Name: \"some-string\", Phone: \"+1-555-555-555\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.UpdateInformationForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment/put/x-go"
 },
 {
  "value": {
   "example": "// GetBalanceForUser: Get balance for your user.\n// \n// This endpoint requires authentication by any Zoo user. It gets the balance information for the authenticated user.\n// \n// GetBalanceForUser: Get balance for your user.\n// This endpoint requires authentication by any Zoo user. It gets the balance information for the authenticated user.\nfunc ExamplePaymentService_GetBalanceForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetBalanceForUser()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetBalanceForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1balance/get/x-go"
 },
 {
  "value": {
   "example": "// CreateIntentForUser: Create a payment intent for your user.\n// \n// This endpoint requires authentication by any Zoo user. It creates a new payment intent for the authenticated user.\n// \n// CreateIntentForUser: Create a payment intent for your user.\n// This endpoint requires authentication by any Zoo user. It creates a new payment intent for the authenticated user.\nfunc ExamplePaymentService_CreateIntentForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.CreateIntentForUser()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.CreateIntentForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1intent/post/x-go"
 },
 {
  "value": {
   "example": "// ListInvoicesForUser: List invoices for your user.\n// \n// This endpoint requires authentication by any Zoo user. It lists invoices for the authenticated user.\n// \n// ListInvoicesForUser: List invoices for your user.\n// This endpoint requires authentication by any Zoo user. It lists invoices for the authenticated user.\nfunc ExamplePaymentService_ListInvoicesForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.ListInvoicesForUser()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.ListInvoicesForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1invoices/get/x-go"
 },
 {
  "value": {
   "example": "// ListMethodsForUser: List payment methods for your user.\n// \n// This endpoint requires authentication by any Zoo user. It lists payment methods for the authenticated user.\n// \n// ListMethodsForUser: List payment methods for your user.\n// This endpoint requires authentication by any Zoo user. It lists payment methods for the authenticated user.\nfunc ExamplePaymentService_ListMethodsForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.ListMethodsForUser()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.ListMethodsForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1methods/get/x-go"
 },
 {
  "value": {
   "example": "// DeleteMethodForUser: Delete a payment method for your user.\n// \n// This endpoint requires authentication by any Zoo user. It deletes the specified payment method for the authenticated user.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// DeleteMethodForUser: Delete a payment method for your user.\n// This endpoint requires authentication by any Zoo user. It deletes the specified payment method for the authenticated user.\n//\n// Parameters\n//\n//   - `id`\nfunc ExamplePaymentService_DeleteMethodForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Payment.DeleteMethodForUser(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.DeleteMethodForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1methods~1{id}/delete/x-go"
 },
 {
  "value": {
   "example": "// GetUserSubscription: Get the subscription for a user.\n// \n// This endpoint requires authentication by any Zoo user. It gets the subscription for the user.\n// \n// GetUserSubscription: Get the subscription for a user.\n// This endpoint requires authentication by any Zoo user. It gets the subscription for the user.\nfunc ExamplePaymentService_GetUserSubscription() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetUserSubscription()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetUserSubscription"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1subscriptions/get/x-go"
 },
 {
  "value": {
   "example": "// CreateUserSubscription: Create the subscription for a user.\n// \n// This endpoint requires authentication by any Zoo user. It creates the subscription for the user.\n// \n// \n// Parameters\n// \n// \t- `body`: A struct of Zoo product subscriptions a user can request.\n// \n// CreateUserSubscription: Create the subscription for a user.\n// This endpoint requires authentication by any Zoo user. It creates the subscription for the user.\n//\n// Parameters\n//\n//   - `body`: A struct of Zoo product subscriptions a user can request.\nfunc ExamplePaymentService_CreateUserSubscription() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.CreateUserSubscription(kittycad.ZooProductSubscriptionsUserRequest{ModelingApp: \"\", PayAnnually: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.CreateUserSubscription"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1subscriptions/post/x-go"
 },
 {
  "value": {
   "example": "// UpdateUserSubscription: Update the user's subscription.\n// \n// This endpoint requires authentication by any Zoo user. It updates the subscription for the user.\n// \n// \n// Parameters\n// \n// \t- `body`: A struct of Zoo product subscriptions a user can request.\n// \n// UpdateUserSubscription: Update the user's subscription.\n// This endpoint requires authentication by any Zoo user. It updates the subscription for the user.\n//\n// Parameters\n//\n//   - `body`: A struct of Zoo product subscriptions a user can request.\nfunc ExamplePaymentService_UpdateUserSubscription() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.UpdateUserSubscription(kittycad.ZooProductSubscriptionsUserRequest{ModelingApp: \"\", PayAnnually: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.UpdateUserSubscription"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1subscriptions/put/x-go"
 },
 {
  "value": {
   "example": "// ValidateCustomerTaxInformationForUser: Validate a user's information is correct and valid for automatic tax.\n// \n// This endpoint requires authentication by any Zoo user. It will return an error if the user's information is not valid for automatic tax. Otherwise, it will return an empty successful response.\n// \n// ValidateCustomerTaxInformationForUser: Validate a user's information is correct and valid for automatic tax.\n// This endpoint requires authentication by any Zoo user. It will return an error if the user's information is not valid for automatic tax. Otherwise, it will return an empty successful response.\nfunc ExamplePaymentService_ValidateCustomerTaxInformationForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Payment.ValidateCustomerTaxInformationForUser(); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.ValidateCustomerTaxInformationForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1payment~1tax/get/x-go"
 },
 {
  "value": {
   "example": "// GetPrivacySettings: Get the privacy settings for a user.\n// \n// This endpoint requires authentication by any Zoo user. It gets the privacy settings for the user.\n// \n// GetPrivacySettings: Get the privacy settings for a user.\n// This endpoint requires authentication by any Zoo user. It gets the privacy settings for the user.\nfunc ExampleUserService_GetPrivacySettings() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetPrivacySettings()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetPrivacySettings"
  },
  "op": "add",
  "path": "/paths/~1user~1privacy/get/x-go"
 },
 {
  "value": {
   "example": "// UpdatePrivacySettings: Update the user's privacy settings.\n// \n// This endpoint requires authentication by any Zoo user. It updates the privacy settings for the user.\n// \n// \n// Parameters\n// \n// \t- `body`: Privacy settings for an org or user.\n// \n// UpdatePrivacySettings: Update the user's privacy settings.\n// This endpoint requires authentication by any Zoo user. It updates the privacy settings for the user.\n//\n// Parameters\n//\n//   - `body`: Privacy settings for an org or user.\nfunc ExampleUserService_UpdatePrivacySettings() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.UpdatePrivacySettings(kittycad.PrivacySettings{CanTrainOnData: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.UpdatePrivacySettings"
  },
  "op": "add",
  "path": "/paths/~1user~1privacy/put/x-go"
 },
 {
  "value": {
   "example": "// GetSessionFor: Get a session for your user.\n// \n// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.\n// \n// \n// Parameters\n// \n// \t- `token`: An auth token. A uuid with a prefix of ses-\n// \n// GetSessionFor: Get a session for your user.\n// This endpoint requires authentication by any Zoo user. It returns details of the requested API token for the user.\n//\n// Parameters\n//\n//   - `token`: An auth token. A uuid with a prefix of ses-\nfunc ExampleUserService_GetSessionFor() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetSessionFor(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetSessionFor"
  },
  "op": "add",
  "path": "/paths/~1user~1session~1{token}/get/x-go"
 },
 {
  "value": {
   "example": "// GetShortlinks: Get the shortlinks for a user.\n// \n// This endpoint requires authentication by any Zoo user. It gets the shortlinks for the user.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// GetShortlinks: Get the shortlinks for a user.\n// This endpoint requires authentication by any Zoo user. It gets the shortlinks for the user.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleUserService_GetShortlinks() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetShortlinks(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetShortlinks"
  },
  "op": "add",
  "path": "/paths/~1user~1shortlinks/get/x-go"
 },
 {
  "value": {
   "example": "// CreateShortlink: Create a shortlink for a user.\n// \n// This endpoint requires authentication by any Zoo user. It creates a shortlink for the user.\n// \n// \n// Parameters\n// \n// \t- `body`: Request to create a shortlink.\n// \n// CreateShortlink: Create a shortlink for a user.\n// This endpoint requires authentication by any Zoo user. It creates a shortlink for the user.\n//\n// Parameters\n//\n//   - `body`: Request to create a shortlink.\nfunc ExampleUserService_CreateShortlink() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.CreateShortlink(kittycad.CreateShortlinkRequest{Password: \"some-string\", RestrictToOrg: true, Url: kittycad.URL{\u0026url.URL{Scheme: \"https\", Host: \"example.com\"}}})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.CreateShortlink"
  },
  "op": "add",
  "path": "/paths/~1user~1shortlinks/post/x-go"
 },
 {
  "value": {
   "example": "// DeleteShortlink: Delete a shortlink for a user.\n// \n// This endpoint requires authentication by any Zoo user. It deletes a shortlink for the user.\n// \n// \n// Parameters\n// \n// \t- `key`\n// \n// DeleteShortlink: Delete a shortlink for a user.\n// This endpoint requires authentication by any Zoo user. It deletes a shortlink for the user.\n//\n// Parameters\n//\n//   - `key`\nfunc ExampleUserService_DeleteShortlink() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.User.DeleteShortlink(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.DeleteShortlink"
  },
  "op": "add",
  "path": "/paths/~1user~1shortlinks~1{key}/delete/x-go"
 },
 {
  "value": {
   "example": "// RedirectUserShortlink: Redirect the user to the URL for the shortlink.\n// \n// This endpoint might require authentication by a Zoo user. It gets the shortlink for the user and redirects them to the URL. If the shortlink is owned by an org, the user must be a member of the org.\n// \n// \n// Parameters\n// \n// \t- `key`\n// \n// RedirectUserShortlink: Redirect the user to the URL for the shortlink.\n// This endpoint might require authentication by a Zoo user. It gets the shortlink for the user and redirects them to the URL. If the shortlink is owned by an org, the user must be a member of the org.\n//\n// Parameters\n//\n//   - `key`\nfunc ExampleHiddenService_RedirectUserShortlink() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Hidden.RedirectUserShortlink(\"some-string\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#HiddenService.RedirectUserShortlink"
  },
  "op": "add",
  "path": "/paths/~1user~1shortlinks~1{key}/get/x-go"
 },
 {
  "value": {
   "example": "// UpdateShortlink: Update a shortlink for a user.\n// \n// This endpoint requires authentication by any Zoo user. It updates a shortlink for the user.\n// \n// This endpoint really only allows you to change the `restrict_to_org` setting of a shortlink. Thus it is only useful for folks who are part of an org. If you are not part of an org, you will not be able to change the `restrict_to_org` status.\n// \n// \n// Parameters\n// \n// \t- `key`\n// \t- `body`: Request to update a shortlink.\n// \n// UpdateShortlink: Update a shortlink for a user.\n// This endpoint requires authentication by any Zoo user. It updates a shortlink for the user.\n//\n// This endpoint really only allows you to change the `restrict_to_org` setting of a shortlink. Thus it is only useful for folks who are part of an org. If you are not part of an org, you will not be able to change the `restrict_to_org` status.\n//\n// Parameters\n//\n//   - `key`\n//   - `body`: Request to update a shortlink.\nfunc ExampleUserService_UpdateShortlink() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.User.UpdateShortlink(\"some-string\", kittycad.UpdateShortlinkRequest{Password: \"some-string\", RestrictToOrg: true}); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.UpdateShortlink"
  },
  "op": "add",
  "path": "/paths/~1user~1shortlinks~1{key}/put/x-go"
 },
 {
  "value": {
   "example": "// ListTextToCadModelsForUser: List text-to-CAD models you've generated.\n// \n// This will always return the STEP file contents as well as the format the user originally requested.\n// \n// This endpoint requires authentication by any Zoo user. It returns the text-to-CAD models for the authenticated user.\n// \n// The text-to-CAD models are returned in order of creation, with the most recently created text-to-CAD models first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \t- `noModels`\n// \n// ListTextToCadModelsForUser: List text-to-CAD models you've generated.\n// This will always return the STEP file contents as well as the format the user originally requested.\n//\n// This endpoint requires authentication by any Zoo user. It returns the text-to-CAD models for the authenticated user.\n//\n// The text-to-CAD models are returned in order of creation, with the most recently created text-to-CAD models first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\n//\n//   - `noModels`\nfunc ExampleMlService_ListTextToCadModelsForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.ListTextToCadModelsForUser(123, \"some-string\", \"\", true)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.ListTextToCadModelsForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1text-to-cad/get/x-go"
 },
 {
  "value": {
   "example": "// GetTextToCadModelForUser: Get a text-to-CAD response.\n// \n// This endpoint requires authentication by any Zoo user. The user must be the owner of the text-to-CAD model.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetTextToCadModelForUser: Get a text-to-CAD response.\n// This endpoint requires authentication by any Zoo user. The user must be the owner of the text-to-CAD model.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleMlService_GetTextToCadModelForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Ml.GetTextToCadModelForUser(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.GetTextToCadModelForUser"
  },
  "op": "add",
  "path": "/paths/~1user~1text-to-cad~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// CreateTextToCadModelFeedback: Give feedback to a specific ML response.\n// \n// This can be a text-to-CAD creation or iteration.\n// \n// This endpoint requires authentication by any Zoo user. The user must be the owner of the ML response, in order to give feedback.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \t- `feedback`: Human feedback on an ML response.\n// \n// CreateTextToCadModelFeedback: Give feedback to a specific ML response.\n// This can be a text-to-CAD creation or iteration.\n//\n// This endpoint requires authentication by any Zoo user. The user must be the owner of the ML response, in order to give feedback.\n//\n// Parameters\n//\n//   - `id`\n//   - `feedback`: Human feedback on an ML response.\nfunc ExampleMlService_CreateTextToCadModelFeedback() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := client.Ml.CreateTextToCadModelFeedback(kittycad.ParseUUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\"), \"\"); err != nil {\n\t\tpanic(err)\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#MlService.CreateTextToCadModelFeedback"
  },
  "op": "add",
  "path": "/paths/~1user~1text-to-cad~1{id}/post/x-go"
 },
 {
  "value": {
   "example": "// List: List users.\n// \n// This endpoint requires authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// List: List users.\n// This endpoint requires authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleUserService_List() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.List(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.List"
  },
  "op": "add",
  "path": "/paths/~1users/get/x-go"
 },
 {
  "value": {
   "example": "// ListExtended: List users with extended information.\n// \n// This endpoint requires authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.\n// \n// \n// Parameters\n// \n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// ListExtended: List users with extended information.\n// This endpoint requires authentication by a Zoo employee. The users are returned in order of creation, with the most recently created users first.\n//\n// Parameters\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleUserService_ListExtended() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.ListExtended(123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.ListExtended"
  },
  "op": "add",
  "path": "/paths/~1users-extended/get/x-go"
 },
 {
  "value": {
   "example": "// GetExtended: Get extended information about a user.\n// \n// To get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.\n// \n// Alternatively, to get information about the authenticated user, use `/user/extended` endpoint.\n// \n// To get information about any Zoo user, you must be a Zoo employee.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetExtended: Get extended information about a user.\n// To get information about yourself, use `/users-extended/me` as the endpoint. By doing so you will get the user information for the authenticated user.\n//\n// Alternatively, to get information about the authenticated user, use `/user/extended` endpoint.\n//\n// To get information about any Zoo user, you must be a Zoo employee.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleUserService_GetExtended() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.GetExtended(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.GetExtended"
  },
  "op": "add",
  "path": "/paths/~1users-extended~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// Get: Get a user.\n// \n// To get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.\n// \n// Alternatively, to get information about the authenticated user, use `/user` endpoint.\n// \n// To get information about any Zoo user, you must be a Zoo employee.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// Get: Get a user.\n// To get information about yourself, use `/users/me` as the endpoint. By doing so you will get the user information for the authenticated user.\n//\n// Alternatively, to get information about the authenticated user, use `/user` endpoint.\n//\n// To get information about any Zoo user, you must be a Zoo employee.\n//\n// Parameters\n//\n//   - `id`\nfunc ExampleUserService_Get() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.User.Get(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#UserService.Get"
  },
  "op": "add",
  "path": "/paths/~1users~1{id}/get/x-go"
 },
 {
  "value": {
   "example": "// ListForUser: List API calls for a user.\n// \n// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user if \"me\" is passed as the user id.\n// \n// Alternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.\n// \n// If the authenticated user is a Zoo employee, then the API calls are returned for the user specified by the user id.\n// \n// The API calls are returned in order of creation, with the most recently created API calls first.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \t- `limit`\n// \t- `pageToken`\n// \t- `sortBy`: Supported set of sort modes for scanning by created_at only.\n// \t\t\n// \t\tCurrently, we only support scanning in ascending order.\n// \n// ListForUser: List API calls for a user.\n// This endpoint requires authentication by any Zoo user. It returns the API calls for the authenticated user if \"me\" is passed as the user id.\n//\n// Alternatively, you can use the `/user/api-calls` endpoint to get the API calls for your user.\n//\n// If the authenticated user is a Zoo employee, then the API calls are returned for the user specified by the user id.\n//\n// The API calls are returned in order of creation, with the most recently created API calls first.\n//\n// Parameters\n//\n//   - `id`\n//\n//   - `limit`\n//\n//   - `pageToken`\n//\n//   - `sortBy`: Supported set of sort modes for scanning by created_at only.\n//\n//     Currently, we only support scanning in ascending order.\nfunc ExampleAPICallService_ListForUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.APICall.ListForUser(\"some-string\", 123, \"some-string\", \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#APICallService.ListForUser"
  },
  "op": "add",
  "path": "/paths/~1users~1{id}~1api-calls/get/x-go"
 },
 {
  "value": {
   "example": "// GetBalanceForAnyUser: Get balance for an user.\n// \n// This endpoint requires authentication by a Zoo employee. It gets the balance information for the specified user.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \n// GetBalanceForAnyUser: Get balance for an user.\n// This endpoint requires authentication by a Zoo employee. It gets the balance information for the specified user.\n//\n// Parameters\n//\n//   - `id`\nfunc ExamplePaymentService_GetBalanceForAnyUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.GetBalanceForAnyUser(\"some-string\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.GetBalanceForAnyUser"
  },
  "op": "add",
  "path": "/paths/~1users~1{id}~1payment~1balance/get/x-go"
 },
 {
  "value": {
   "example": "// UpdateBalanceForAnyUser: Update balance for an user.\n// \n// This endpoint requires authentication by a Zoo employee. It updates the balance information for the specified user.\n// \n// \n// Parameters\n// \n// \t- `id`\n// \t- `body`: The data for updating a balance.\n// \n// UpdateBalanceForAnyUser: Update balance for an user.\n// This endpoint requires authentication by a Zoo employee. It updates the balance information for the specified user.\n//\n// Parameters\n//\n//   - `id`\n//   - `body`: The data for updating a balance.\nfunc ExamplePaymentService_UpdateBalanceForAnyUser() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tresult, err := client.Payment.UpdateBalanceForAnyUser(\"some-string\", kittycad.UpdatePaymentBalance{MonthlyCreditsRemaining: 123.45, PrePayCashRemaining: 123.45, PrePayCreditsRemaining: 123.45})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf(\"%#v\", result)\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#PaymentService.UpdateBalanceForAnyUser"
  },
  "op": "add",
  "path": "/paths/~1users~1{id}~1payment~1balance/put/x-go"
 },
 {
  "value": {
   "example": "// CreateTerm: Create a terminal.\n// \n// Attach to a docker container to create an interactive terminal.\n// \n// CreateTerm: Create a terminal.\n// Attach to a docker container to create an interactive terminal.\nfunc ExampleExecutorService_CreateTerm() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Create the websocket connection.\n\tws, err := client.Executor.CreateTerm()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer ws.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tfor {\n\t\tselect {\n\t\tcase \u003c-done:\n\t\t\treturn\n\t\tcase t := \u003c-ticker.C:\n\t\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase \u003c-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\n\t\t\t// Cleanly close the connection by sending a close message and then\n\t\t\t// waiting (with timeout) for the server to close the connection.\n\t\t\terr := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase \u003c-done:\n\t\t\tcase \u003c-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ExecutorService.CreateTerm"
  },
  "op": "add",
  "path": "/paths/~1ws~1executor~1term/get/x-go"
 },
 {
  "value": {
   "example": "// CommandsWs: Open a websocket which accepts modeling commands.\n// \n// Pass those commands to the engine via websocket, and pass responses back to the client. Basically, this is a websocket proxy between the frontend/client and the engine.\n// \n// \n// Parameters\n// \n// \t- `fps`\n// \t- `pool`\n// \t- `postEffect`: Post effect type\n// \t- `replay`\n// \t- `showGrid`\n// \t- `unlockedFramerate`\n// \t- `videoResHeight`\n// \t- `videoResWidth`\n// \t- `webrtc`\n// \t- `body`: The websocket messages the server receives.\n// \n// CommandsWs: Open a websocket which accepts modeling commands.\n// Pass those commands to the engine via websocket, and pass responses back to the client. Basically, this is a websocket proxy between the frontend/client and the engine.\n//\n// Parameters\n//\n//   - `fps`\n//   - `pool`\n//   - `postEffect`: Post effect type\n//   - `replay`\n//   - `showGrid`\n//   - `unlockedFramerate`\n//   - `videoResHeight`\n//   - `videoResWidth`\n//   - `webrtc`\n//   - `body`: The websocket messages the server receives.\nfunc ExampleModelingService_CommandsWs() {\n\tclient, err := kittycad.NewClientFromEnv(\"your apps user agent\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Create the websocket connection.\n\tws, err := client.Modeling.CommandsWs(123, \"some-string\", kittycad.PostEffectTypePhosphor, \"some-string\", true, true, 123, 123, true, \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer ws.Close()\n\n\tdone := make(chan struct{})\n\n\tgo func() {\n\t\tdefer close(done)\n\t\tfor {\n\t\t\t_, message, err := ws.ReadMessage()\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"read:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tlog.Printf(\"recv: %s\", message)\n\t\t}\n\t}()\n\n\tticker := time.NewTicker(time.Second)\n\tdefer ticker.Stop()\n\n\tinterrupt := make(chan os.Signal, 1)\n\tsignal.Notify(interrupt, os.Interrupt)\n\n\tfor {\n\t\tselect {\n\t\tcase \u003c-done:\n\t\t\treturn\n\t\tcase t := \u003c-ticker.C:\n\t\t\terr := ws.WriteMessage(websocket.TextMessage, []byte(t.String()))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\tcase \u003c-interrupt:\n\t\t\tlog.Println(\"interrupt\")\n\n\t\t\t// Cleanly close the connection by sending a close message and then\n\t\t\t// waiting (with timeout) for the server to close the connection.\n\t\t\terr := ws.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, \"\"))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"write close:\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase \u003c-done:\n\t\t\tcase \u003c-time.After(time.Second):\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n\n}\n",
   "libDocsLink": "https://pkg.go.dev/github.com/kittycad/kittycad.go/#ModelingService.CommandsWs"
  },
  "op": "add",
  "path": "/paths/~1ws~1modeling~1commands/get/x-go"
 }
]